name: graphql-ppx-pipeline

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test_and_build:
    name: ${{ matrix.os }}/node-${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version:
          - 18.x
        ocaml-compiler:
          - 5.1.0
        os: [ubuntu-latest]
    container:
      image: ocaml/opam:alpine-ocaml-5.1-afl

    steps:
      - uses: actions/checkout@v1

      - name: Install NPM
        run: apk add --update nodejs npm
 
      - name: Install Deps
        run: |
          make install
          npm ci --no-optional --ignore-scripts

      - name: Build
        run: make build

      - name: Native Tests
        run: make native-tests
        env:
          CI: true

      - name: Snapshot Tests
        run: make snapshot-tests
        env:
          CI: true

      - name: Release Static
        env:
          GRAPHQL_CI: true
        run: make release-static

      - name: Upload artifacts ${{ matrix.os }} (Only on release)
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.os }}
          path: _build/default/src/bin/bin.exe

  publish:
    needs: [test_and_build]
    name: (only on release) Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Download linux artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: binaries/linux

      - name: Download macOS artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: macOS-latest
          path: binaries/darwin

      - name: Download windows artifacts
        if: success()
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: binaries/windows

      - name: Move artifacts
        if: success()
        run: |
          mkdir -p bin
          mv binaries/darwin/bin.exe bin/graphql-ppx-darwin-x64.exe
          # this one is checked in the repo, because we don't have CI runners for it
          mv binaries/darwin-arm64/bin.exe bin/graphql-ppx-darwin-arm64.exe
          mv binaries/windows/bin.exe bin/graphql-ppx-win-x64.exe
          mv binaries/linux/bin.exe bin/graphql-ppx-linux-x64.exe

      - name: Publish
        if: success() && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}

      - name: Publish Prerelease
        if: success() && github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/')
        run: |
          npm version prerelease -preid $(git rev-parse --short HEAD) -no-git-tag-version
          npm publish --tag=dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN_JAAP }}
