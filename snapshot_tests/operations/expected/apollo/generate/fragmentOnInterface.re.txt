[@ocaml.ppx.context
  {
    tool_name: "ppx_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module InterfaceFragment: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t = {id: string};
    type nonrec t_User = t;
    type nonrec t_AdminUser = t;
    type nonrec t_AnonymousUser = t;
    type nonrec t_OtherUser = t;
  };
  type t = {id: string};
  type nonrec t_User = t;
  type nonrec t_AdminUser = t;
  type nonrec t_AnonymousUser = t;
  type nonrec t_OtherUser = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `InterfaceFragment], Raw.t) => t;
  let verifyName: [ | `InterfaceFragment] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = {id: string};
    type nonrec t_User = t;
    type nonrec t_AdminUser = t;
    type nonrec t_AnonymousUser = t;
    type nonrec t_OtherUser = t;
  };
  type t = {id: string};
  type nonrec t_User = t;
  type nonrec t_AdminUser = t;
  type nonrec t_AnonymousUser = t;
  type nonrec t_OtherUser = t;
  let query = "fragment InterfaceFragment on User   {\n__typename\nid  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        id: {
          let value = (value: Raw.t).id;
          value;
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let id = {
          let value = (value: t).id;
          value;
        };
        {id: id};
      }: Raw.t
    );
  let verifyArgsAndParse =
      (
        ~fragmentName as _InterfaceFragment: [ | `InterfaceFragment],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `InterfaceFragment => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
};
module AnotherFragment: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type nonrec t_User = t;
    type nonrec t_AdminUser = t;
    type nonrec t_AnonymousUser = t;
    type nonrec t_OtherUser = t;
  };
  type t = {
    id: string,
    interfaceFragment: InterfaceFragment.t_User,
  };
  type nonrec t_User = t;
  type nonrec t_AdminUser = t;
  type nonrec t_AnonymousUser = t;
  type nonrec t_OtherUser = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `AnotherFragment], Raw.t) => t;
  let verifyName: [ | `AnotherFragment] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t;
    type nonrec t_User = t;
    type nonrec t_AdminUser = t;
    type nonrec t_AnonymousUser = t;
    type nonrec t_OtherUser = t;
  };
  type t = {
    id: string,
    interfaceFragment: InterfaceFragment.t_User,
  };
  type nonrec t_User = t;
  type nonrec t_AdminUser = t;
  type nonrec t_AnonymousUser = t;
  type nonrec t_OtherUser = t;
  let query =
    "fragment AnotherFragment on User   {\n__typename\nid  \n...InterfaceFragment   \n}\n"
    ++ InterfaceFragment.query;
  let parse: Raw.t => t =
    (value) => (
      {
        id: {
          let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "id"));
          value;
        },
        interfaceFragment: {
          let value: InterfaceFragment.Raw.t = Obj.magic(value);

          InterfaceFragment.verifyArgsAndParse(
            ~fragmentName=`InterfaceFragment,
            value,
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      Obj.magic(
        Js.Array.reduce(
          GraphQL_PPX.deepMerge,
          Obj.magic(
            {
              let id = {
                let value = (value: t).id;
                value;
              };
              {"id": id};
            },
          ): Js.Json.t,
          [|
            (
              Obj.magic(
                InterfaceFragment.serialize((value: t).interfaceFragment),
              ): Js.Json.t
            ),
          |],
        ),
      ): Raw.t
    );
  let verifyArgsAndParse =
      (~fragmentName as _AnotherFragment: [ | `AnotherFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `AnotherFragment => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
};
module AnonUser: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type nonrec t_AnonymousUser = t;
  };
  type t = {
    __typename: string,
    id: string,
    interfaceFragment: InterfaceFragment.t_AnonymousUser,
  };
  type nonrec t_AnonymousUser = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `AnonUser], Raw.t) => t;
  let verifyName: [ | `AnonUser] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t;
    type nonrec t_AnonymousUser = t;
  };
  type t = {
    __typename: string,
    id: string,
    interfaceFragment: InterfaceFragment.t_AnonymousUser,
  };
  type nonrec t_AnonymousUser = t;
  let query =
    "fragment AnonUser on AnonymousUser   {\n__typename  \nid  \n...InterfaceFragment   \n}\n"
    ++ InterfaceFragment.query;
  let parse: Raw.t => t =
    (value) => (
      {
        __typename: {
          let value =
            Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename"));
          value;
        },
        id: {
          let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "id"));
          value;
        },
        interfaceFragment: {
          let value: InterfaceFragment.Raw.t = Obj.magic(value);

          InterfaceFragment.verifyArgsAndParse(
            ~fragmentName=`InterfaceFragment,
            value,
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      Obj.magic(
        Js.Array.reduce(
          GraphQL_PPX.deepMerge,
          Obj.magic(
            {
              let id = {
                let value = (value: t).id;
                value;
              }
              and __typename = {
                let value = (value: t).__typename;
                value;
              };
              {"__typename": __typename, "id": id};
            },
          ): Js.Json.t,
          [|
            (
              Obj.magic(
                InterfaceFragment.serialize((value: t).interfaceFragment),
              ): Js.Json.t
            ),
          |],
        ),
      ): Raw.t
    );
  let verifyArgsAndParse =
      (~fragmentName as _AnonUser: [ | `AnonUser], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `AnonUser => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
};
