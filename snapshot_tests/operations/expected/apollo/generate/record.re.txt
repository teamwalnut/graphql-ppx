[@ocaml.ppx.context
  {
    tool_name: "ppx_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Graphql_ppx_runtime = {
  let assign_typename = (obj, _) => obj;
};

type scalars = {
  __typename: string,
  string,
  int,
};

type dog = {
  __typename: string,
  name: string,
  barkVolume: float,
};

type oneFieldQuery = {nullableString: option(string)};
module MyQuery: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t_variousScalars = {
      __typename: string,
      string,
      int,
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t = {variousScalars: scalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t_variousScalars = {
      __typename: string,
      string,
      int,
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t = {variousScalars: scalars};
  type t_variables = unit;
  let query = "query   {\nvariousScalars  {\n__typename  \nstring  \nint  \n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = (value: Raw.t).variousScalars;
          (
            {
              __typename: {
                let value = (value: Raw.t_variousScalars).__typename;
                value;
              },
              string: {
                let value = (value: Raw.t_variousScalars).string;
                value;
              },
              int: {
                let value = (value: Raw.t_variousScalars).int;
                value;
              },
            }: scalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let variousScalars = {
          let value = (value: t).variousScalars;
          (
            {
              let int = {
                let value = (value: scalars).int;
                value;
              }
              and string = {
                let value = (value: scalars).string;
                value;
              }
              and __typename = {
                let value = (value: scalars).__typename;
                value;
              };
              {__typename, string, int};
            }: Raw.t_variousScalars
          );
        };
        {variousScalars: variousScalars};
      }: Raw.t
    );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
};
module OneFieldQuery: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t(string),
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t(string),
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query = "query   {\nvariousScalars  {\n__typename  \nnullableString  \n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = (value: Raw.t).variousScalars;
          (
            {
              __typename: {
                let value = (value: Raw.t_variousScalars).__typename;
                value;
              },
              nullableString: {
                let value = (value: Raw.t_variousScalars).nullableString;
                switch (Js.toOption(value)) {
                | Some(value) => Some(value)
                | None => None
                };
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let variousScalars = {
          let value = (value: t).variousScalars;
          (
            {
              let nullableString = {
                let value = (value: t_variousScalars).nullableString;
                switch (value) {
                | Some(value) => Js.Nullable.return(value)
                | None => Js.Nullable.null
                };
              }
              and __typename = {
                let value = (value: t_variousScalars).__typename;
                value;
              };
              {__typename, nullableString};
            }: Raw.t_variousScalars
          );
        };
        {variousScalars: variousScalars};
      }: Raw.t
    );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
};
module OneFieldQueryWithTypename: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t(string),
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t(string),
    };
    type t = {variousScalars: t_variousScalars};
    type t_variables = unit;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query = "query   {\nvariousScalars  {\n__typename  \nnullableString  \n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = (value: Raw.t).variousScalars;
          (
            {
              __typename: {
                let value = (value: Raw.t_variousScalars).__typename;
                value;
              },
              nullableString: {
                let value = (value: Raw.t_variousScalars).nullableString;
                switch (Js.toOption(value)) {
                | Some(value) => Some(value)
                | None => None
                };
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let variousScalars = {
          let value = (value: t).variousScalars;
          (
            {
              let nullableString = {
                let value = (value: t_variousScalars).nullableString;
                switch (value) {
                | Some(value) => Js.Nullable.return(value)
                | None => Js.Nullable.null
                };
              }
              and __typename = {
                let value = (value: t_variousScalars).__typename;
                value;
              };
              {__typename, nullableString};
            }: Raw.t_variousScalars
          );
        };
        {variousScalars: variousScalars};
      }: Raw.t
    );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
};
module ExternalFragmentQuery = {
  module Fragment: {
    [@ocaml.warning "-32-30"];
    module Raw: {
      type t = {
        __typename: string,
        string,
        int,
      };
      type nonrec t_VariousScalars = t;
    };
    type t = {
      __typename: string,
      string,
      int,
    };
    type nonrec t_VariousScalars = t;
    /** the GraphQL fragment */
    let query: string;
    /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
    let serialize: t => Raw.t;
    let verifyArgsAndParse: (~fragmentName: [ | `Fragment], Raw.t) => t;
    let verifyName: [ | `Fragment] => unit;
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
  } = {
    [@ocaml.warning "-32-30"];
    module Raw = {
      type t = {
        __typename: string,
        string,
        int,
      };
      type nonrec t_VariousScalars = t;
    };
    type t = {
      __typename: string,
      string,
      int,
    };
    type nonrec t_VariousScalars = t;
    let query = "fragment Fragment on VariousScalars   {\n__typename  \nstring  \nint  \n}\n";
    let parse: Raw.t => t =
      (value) => (
        {
          __typename: {
            let value = (value: Raw.t).__typename;
            value;
          },
          string: {
            let value = (value: Raw.t).string;
            value;
          },
          int: {
            let value = (value: Raw.t).int;
            value;
          },
        }: t
      );
    let serialize: t => Raw.t =
      (value) => (
        {
          let int = {
            let value = (value: t).int;
            value;
          }
          and string = {
            let value = (value: t).string;
            value;
          }
          and __typename = {
            let value = (value: t).__typename;
            value;
          };
          {__typename, string, int};
        }: Raw.t
      );
    let verifyArgsAndParse =
        (~fragmentName as _Fragment: [ | `Fragment], value: Raw.t) =>
      parse(value);
    let verifyName =
      fun
      | `Fragment => ();
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
  };
  module Untitled1: {
    [@ocaml.warning "-32-30"];
    module Raw: {
      type t = {variousScalars: Fragment.Raw.t_VariousScalars};
      type t_variables = unit;
    };
    type t = {variousScalars: Fragment.t_VariousScalars};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
  } = {
    [@ocaml.warning "-32-30"];
    module Raw = {
      type t = {variousScalars: Fragment.Raw.t_VariousScalars};
      type t_variables = unit;
    };
    type t = {variousScalars: Fragment.t_VariousScalars};
    type t_variables = unit;
    let query =
      "query   {\nvariousScalars  {\n...Fragment   \n}\n\n}\n"
      ++ Fragment.query;
    let parse: Raw.t => t =
      (value) => (
        {
          variousScalars: {
            let value = (value: Raw.t).variousScalars;

            Fragment.verifyArgsAndParse(~fragmentName=`Fragment, value);
          },
        }: t
      );
    let serialize: t => Raw.t =
      (value) => (
        {
          let variousScalars = {
            let value = (value: t).variousScalars;
            Fragment.serialize(value);
          };
          {variousScalars: variousScalars};
        }: Raw.t
      );
    let serializeVariables = () => ();
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
  };
};
module InlineFragmentQuery: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type t_dogOrHuman;
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  };
  type t_dogOrHuman = [
    | `FutureAddedValue(Js.Json.t)
    | `Dog(t_dogOrHuman_Dog)
  ];
  type t = {dogOrHuman: t_dogOrHuman};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type t_dogOrHuman;
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
  };
  type t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  };
  type t_dogOrHuman = [
    | `FutureAddedValue(Js.Json.t)
    | `Dog(t_dogOrHuman_Dog)
  ];
  type t = {dogOrHuman: t_dogOrHuman};
  type t_variables = unit;
  let query = "query   {\ndogOrHuman  {\n__typename\n...on Dog   {\n__typename  \nname  \nbarkVolume  \n}\n\n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        dogOrHuman: {
          let value = (value: Raw.t).dogOrHuman;
          let typename: string =
            Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename"));
          (
            switch (typename) {
            | "Dog" =>
              `Dog(
                {
                  let value: Raw.t_dogOrHuman_Dog = Obj.magic(value);
                  (
                    {
                      __typename: {
                        let value = (value: Raw.t_dogOrHuman_Dog).__typename;
                        value;
                      },
                      name: {
                        let value = (value: Raw.t_dogOrHuman_Dog).name;
                        value;
                      },
                      barkVolume: {
                        let value = (value: Raw.t_dogOrHuman_Dog).barkVolume;
                        value;
                      },
                    }: t_dogOrHuman_Dog
                  );
                },
              )
            | _ => `FutureAddedValue(Obj.magic(value): Js.Json.t)
            }: t_dogOrHuman
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let dogOrHuman = {
          let value = (value: t).dogOrHuman;
          switch (value) {
          | `Dog(value) => (
              Obj.magic(
                {
                  let barkVolume = {
                    let value = (value: t_dogOrHuman_Dog).barkVolume;
                    value;
                  }
                  and name = {
                    let value = (value: t_dogOrHuman_Dog).name;
                    value;
                  }
                  and __typename = {
                    let value = (value: t_dogOrHuman_Dog).__typename;
                    value;
                  };
                  {__typename: "Dog", name, barkVolume};
                }: Raw.t_dogOrHuman_Dog,
              ): Raw.t_dogOrHuman
            )
          | `FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
          };
        };
        {dogOrHuman: dogOrHuman};
      }: Raw.t
    );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Js.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
};
module UnionExternalFragmentQuery = {
  module DogFragment: {
    [@ocaml.warning "-32-30"];
    module Raw: {
      type t = {
        __typename: string,
        name: string,
        barkVolume: float,
      };
      type nonrec t_Dog = t;
    };
    type t = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type nonrec t_Dog = t;
    /** the GraphQL fragment */
    let query: string;
    /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
    let serialize: t => Raw.t;
    let verifyArgsAndParse: (~fragmentName: [ | `DogFragment], Raw.t) => t;
    let verifyName: [ | `DogFragment] => unit;
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
  } = {
    [@ocaml.warning "-32-30"];
    module Raw = {
      type t = {
        __typename: string,
        name: string,
        barkVolume: float,
      };
      type nonrec t_Dog = t;
    };
    type t = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type nonrec t_Dog = t;
    let query = "fragment DogFragment on Dog   {\n__typename  \nname  \nbarkVolume  \n}\n";
    let parse: Raw.t => t =
      (value) => (
        {
          __typename: {
            let value = (value: Raw.t).__typename;
            value;
          },
          name: {
            let value = (value: Raw.t).name;
            value;
          },
          barkVolume: {
            let value = (value: Raw.t).barkVolume;
            value;
          },
        }: t
      );
    let serialize: t => Raw.t =
      (value) => (
        {
          let barkVolume = {
            let value = (value: t).barkVolume;
            value;
          }
          and name = {
            let value = (value: t).name;
            value;
          }
          and __typename = {
            let value = (value: t).__typename;
            value;
          };
          {__typename, name, barkVolume};
        }: Raw.t
      );
    let verifyArgsAndParse =
        (~fragmentName as _DogFragment: [ | `DogFragment], value: Raw.t) =>
      parse(value);
    let verifyName =
      fun
      | `DogFragment => ();
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
  };
  module Untitled1: {
    [@ocaml.warning "-32-30"];
    module Raw: {
      type t_dogOrHuman;
      type t = {dogOrHuman: t_dogOrHuman};
      type t_variables = unit;
    };
    type t_dogOrHuman = [
      | `FutureAddedValue(Js.Json.t)
      | `Dog(DogFragment.t_Dog)
    ];
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
  } = {
    [@ocaml.warning "-32-30"];
    module Raw = {
      type t_dogOrHuman;
      type t = {dogOrHuman: t_dogOrHuman};
      type t_variables = unit;
    };
    type t_dogOrHuman = [
      | `FutureAddedValue(Js.Json.t)
      | `Dog(DogFragment.t_Dog)
    ];
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
    let query =
      "query   {\ndogOrHuman  {\n__typename\n...on Dog   {\n...DogFragment   \n}\n\n}\n\n}\n"
      ++ DogFragment.query;
    let parse: Raw.t => t =
      (value) => (
        {
          dogOrHuman: {
            let value = (value: Raw.t).dogOrHuman;
            let typename: string =
              Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename"));
            (
              switch (typename) {
              | "Dog" =>
                `Dog(
                  {
                    let value: DogFragment.Raw.t = Obj.magic(value);

                    DogFragment.verifyArgsAndParse(
                      ~fragmentName=`DogFragment,
                      value,
                    );
                  },
                )
              | _ => `FutureAddedValue(Obj.magic(value): Js.Json.t)
              }: t_dogOrHuman
            );
          },
        }: t
      );
    let serialize: t => Raw.t =
      (value) => (
        {
          let dogOrHuman = {
            let value = (value: t).dogOrHuman;
            switch (value) {
            | `Dog(value) => (
                Obj.magic(
                  Graphql_ppx_runtime.assign_typename(
                    Obj.magic(DogFragment.serialize(value)): Js.Json.t,
                    "Dog",
                  ),
                ): Raw.t_dogOrHuman
              )
            | `FutureAddedValue(value) => (
                Obj.magic(value): Raw.t_dogOrHuman
              )
            };
          };
          {dogOrHuman: dogOrHuman};
        }: Raw.t
      );
    let serializeVariables = () => ();
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity";
    external toJson: Raw.t => Js.Json.t = "%identity";
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity";
  };
};
