module Test: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_reposts = {id: int}
    type rec t = {reposts: array<Js.Nullable.t<t_reposts>>}
    type t_Post = t
  }
  type rec t_reposts = {id: int}
  type rec t = {reposts: array<option<t_reposts>>}
  type t_Post = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~name: [#NonNull_String], ~fragmentName: [#test], Raw.t) => t
  let verifyName: [#test] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_reposts = {id: int}
    type rec t = {reposts: array<Js.Nullable.t<t_reposts>>}
    type t_Post = t
  }
  type rec t_reposts = {id: int}
  type rec t = {reposts: array<option<t_reposts>>}
  type t_Post = t
  let query = "fragment test on Post   {
reposts(arg: {name: $name})  {
id  
}

}
"
  let parse = (
    (value): t => {
      reposts: {
        let value = (value: Raw.t).reposts
        Js.Array2.map(value, value =>
          switch Js.toOption(value) {
          | Some(value) =>
            Some(
              (
                {
                  id: {
                    let value = (value: Raw.t_reposts).id
                    value
                  },
                }: t_reposts
              ),
            )
          | None => None
          }
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let reposts = {
        let value = (value: t).reposts
        Js.Array2.map(value, value =>
          switch value {
          | Some(value) =>
            Js.Nullable.return(
              (
                {
                  let id = {
                    let value = (value: t_reposts).id
                    value
                  }
                  {id: id}
                }: Raw.t_reposts
              ),
            )
          | None => Js.Nullable.null
          }
        )
      }
      {reposts: reposts}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (
    ~name as _name: [#NonNull_String],
    ~fragmentName as _test: [#test],
    value: Raw.t,
  ) => parse(value)
  let verifyName = x => switch x {
  | #test => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}

