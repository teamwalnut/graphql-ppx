module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_variousScalars = {
      nullableString: Js.Nullable.t<string>,
      string: string,
      nullableInt: Js.Nullable.t<int>,
      int: int,
      nullableFloat: Js.Nullable.t<float>,
      float: float,
      nullableBoolean: Js.Nullable.t<bool>,
      boolean: bool,
      nullableID: Js.Nullable.t<string>,
      id: string,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {
    nullableString: option<string>,
    string: string,
    nullableInt: option<int>,
    int: int,
    nullableFloat: option<float>,
    float: float,
    nullableBoolean: option<bool>,
    boolean: bool,
    nullableID: option<string>,
    id: string,
  }
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_variousScalars = {
      nullableString: Js.Nullable.t<string>,
      string: string,
      nullableInt: Js.Nullable.t<int>,
      int: int,
      nullableFloat: Js.Nullable.t<float>,
      float: float,
      nullableBoolean: Js.Nullable.t<bool>,
      boolean: bool,
      nullableID: Js.Nullable.t<string>,
      id: string,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {
    nullableString: option<string>,
    string: string,
    nullableInt: option<int>,
    int: int,
    nullableFloat: option<float>,
    float: float,
    nullableBoolean: option<bool>,
    boolean: bool,
    nullableID: option<string>,
    id: string,
  }
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  let query = "query   {
variousScalars  {
nullableString  
string  
nullableInt  
int  
nullableFloat  
float  
nullableBoolean  
boolean  
nullableID  
id  
}

}
"
  let parse = (
    (value): t => {
      variousScalars: {
        let value = (value: Raw.t).variousScalars
        (
          {
            nullableString: {
              let value = (value: Raw.t_variousScalars).nullableString
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            string: {
              let value = (value: Raw.t_variousScalars).string
              value
            },
            nullableInt: {
              let value = (value: Raw.t_variousScalars).nullableInt
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            int: {
              let value = (value: Raw.t_variousScalars).int
              value
            },
            nullableFloat: {
              let value = (value: Raw.t_variousScalars).nullableFloat
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            float: {
              let value = (value: Raw.t_variousScalars).float
              value
            },
            nullableBoolean: {
              let value = (value: Raw.t_variousScalars).nullableBoolean
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            boolean: {
              let value = (value: Raw.t_variousScalars).boolean
              value
            },
            nullableID: {
              let value = (value: Raw.t_variousScalars).nullableID
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            id: {
              let value = (value: Raw.t_variousScalars).id
              value
            },
          }: t_variousScalars
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let variousScalars = {
        let value = (value: t).variousScalars
        (
          {
            let id = {
              let value = (value: t_variousScalars).id
              value
            }
            and nullableID = {
              let value = (value: t_variousScalars).nullableID
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and boolean = {
              let value = (value: t_variousScalars).boolean
              value
            }
            and nullableBoolean = {
              let value = (value: t_variousScalars).nullableBoolean
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and float = {
              let value = (value: t_variousScalars).float
              value
            }
            and nullableFloat = {
              let value = (value: t_variousScalars).nullableFloat
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and int = {
              let value = (value: t_variousScalars).int
              value
            }
            and nullableInt = {
              let value = (value: t_variousScalars).nullableInt
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and string = {
              let value = (value: t_variousScalars).string
              value
            }
            and nullableString = {
              let value = (value: t_variousScalars).nullableString
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            {
              nullableString,
              string,
              nullableInt,
              int,
              nullableFloat,
              float,
              nullableBoolean,
              boolean,
              nullableID,
              id,
            }
          }: Raw.t_variousScalars
        )
      }
      {variousScalars: variousScalars}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

