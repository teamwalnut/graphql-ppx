// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require("gql")`
  fragment DogFragment on Dog   {
    name
  }
`);

function parse(value) {
  return {
          name: value.name
        };
}

function serialize(value) {
  var value$1 = value.name;
  return {
          name: value$1
        };
}

function verifyArgsAndParse(_DogFragment, value) {
  return {
          name: value.name
        };
}

function verifyName(param) {
  
}

var DogFragment = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = (require("gql")`
  fragment HumanFragment on Human   {
    name
  }
`);

function parse$1(value) {
  return {
          name: value.name
        };
}

function serialize$1(value) {
  var value$1 = value.name;
  return {
          name: value$1
        };
}

function verifyArgsAndParse$1(_HumanFragment, value) {
  return {
          name: value.name
        };
}

function verifyName$1(param) {
  
}

var HumanFragment = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$2 = {};

var query$2 = ((frag_0, frag_1) => require("gql")`
  query MyQuery  {
    dogOrHuman  {
      __typename
      ...on Dog   {
        ...DogFragment
      }
      ...on Human   {
        ...HumanFragment
      }
    }
  }
  ${frag_0}
  ${frag_1}
`)(query, query$1);

function parse$2(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1["__typename"];
  var tmp;
  switch (typename) {
    case "Dog" :
        tmp = {
          NAME: "Dog",
          VAL: {
            name: value$1.name
          }
        };
        break;
    case "Human" :
        tmp = {
          NAME: "Human",
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        NAME: "FutureAddedValue",
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$2(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.NAME;
  var dogOrHuman = variant === "FutureAddedValue" ? value$1.VAL : (
      variant === "Dog" ? serialize(value$1.VAL) : serialize$1(value$1.VAL)
    );
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.DogFragment = DogFragment;
exports.HumanFragment = HumanFragment;
exports.MyQuery = MyQuery;
/* query Not a pure module */
