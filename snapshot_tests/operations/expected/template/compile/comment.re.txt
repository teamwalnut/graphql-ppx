// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("rescript/lib/js/caml_option.js");

var Raw = {};

var query = (require("gql")`
  query ($arg: NonrecursiveInput!)  {
    nonrecursiveInput(arg: $arg)
  }
`);

function parse(value) {
  return {
          nonrecursiveInput: value.nonrecursiveInput
        };
}

function serialize(value) {
  var value$1 = value.nonrecursiveInput;
  return {
          nonrecursiveInput: value$1
        };
}

function serializeInputObjectEmbeddedInput(inp) {
  var a = inp.field;
  return {
          field: a !== undefined ? a : undefined
        };
}

function serializeInputObjectNonrecursiveInput(inp) {
  var a = inp.nullableArray;
  var a$1 = inp.field;
  var a$2 = inp.enum;
  var a$3 = inp.embeddedInput;
  var a$4 = inp.custom;
  return {
          nonNullableField: inp.nonNullableField,
          nullableArray: a !== undefined ? a.map(function (b) {
                  if (b !== undefined) {
                    return b;
                  }
                  
                }) : undefined,
          field: a$1 !== undefined ? a$1 : undefined,
          enum: a$2 !== undefined ? (
              a$2 === "THIRD" ? "THIRD" : (
                  a$2 === "SECOND" ? "SECOND" : "FIRST"
                )
            ) : undefined,
          embeddedInput: a$3 !== undefined ? a$3.map(function (b) {
                  if (b !== undefined) {
                    return serializeInputObjectEmbeddedInput(b);
                  }
                  
                }) : undefined,
          custom: a$4 !== undefined ? Caml_option.valFromOption(a$4) : undefined
        };
}

function serializeVariables(inp) {
  return {
          arg: serializeInputObjectNonrecursiveInput(inp.arg)
        };
}

function makeVariables(arg, param) {
  return {
          arg: arg
        };
}

function makeInputObjectNonrecursiveInput(nonNullableField, nullableArray, field, $$enum, embeddedInput, custom, param) {
  return {
          nonNullableField: nonNullableField,
          nullableArray: nullableArray,
          field: field,
          enum: $$enum,
          embeddedInput: embeddedInput,
          custom: custom
        };
}

function makeInputObjectEmbeddedInput(field, param) {
  return {
          field: field
        };
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  serializeInputObjectNonrecursiveInput: serializeInputObjectNonrecursiveInput,
  serializeInputObjectEmbeddedInput: serializeInputObjectEmbeddedInput,
  makeVariables: makeVariables,
  makeInputObjectNonrecursiveInput: makeInputObjectNonrecursiveInput,
  makeInputObjectEmbeddedInput: makeInputObjectEmbeddedInput
};

exports.MyQuery = MyQuery;
/* query Not a pure module */
