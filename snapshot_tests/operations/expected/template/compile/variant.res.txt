// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Gql = require("gql").default;
var Js_exn = require("rescript/lib/js/js_exn.js");
var Js_json = require("rescript/lib/js/js_json.js");

var Raw = {};

var query = Gql`mutation   {
mutationForVariant  {
baseType  
baseTypeList  
dog  {
name  
barkVolume  
}

human  {
name  
}

dogOrHuman  {
__typename
...on Dog   {
name  
barkVolume  
}

...on Human   {
name  
}

}

}

}
`;

function parse(value) {
  var value$1 = value.mutationForVariant;
  var value$2 = Js_json.decodeObject(value$1);
  var tmp;
  if (value$2 !== undefined) {
    var temp = value$2["baseType"];
    var match = Js_json.decodeNull(temp);
    if (match !== undefined) {
      var temp$1 = value$2["baseTypeList"];
      var match$1 = Js_json.decodeNull(temp$1);
      if (match$1 !== undefined) {
        var temp$2 = value$2["dog"];
        var match$2 = Js_json.decodeNull(temp$2);
        if (match$2 !== undefined) {
          var temp$3 = value$2["human"];
          var match$3 = Js_json.decodeNull(temp$3);
          if (match$3 !== undefined) {
            var temp$4 = value$2["dogOrHuman"];
            var match$4 = Js_json.decodeNull(temp$4);
            if (match$4 !== undefined) {
              tmp = Js_exn.raiseError("graphql-ppx: All fields on variant selection set on type VariantTestResult were null");
            } else {
              var typename = temp$4["__typename"];
              var tmp$1;
              switch (typename) {
                case "Dog" :
                    tmp$1 = {
                      NAME: "Dog",
                      VAL: {
                        name: temp$4.name,
                        barkVolume: temp$4.barkVolume
                      }
                    };
                    break;
                case "Human" :
                    tmp$1 = {
                      NAME: "Human",
                      VAL: {
                        name: temp$4.name
                      }
                    };
                    break;
                default:
                  tmp$1 = {
                    NAME: "FutureAddedValue",
                    VAL: temp$4
                  };
              }
              tmp = {
                NAME: "DogOrHuman",
                VAL: tmp$1
              };
            }
          } else {
            tmp = {
              NAME: "Human",
              VAL: {
                name: temp$3.name
              }
            };
          }
        } else {
          tmp = {
            NAME: "Dog",
            VAL: {
              name: temp$2.name,
              barkVolume: temp$2.barkVolume
            }
          };
        }
      } else {
        tmp = {
          NAME: "BaseTypeList",
          VAL: temp$1.map(function (value) {
                return value;
              })
        };
      }
    } else {
      tmp = {
        NAME: "BaseType",
        VAL: temp
      };
    }
  } else {
    tmp = Js_exn.raiseError("graphql-ppx: Expected type VariantTestResult to be an object");
  }
  return {
          mutationForVariant: tmp
        };
}

function serialize(value) {
  var mutationForVariant = null;
  return {
          mutationForVariant: mutationForVariant
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.MyQuery = MyQuery;
/* query Not a pure module */
