module StringOfInt = {
  let parse = string_of_int
  let serialize = int_of_string
  type t = string
}
module IntOfString = {
  let parse = int_of_string
  let serialize = string_of_int
  type t = int
}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_variousScalars = {
      string: string,
      int: int,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {string: IntOfString.t, int: StringOfInt.t}
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_variousScalars = {
      string: string,
      int: int,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {
    string: IntOfString.t,
    int: StringOfInt.t,
  }
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  let query = "query   {
variousScalars  {
string  
int  
}

}
"
  let parse = (
    (value): t => {
      variousScalars: {
        let value = (value: Raw.t).variousScalars
        (
          {
            string: {
              let value = (value: Raw.t_variousScalars).string
              IntOfString.parse(value)
            },
            int: {
              let value = (value: Raw.t_variousScalars).int
              StringOfInt.parse(value)
            },
          }: t_variousScalars
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let variousScalars = {
        let value = (value: t).variousScalars
        (
          {
            let int = {
              let value = (value: t_variousScalars).int
              let value = StringOfInt.serialize(value)
              value
            }
            and string = {
              let value = (value: t_variousScalars).string
              let value = IntOfString.serialize(value)
              value
            }
            {string, int}
          }: Raw.t_variousScalars
        )
      }
      {variousScalars: variousScalars}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

