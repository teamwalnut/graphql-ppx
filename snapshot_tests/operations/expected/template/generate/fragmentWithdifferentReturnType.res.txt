module ListFragment: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~fragmentName: [#ListFragment], Raw.t) => t
  let verifyName: [#ListFragment] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  let query = "fragment ListFragment on Lists   {
nullableOfNullable  
nullableOfNonNullable  
}
"
  let parse = (
    (value): t => {
      nullableOfNullable: {
        let value = (value: Raw.t).nullableOfNullable
        switch Js.toOption(value) {
        | Some(value) =>
          Some(
            Js.Array2.map(value, value =>
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            ),
          )
        | None => None
        }
      },
      nullableOfNonNullable: {
        let value = (value: Raw.t).nullableOfNonNullable
        switch Js.toOption(value) {
        | Some(value) => Some(Js.Array2.map(value, value => value))
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable
        switch value {
        | Some(value) => Js.Nullable.return(Js.Array2.map(value, value => value))
        | None => Js.Nullable.null
        }
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable
        switch value {
        | Some(value) =>
          Js.Nullable.return(
            Js.Array2.map(value, value =>
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            ),
          )
        | None => Js.Nullable.null
        }
      }
      {nullableOfNullable, nullableOfNonNullable}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (~fragmentName as _ListFragment: [#ListFragment], value: Raw.t) =>
    parse(value)
  let verifyName = x => switch x {
  | #ListFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {lists: ListFragment.Raw.t_Lists}
    type rec t_variables = unit
  }
  type rec t = {lists: ListFragment.t_Lists}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: bool
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {lists: ListFragment.Raw.t_Lists}
    type rec t_variables = unit
  }
  type rec t = {lists: ListFragment.t_Lists}
  type rec t_variables = unit
  @module("gql") @taggedTemplate external graphql: (array<string>, array<bool>) => bool = "default"
  external graphql_allow_string: string => bool = "%identity"
  let query = graphql(
    [
      "query MyQuery  {
lists  {
...ListFragment  @ppxAllowStringReturnType 
}

}
",
      "",
    ],
    [graphql_allow_string((ListFragment.query: string))],
  )
  let parse = (value): t => {
    lists: {
      let value = (value: Raw.t).lists

      ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
    },
  }
  let serialize = (value): Raw.t => {
    let lists = {
      let value = (value: t).lists
      ListFragment.serialize(value)
    }
    {lists: lists}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

