module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_customScalarField = {
      nullable: Js.Nullable.t<Js.Json.t>,
      nonNullable: Js.Json.t,
    }
    type rec t = {customScalarField: t_customScalarField}
    type rec t_variables = {opt: Js.Nullable.t<Js.Json.t>, req: Js.Json.t}
  }
  type rec t_customScalarField = {nullable: option<Js.Json.t>, nonNullable: Js.Json.t}
  type rec t = {customScalarField: t_customScalarField}
  type rec t_variables = {opt: option<Js.Json.t>, req: Js.Json.t}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let makeVariables: (~opt: Js.Json.t=?, ~req: Js.Json.t, unit) => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_customScalarField = {
      nullable: Js.Nullable.t<Js.Json.t>,
      nonNullable: Js.Json.t,
    }
    type rec t = {customScalarField: t_customScalarField}
    type rec t_variables = {opt: Js.Nullable.t<Js.Json.t>, req: Js.Json.t}
  }
  type rec t_customScalarField = {
    nullable: option<Js.Json.t>,
    nonNullable: Js.Json.t,
  }
  type rec t = {customScalarField: t_customScalarField}
  type rec t_variables = {opt: option<Js.Json.t>, req: Js.Json.t}
  let query = "query ($opt: CustomScalar, $req: CustomScalar!)  {
customScalarField(argOptional: $opt, argRequired: $req)  {
nullable  
nonNullable  
}

}
"
  let parse = (value): t => {
    customScalarField: {
      let value = (value: Raw.t).customScalarField
      (
        {
          nullable: {
            let value = (value: Raw.t_customScalarField).nullable
            switch Js.toOption(value) {
            | Some(value) => Some(value)
            | None => None
            }
          },
          nonNullable: {
            let value = (value: Raw.t_customScalarField).nonNullable
            value
          },
        }: t_customScalarField
      )
    },
  }
  let serialize = (value): Raw.t => {
    let customScalarField = {
      let value = (value: t).customScalarField
      (
        {
          let nonNullable = {
            let value = (value: t_customScalarField).nonNullable
            value
          }
          and nullable = {
            let value = (value: t_customScalarField).nullable
            switch value {
            | Some(value) => Js.Nullable.return(value)
            | None => Js.Nullable.null
            }
          }
          {nullable, nonNullable}
        }: Raw.t_customScalarField
      )
    }
    {customScalarField: customScalarField}
  }
  let serializeVariables: t_variables => Raw.t_variables = (
    inp => {
      opt: (
        a =>
          switch a {
          | None => Js.Nullable.undefined
          | Some(b) => Js.Nullable.return((a => a)(b))
          }
      )((inp: t_variables).opt),
      req: (a => a)((inp: t_variables).req),
    }: t_variables => Raw.t_variables
  )
  let makeVariables = (~opt=?, ~req, ()): t_variables => {opt, req}
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

