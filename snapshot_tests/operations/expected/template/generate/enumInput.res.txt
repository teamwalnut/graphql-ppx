module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {enumInput: string}
    type rec t_variables = {arg: string}
  }
  type rec t = {enumInput: string}
  type rec t_variables = {arg: [#FIRST | #SECOND | #THIRD]}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let makeVariables: (~arg: [#FIRST | #SECOND | #THIRD], unit) => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {enumInput: string}
    type rec t_variables = {arg: string}
  }
  type rec t = {enumInput: string}
  type rec t_variables = {arg: [#FIRST | #SECOND | #THIRD]}
  let query = "query ($arg: SampleField!)  {
enumInput(arg: $arg)  
}
"
  let parse = (
    (value): t => {
      enumInput: {
        let value = (value: Raw.t).enumInput
        value
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let enumInput = {
        let value = (value: t).enumInput
        value
      }
      {enumInput: enumInput}
    }: t => Raw.t
  )
  let serializeVariables: t_variables => Raw.t_variables = inp => {
    arg: (
      a =>
        switch a {
        | #FIRST => "FIRST"
        | #SECOND => "SECOND"
        | #THIRD => "THIRD"
        }
    )((inp: t_variables).arg),
  }
  let makeVariables = (~arg, ()): t_variables => {arg: arg}
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

