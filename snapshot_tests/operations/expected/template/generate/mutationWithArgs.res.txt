module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {optionalInputArgs: string}
    type rec t_variables = {required: string}
  }
  type rec t = {optionalInputArgs: string}
  type rec t_variables = {required: string}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let makeVariables: (~required: string, unit) => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {optionalInputArgs: string}
    type rec t_variables = {required: string}
  }
  type rec t = {optionalInputArgs: string}
  type rec t_variables = {required: string}
  let query = "mutation MyMutation($required: String!)  {
optionalInputArgs(required: $required, anotherRequired: "val")  
}
"
  let parse = (value): t => {
    optionalInputArgs: {
      let value = (value: Raw.t).optionalInputArgs
      value
    },
  }
  let serialize = (value): Raw.t => {
    let optionalInputArgs = {
      let value = (value: t).optionalInputArgs
      value
    }
    {optionalInputArgs: optionalInputArgs}
  }
  let serializeVariables: t_variables => Raw.t_variables = inp => {
    required: (a => a)((inp: t_variables).required),
  }
  let makeVariables = (~required, ()): t_variables => {required: required}
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

