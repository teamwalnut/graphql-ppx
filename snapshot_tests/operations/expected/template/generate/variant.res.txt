module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_mutationForVariant_dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_mutationForVariant_human = {
      __typename: string,
      name: string,
    }
    type rec t_mutationForVariant_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_mutationForVariant_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_mutationForVariant_dogOrHuman
    type rec t_mutationForVariant
    type rec t = {mutationForVariant: t_mutationForVariant}
    type rec t_variables = unit
  }
  type rec t_mutationForVariant_dog = {name: string, barkVolume: float}
  type rec t_mutationForVariant_human = {name: string}
  type rec t_mutationForVariant_dogOrHuman_Dog = {name: string, barkVolume: float}
  type rec t_mutationForVariant_dogOrHuman_Human = {name: string}
  type rec t_mutationForVariant_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_mutationForVariant_dogOrHuman_Dog)
    | #Human(t_mutationForVariant_dogOrHuman_Human)
  ]
  type rec t_mutationForVariant = [
    | #BaseType(string)
    | #BaseTypeList(array<string>)
    | #Dog(t_mutationForVariant_dog)
    | #Human(t_mutationForVariant_human)
    | #DogOrHuman(t_mutationForVariant_dogOrHuman)
  ]
  type rec t = {mutationForVariant: t_mutationForVariant}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_mutationForVariant_dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_mutationForVariant_human = {
      __typename: string,
      name: string,
    }
    type rec t_mutationForVariant_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_mutationForVariant_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_mutationForVariant_dogOrHuman
    type rec t_mutationForVariant
    type rec t = {mutationForVariant: t_mutationForVariant}
    type rec t_variables = unit
  }
  type rec t_mutationForVariant_dog = {
    name: string,
    barkVolume: float,
  }
  type rec t_mutationForVariant_human = {name: string}
  type rec t_mutationForVariant_dogOrHuman_Dog = {
    name: string,
    barkVolume: float,
  }
  type rec t_mutationForVariant_dogOrHuman_Human = {name: string}
  type rec t_mutationForVariant_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_mutationForVariant_dogOrHuman_Dog)
    | #Human(t_mutationForVariant_dogOrHuman_Human)
  ]
  type rec t_mutationForVariant = [
    | #BaseType(string)
    | #BaseTypeList(array<string>)
    | #Dog(t_mutationForVariant_dog)
    | #Human(t_mutationForVariant_human)
    | #DogOrHuman(t_mutationForVariant_dogOrHuman)
  ]
  type rec t = {mutationForVariant: t_mutationForVariant}
  type rec t_variables = unit
  let query = "mutation   {
mutationForVariant  {
baseType  
baseTypeList  
dog  {
name  
barkVolume  
}

human  {
name  
}

dogOrHuman  {
__typename
...on Dog   {
name  
barkVolume  
}

...on Human   {
name  
}

}

}

}
"
  let parse = (
    (value): t => {
      mutationForVariant: {
        let value = (value: Raw.t).mutationForVariant
        switch Js.Json.decodeObject((Obj.magic(value): Js.Json.t)) {
        | None =>
          Js.Exn.raiseError(
            \"^"(
              "graphql-ppx: ",
              \"^"("Expected type ", \"^"("VariantTestResult", " to be an object")),
            ),
          )
        | Some(value) =>
          let temp = Js.Dict.unsafeGet(Obj.magic(value), "baseType")
          switch Js.Json.decodeNull(temp) {
          | None =>
            let value = temp
            #BaseType(value)
          | Some(_) =>
            let temp = Js.Dict.unsafeGet(Obj.magic(value), "baseTypeList")
            switch Js.Json.decodeNull(temp) {
            | None =>
              let value = temp
              #BaseTypeList(Js.Array2.map(value, value => value))
            | Some(_) =>
              let temp = Js.Dict.unsafeGet(Obj.magic(value), "dog")
              switch Js.Json.decodeNull(temp) {
              | None =>
                let value = temp
                #Dog(
                  (
                    {
                      name: {
                        let value = (value: Raw.t_mutationForVariant_dog).name
                        value
                      },
                      barkVolume: {
                        let value = (value: Raw.t_mutationForVariant_dog).barkVolume
                        value
                      },
                    }: t_mutationForVariant_dog
                  ),
                )
              | Some(_) =>
                let temp = Js.Dict.unsafeGet(Obj.magic(value), "human")
                switch Js.Json.decodeNull(temp) {
                | None =>
                  let value = temp
                  #Human(
                    (
                      {
                        name: {
                          let value = (value: Raw.t_mutationForVariant_human).name
                          value
                        },
                      }: t_mutationForVariant_human
                    ),
                  )
                | Some(_) =>
                  let temp = Js.Dict.unsafeGet(Obj.magic(value), "dogOrHuman")
                  switch Js.Json.decodeNull(temp) {
                  | None =>
                    let value = temp
                    #DogOrHuman({
                      let typename = (
                        Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string
                      )
                      (
                        switch typename {
                        | "Dog" =>
                          #Dog({
                            let value = (Obj.magic(value): Raw.t_mutationForVariant_dogOrHuman_Dog)
                            (
                              {
                                name: {
                                  let value = (value: Raw.t_mutationForVariant_dogOrHuman_Dog).name
                                  value
                                },
                                barkVolume: {
                                  let value = (
                                    value: Raw.t_mutationForVariant_dogOrHuman_Dog
                                  ).barkVolume
                                  value
                                },
                              }: t_mutationForVariant_dogOrHuman_Dog
                            )
                          })
                        | "Human" =>
                          #Human({
                            let value = (
                              Obj.magic(value): Raw.t_mutationForVariant_dogOrHuman_Human
                            )
                            (
                              {
                                name: {
                                  let value = (
                                    value: Raw.t_mutationForVariant_dogOrHuman_Human
                                  ).name
                                  value
                                },
                              }: t_mutationForVariant_dogOrHuman_Human
                            )
                          })
                        | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
                        }: t_mutationForVariant_dogOrHuman
                      )
                    })
                  | Some(_) =>
                    Js.Exn.raiseError(
                      \"^"(
                        "graphql-ppx: ",
                        \"^"(
                          "All fields on variant selection set on type ",
                          \"^"("VariantTestResult", " were null"),
                        ),
                      ),
                    )
                  }
                }
              }
            }
          }
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let mutationForVariant = {
        let value = (value: t).mutationForVariant
        let _temp = value
        Obj.magic(Js.Json.null)
      }
      {mutationForVariant: mutationForVariant}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

