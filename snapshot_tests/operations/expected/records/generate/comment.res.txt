module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {nonrecursiveInput: string}
    type rec t_variables = {arg: t_variables_NonrecursiveInput}
    and t_variables_NonrecursiveInput = {
      nonNullableField: string,
      nullableArray: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      field: Js.Nullable.t<string>,
      enum: Js.Nullable.t<string>,
      embeddedInput: Js.Nullable.t<array<Js.Nullable.t<t_variables_EmbeddedInput>>>,
      custom: Js.Nullable.t<Js.Json.t>,
    }
    and t_variables_EmbeddedInput = {field: Js.Nullable.t<string>}
  }
  type rec t = {nonrecursiveInput: string}
  type rec t_variables = {arg: t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option<array<option<string>>>,
    field: option<string>,
    enum: option<[#FIRST | #SECOND | #THIRD]>,
    embeddedInput: option<array<option<t_variables_EmbeddedInput>>>,
    custom: option<Js.Json.t>,
  }
  and t_variables_EmbeddedInput = {field: option<string>}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let serializeInputObjectNonrecursiveInput: t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput
  let serializeInputObjectEmbeddedInput: t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput
  let makeVariables: (~arg: t_variables_NonrecursiveInput, unit) => t_variables
  let makeInputObjectNonrecursiveInput: (
    ~nonNullableField: string,
    ~nullableArray: array<option<string>>=?,
    ~field: string=?,
    ~enum: [#FIRST | #SECOND | #THIRD]=?,
    ~embeddedInput: array<option<t_variables_EmbeddedInput>>=?,
    ~custom: Js.Json.t=?,
    unit,
  ) => t_variables_NonrecursiveInput
  let makeInputObjectEmbeddedInput: (~field: string=?, unit) => t_variables_EmbeddedInput
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {nonrecursiveInput: string}
    type rec t_variables = {arg: t_variables_NonrecursiveInput}
    and t_variables_NonrecursiveInput = {
      nonNullableField: string,
      nullableArray: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      field: Js.Nullable.t<string>,
      enum: Js.Nullable.t<string>,
      embeddedInput: Js.Nullable.t<array<Js.Nullable.t<t_variables_EmbeddedInput>>>,
      custom: Js.Nullable.t<Js.Json.t>,
    }
    and t_variables_EmbeddedInput = {field: Js.Nullable.t<string>}
  }
  type rec t = {nonrecursiveInput: string}
  type rec t_variables = {arg: t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option<array<option<string>>>,
    field: option<string>,
    enum: option<[#FIRST | #SECOND | #THIRD]>,
    embeddedInput: option<array<option<t_variables_EmbeddedInput>>>,
    custom: option<Js.Json.t>,
  }
  and t_variables_EmbeddedInput = {field: option<string>}
  let query = "query ($arg: NonrecursiveInput!)  {
nonrecursiveInput(arg: $arg)  
}
"
  let parse = (
    (value): t => {
      nonrecursiveInput: {
        let value = (value: Raw.t).nonrecursiveInput
        value
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nonrecursiveInput = {
        let value = (value: t).nonrecursiveInput
        value
      }
      {nonrecursiveInput: nonrecursiveInput}
    }: t => Raw.t
  )
  let rec serializeVariables: t_variables => Raw.t_variables = inp => {
    arg: (a => serializeInputObjectNonrecursiveInput(a))((inp: t_variables).arg),
  }
  and serializeInputObjectNonrecursiveInput: t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput = inp => {
    nonNullableField: (a => a)((inp: t_variables_NonrecursiveInput).nonNullableField),
    nullableArray: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) =>
          Js.Nullable.return(
            (
              a =>
                Js.Array2.map(a, b =>
                  (
                    a =>
                      switch a {
                      | None => Js.Nullable.undefined
                      | Some(b) => Js.Nullable.return((a => a)(b))
                      }
                  )(b)
                )
            )(b),
          )
        }
    )((inp: t_variables_NonrecursiveInput).nullableArray),
    field: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) => Js.Nullable.return((a => a)(b))
        }
    )((inp: t_variables_NonrecursiveInput).field),
    enum: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) =>
          Js.Nullable.return(
            (
              a =>
                switch a {
                | #FIRST => "FIRST"
                | #SECOND => "SECOND"
                | #THIRD => "THIRD"
                }
            )(b),
          )
        }
    )((inp: t_variables_NonrecursiveInput).enum),
    embeddedInput: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) =>
          Js.Nullable.return(
            (
              a =>
                Js.Array2.map(a, b =>
                  (
                    a =>
                      switch a {
                      | None => Js.Nullable.undefined
                      | Some(b) =>
                        Js.Nullable.return((a => serializeInputObjectEmbeddedInput(a))(b))
                      }
                  )(b)
                )
            )(b),
          )
        }
    )((inp: t_variables_NonrecursiveInput).embeddedInput),
    custom: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) => Js.Nullable.return((a => a)(b))
        }
    )((inp: t_variables_NonrecursiveInput).custom),
  }
  and serializeInputObjectEmbeddedInput: t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput = inp => {
    field: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) => Js.Nullable.return((a => a)(b))
        }
    )((inp: t_variables_EmbeddedInput).field),
  }
  let makeVariables = (~arg, ()): t_variables => {arg: arg}
  and makeInputObjectNonrecursiveInput = (
    ~nonNullableField,
    ~nullableArray=?,
    ~field=?,
    ~enum=?,
    ~embeddedInput=?,
    ~custom=?,
    (),
  ): t_variables_NonrecursiveInput => {
    nonNullableField,
    nullableArray,
    field,
    enum,
    embeddedInput,
    custom,
  }
  and makeInputObjectEmbeddedInput = (~field=?, ()): t_variables_EmbeddedInput => {field: field}
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

