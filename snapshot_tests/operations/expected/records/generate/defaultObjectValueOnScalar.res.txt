module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {defaultObjectValueOnScalar: string}
    type rec t_variables = unit
  }
  type rec t = {defaultObjectValueOnScalar: string}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {defaultObjectValueOnScalar: string}
    type rec t_variables = unit
  }
  type rec t = {defaultObjectValueOnScalar: string}
  type rec t_variables = unit
  let query = "query   {
defaultObjectValueOnScalar(filter: {some: {json: "value"}}, arg: {field: "otherValue"})  
}
"
  let parse = (value): t => {
    defaultObjectValueOnScalar: {
      let value = (value: Raw.t).defaultObjectValueOnScalar
      value
    },
  }
  let serialize = (value): Raw.t => {
    let defaultObjectValueOnScalar = {
      let value = (value: t).defaultObjectValueOnScalar
      value
    }
    {defaultObjectValueOnScalar: defaultObjectValueOnScalar}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

