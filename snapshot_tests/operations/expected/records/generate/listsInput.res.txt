module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {listsInput: string}
    type rec t_variables = {arg: t_variables_ListsInput}
    and t_variables_ListsInput = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
      nonNullableOfNullable: array<Js.Nullable.t<string>>,
      nonNullableOfNonNullable: array<string>,
    }
  }
  type rec t = {listsInput: string}
  type rec t_variables = {arg: t_variables_ListsInput}
  and t_variables_ListsInput = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
    nonNullableOfNullable: array<option<string>>,
    nonNullableOfNonNullable: array<string>,
  }
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let serializeInputObjectListsInput: t_variables_ListsInput => Raw.t_variables_ListsInput
  let makeVariables: (~arg: t_variables_ListsInput, unit) => t_variables
  let makeInputObjectListsInput: (
    ~nullableOfNullable: array<option<string>>=?,
    ~nullableOfNonNullable: array<string>=?,
    ~nonNullableOfNullable: array<option<string>>,
    ~nonNullableOfNonNullable: array<string>,
    unit,
  ) => t_variables_ListsInput
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {listsInput: string}
    type rec t_variables = {arg: t_variables_ListsInput}
    and t_variables_ListsInput = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
      nonNullableOfNullable: array<Js.Nullable.t<string>>,
      nonNullableOfNonNullable: array<string>,
    }
  }
  type rec t = {listsInput: string}
  type rec t_variables = {arg: t_variables_ListsInput}
  and t_variables_ListsInput = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
    nonNullableOfNullable: array<option<string>>,
    nonNullableOfNonNullable: array<string>,
  }
  let query = "query ($arg: ListsInput!)  {
listsInput(arg: $arg)  
}
"
  let parse = (value): t => {
    listsInput: {
      let value = (value: Raw.t).listsInput
      value
    },
  }
  let serialize = (value): Raw.t => {
    let listsInput = {
      let value = (value: t).listsInput
      value
    }
    {listsInput: listsInput}
  }
  let rec serializeVariables: t_variables => Raw.t_variables = (
    inp => {
      arg: (a => serializeInputObjectListsInput(a))((inp: t_variables).arg),
    }: t_variables => Raw.t_variables
  )
  and serializeInputObjectListsInput: t_variables_ListsInput => Raw.t_variables_ListsInput = (
    inp => {
      nullableOfNullable: (
        a =>
          switch a {
          | None => Js.Nullable.undefined
          | Some(b) =>
            Js.Nullable.return(
              (
                a =>
                  Js.Array2.map(a, b =>
                    (
                      a =>
                        switch a {
                        | None => Js.Nullable.undefined
                        | Some(b) => Js.Nullable.return((a => a)(b))
                        }
                    )(b)
                  )
              )(b),
            )
          }
      )((inp: t_variables_ListsInput).nullableOfNullable),
      nullableOfNonNullable: (
        a =>
          switch a {
          | None => Js.Nullable.undefined
          | Some(b) => Js.Nullable.return((a => Js.Array2.map(a, b => (a => a)(b)))(b))
          }
      )((inp: t_variables_ListsInput).nullableOfNonNullable),
      nonNullableOfNullable: (
        a =>
          Js.Array2.map(a, b =>
            (
              a =>
                switch a {
                | None => Js.Nullable.undefined
                | Some(b) => Js.Nullable.return((a => a)(b))
                }
            )(b)
          )
      )((inp: t_variables_ListsInput).nonNullableOfNullable),
      nonNullableOfNonNullable: (a => Js.Array2.map(a, b => (a => a)(b)))(
        (inp: t_variables_ListsInput).nonNullableOfNonNullable,
      ),
    }: t_variables_ListsInput => Raw.t_variables_ListsInput
  )
  let makeVariables = (~arg, ()): t_variables => {arg: arg}
  and makeInputObjectListsInput = (
    ~nullableOfNullable=?,
    ~nullableOfNonNullable=?,
    ~nonNullableOfNullable,
    ~nonNullableOfNonNullable,
    (),
  ): t_variables_ListsInput => {
    nullableOfNullable,
    nullableOfNonNullable,
    nonNullableOfNullable,
    nonNullableOfNonNullable,
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

