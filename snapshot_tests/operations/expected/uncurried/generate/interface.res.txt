module Graphql_ppx_runtime = {
  // mock
  let deepMerge = (json1, _) => json1
}
module QueryWithOnlyFragments: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_users_User_AnonymousUser = {
      __typename: string,
      id: string,
      anonymousId: int,
    }
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
      name: string,
    }
    type rec t_users_User
    type rec t = {users: array<t_users_User>}
    type rec t_variables = unit
  }
  type rec t_users_User_AnonymousUser = {id: string, anonymousId: int}
  type rec t_users_User_AdminUser = {id: string, name: string}
  type rec t_users_User = [
    | #UnspecifiedFragment(string)
    | #AnonymousUser(t_users_User_AnonymousUser)
    | #AdminUser(t_users_User_AdminUser)
  ]
  type rec t = {users: array<t_users_User>}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_users_User_AnonymousUser = {
      __typename: string,
      id: string,
      anonymousId: int,
    }
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
      name: string,
    }
    type rec t_users_User
    type rec t = {users: array<t_users_User>}
    type rec t_variables = unit
  }
  type rec t_users_User_AnonymousUser = {
    id: string,
    anonymousId: int,
  }
  type rec t_users_User_AdminUser = {
    id: string,
    name: string,
  }
  type rec t_users_User = [
    | #UnspecifiedFragment(string)
    | #AnonymousUser(t_users_User_AnonymousUser)
    | #AdminUser(t_users_User_AdminUser)
  ]
  type rec t = {users: array<t_users_User>}
  type rec t_variables = unit
  let query = "query   {
users  {
__typename
...on AdminUser   {
id  
name  
}

...on AnonymousUser   {
id  
anonymousId  
}

}

}
"
  let parse = (value): t => {
    users: {
      let value = (value: Raw.t).users
      Js.Array2.map(value, value => {
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "AnonymousUser" =>
            #AnonymousUser({
              let value = (Obj.magic(value): Raw.t_users_User_AnonymousUser)
              (
                {
                  id: {
                    let value = (value: Raw.t_users_User_AnonymousUser).id
                    value
                  },
                  anonymousId: {
                    let value = (value: Raw.t_users_User_AnonymousUser).anonymousId
                    value
                  },
                }: t_users_User_AnonymousUser
              )
            })
          | "AdminUser" =>
            #AdminUser({
              let value = (Obj.magic(value): Raw.t_users_User_AdminUser)
              (
                {
                  id: {
                    let value = (value: Raw.t_users_User_AdminUser).id
                    value
                  },
                  name: {
                    let value = (value: Raw.t_users_User_AdminUser).name
                    value
                  },
                }: t_users_User_AdminUser
              )
            })
          | _ => #UnspecifiedFragment(typename)
          }: t_users_User
        )
      })
    },
  }
  let serialize = (value): Raw.t => {
    let users = {
      let value = (value: t).users
      Js.Array2.map(value, value =>
        switch value {
        | #AnonymousUser(value) =>
          (
            Obj.magic(
              (
                {
                  let anonymousId = {
                    let value = (value: t_users_User_AnonymousUser).anonymousId
                    value
                  }
                  and id = {
                    let value = (value: t_users_User_AnonymousUser).id
                    value
                  }
                  {__typename: "AnonymousUser", id, anonymousId}
                }: Raw.t_users_User_AnonymousUser
              ),
            ): Raw.t_users_User
          )
        | #AdminUser(value) =>
          (
            Obj.magic(
              (
                {
                  let name = {
                    let value = (value: t_users_User_AdminUser).name
                    value
                  }
                  and id = {
                    let value = (value: t_users_User_AdminUser).id
                    value
                  }
                  {__typename: "AdminUser", id, name}
                }: Raw.t_users_User_AdminUser
              ),
            ): Raw.t_users_User
          )
        | #UnspecifiedFragment(_) => (Obj.magic(Js.Dict.empty()): Raw.t_users_User)
        }
      )
    }
    {users: users}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module QueryWithTypename: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
    }
    type rec t_users_User
    type rec t = {users: array<t_users_User>}
    type rec t_variables = unit
  }
  type rec t_users_User_AdminUser = {__typename: string, id: string}
  type rec t_users_User = [#UnspecifiedFragment(string) | #AdminUser(t_users_User_AdminUser)]
  type rec t = {users: array<t_users_User>}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
    }
    type rec t_users_User
    type rec t = {users: array<t_users_User>}
    type rec t_variables = unit
  }
  type rec t_users_User_AdminUser = {
    __typename: string,
    id: string,
  }
  type rec t_users_User = [#UnspecifiedFragment(string) | #AdminUser(t_users_User_AdminUser)]
  type rec t = {users: array<t_users_User>}
  type rec t_variables = unit
  let query = "query   {
users  {
__typename
...on AdminUser   {
__typename  
id  
}

}

}
"
  let parse = (value): t => {
    users: {
      let value = (value: Raw.t).users
      Js.Array2.map(value, value => {
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "AdminUser" =>
            #AdminUser({
              let value = (Obj.magic(value): Raw.t_users_User_AdminUser)
              (
                {
                  __typename: {
                    let value = (value: Raw.t_users_User_AdminUser).__typename
                    value
                  },
                  id: {
                    let value = (value: Raw.t_users_User_AdminUser).id
                    value
                  },
                }: t_users_User_AdminUser
              )
            })
          | _ => #UnspecifiedFragment(typename)
          }: t_users_User
        )
      })
    },
  }
  let serialize = (value): Raw.t => {
    let users = {
      let value = (value: t).users
      Js.Array2.map(value, value =>
        switch value {
        | #AdminUser(value) =>
          (
            Obj.magic(
              (
                {
                  let id = {
                    let value = (value: t_users_User_AdminUser).id
                    value
                  }
                  and __typename = {
                    let value = (value: t_users_User_AdminUser).__typename
                    value
                  }
                  {__typename: "AdminUser", id}
                }: Raw.t_users_User_AdminUser
              ),
            ): Raw.t_users_User
          )
        | #UnspecifiedFragment(_) => (Obj.magic(Js.Dict.empty()): Raw.t_users_User)
        }
      )
    }
    {users: users}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module QueryWithMixedFragments: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_users_User_AnonymousUser = {
      __typename: string,
      anonymousId: int,
    }
    type rec t_users_User_AdminUser = {
      __typename: string,
      name: string,
    }
    type rec t_users_User
    type rec t_users
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users_User_AnonymousUser = {anonymousId: int}
  type rec t_users_User_AdminUser = {name: string}
  type rec t_users_User = [
    | #UnspecifiedFragment(string)
    | #AnonymousUser(t_users_User_AnonymousUser)
    | #AdminUser(t_users_User_AdminUser)
  ]
  type rec t_users = {fragment: t_users_User, id: string}
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_users_User_AnonymousUser = {
      __typename: string,
      anonymousId: int,
    }
    type rec t_users_User_AdminUser = {
      __typename: string,
      name: string,
    }
    type rec t_users_User
    type rec t_users
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users_User_AnonymousUser = {anonymousId: int}
  type rec t_users_User_AdminUser = {name: string}
  type rec t_users_User = [
    | #UnspecifiedFragment(string)
    | #AnonymousUser(t_users_User_AnonymousUser)
    | #AdminUser(t_users_User_AdminUser)
  ]
  type rec t_users = {
    fragment: t_users_User,
    id: string,
  }
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  let query = "query   {
users  {
__typename
id  
...on AdminUser   {
name  
}

...on AnonymousUser   {
anonymousId  
}

}

}
"
  let parse = (value): t => {
    users: {
      let value = (value: Raw.t).users
      Js.Array2.map(value, (value): t_users => {
        fragment: {
          let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
          (
            switch typename {
            | "AnonymousUser" =>
              #AnonymousUser({
                let value = (Obj.magic(value): Raw.t_users_User_AnonymousUser)
                (
                  {
                    anonymousId: {
                      let value = (value: Raw.t_users_User_AnonymousUser).anonymousId
                      value
                    },
                  }: t_users_User_AnonymousUser
                )
              })
            | "AdminUser" =>
              #AdminUser({
                let value = (Obj.magic(value): Raw.t_users_User_AdminUser)
                (
                  {
                    name: {
                      let value = (value: Raw.t_users_User_AdminUser).name
                      value
                    },
                  }: t_users_User_AdminUser
                )
              })
            | _ => #UnspecifiedFragment(typename)
            }: t_users_User
          )
        },
        id: {
          let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "id"))
          value
        },
      })
    },
  }
  let serialize = (value): Raw.t => {
    let users = {
      let value = (value: t).users
      Js.Array2.map(value, (value): Raw.t_users =>
        Obj.magic(
          Js.Array2.reduce(
            [
              {
                let value = (value: t_users).fragment
                (
                  Obj.magic(
                    switch value {
                    | #AnonymousUser(value) =>
                      (
                        Obj.magic(
                          (
                            {
                              let anonymousId = {
                                let value = (value: t_users_User_AnonymousUser).anonymousId
                                value
                              }
                              {__typename: "AnonymousUser", anonymousId}
                            }: Raw.t_users_User_AnonymousUser
                          ),
                        ): Raw.t_users_User
                      )
                    | #AdminUser(value) =>
                      (
                        Obj.magic(
                          (
                            {
                              let name = {
                                let value = (value: t_users_User_AdminUser).name
                                value
                              }
                              {__typename: "AdminUser", name}
                            }: Raw.t_users_User_AdminUser
                          ),
                        ): Raw.t_users_User
                      )
                    | #UnspecifiedFragment(_) => (Obj.magic(Js.Dict.empty()): Raw.t_users_User)
                    },
                  ): Js.Json.t
                )
              },
            ],
            Graphql_ppx_runtime.deepMerge,
            (
              Obj.magic({
                let id = {
                  let value = (value: t_users).id
                  value
                }
                {"id": id}
              }): Js.Json.t
            ),
          ),
        )
      )
    }
    {users: users}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module MixedQueryWithTypename: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
    }
    type rec t_users_User
    type rec t_users
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users_User_AdminUser = {__typename: string, id: string}
  type rec t_users_User = [#UnspecifiedFragment(string) | #AdminUser(t_users_User_AdminUser)]
  type rec t_users = {fragment: t_users_User, __typename: string, id: string}
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_users_User_AdminUser = {
      __typename: string,
      id: string,
    }
    type rec t_users_User
    type rec t_users
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users_User_AdminUser = {
    __typename: string,
    id: string,
  }
  type rec t_users_User = [#UnspecifiedFragment(string) | #AdminUser(t_users_User_AdminUser)]
  type rec t_users = {
    fragment: t_users_User,
    __typename: string,
    id: string,
  }
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  let query = "query   {
users  {
__typename
id  
__typename  
...on AdminUser   {
__typename  
id  
}

}

}
"
  let parse = (value): t => {
    users: {
      let value = (value: Raw.t).users
      Js.Array2.map(value, (value): t_users => {
        fragment: {
          let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
          (
            switch typename {
            | "AdminUser" =>
              #AdminUser({
                let value = (Obj.magic(value): Raw.t_users_User_AdminUser)
                (
                  {
                    __typename: {
                      let value = (value: Raw.t_users_User_AdminUser).__typename
                      value
                    },
                    id: {
                      let value = (value: Raw.t_users_User_AdminUser).id
                      value
                    },
                  }: t_users_User_AdminUser
                )
              })
            | _ => #UnspecifiedFragment(typename)
            }: t_users_User
          )
        },
        __typename: {
          let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename"))
          value
        },
        id: {
          let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "id"))
          value
        },
      })
    },
  }
  let serialize = (value): Raw.t => {
    let users = {
      let value = (value: t).users
      Js.Array2.map(value, (value): Raw.t_users =>
        Obj.magic(
          Js.Array2.reduce(
            [
              {
                let value = (value: t_users).fragment
                (
                  Obj.magic(
                    switch value {
                    | #AdminUser(value) =>
                      (
                        Obj.magic(
                          (
                            {
                              let id = {
                                let value = (value: t_users_User_AdminUser).id
                                value
                              }
                              and __typename = {
                                let value = (value: t_users_User_AdminUser).__typename
                                value
                              }
                              {__typename: "AdminUser", id}
                            }: Raw.t_users_User_AdminUser
                          ),
                        ): Raw.t_users_User
                      )
                    | #UnspecifiedFragment(_) => (Obj.magic(Js.Dict.empty()): Raw.t_users_User)
                    },
                  ): Js.Json.t
                )
              },
            ],
            Graphql_ppx_runtime.deepMerge,
            (
              Obj.magic({
                let id = {
                  let value = (value: t_users).id
                  value
                }
                and __typename = {
                  let value = (value: t_users).__typename
                  value
                }
                {"__typename": __typename, "id": id}
              }): Js.Json.t
            ),
          ),
        )
      )
    }
    {users: users}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module QueryWithoutFragments: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_users = {id: string}
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users = {id: string}
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_users = {id: string}
    type rec t = {users: array<t_users>}
    type rec t_variables = unit
  }
  type rec t_users = {id: string}
  type rec t = {users: array<t_users>}
  type rec t_variables = unit
  let query = "query   {
users  {
__typename
id  
}

}
"
  let parse = (value): t => {
    users: {
      let value = (value: Raw.t).users
      Js.Array2.map(value, (value): t_users => {
        id: {
          let value = (value: Raw.t_users).id
          value
        },
      })
    },
  }
  let serialize = (value): Raw.t => {
    let users = {
      let value = (value: t).users
      Js.Array2.map(value, (value): Raw.t_users => {
        let id = {
          let value = (value: t_users).id
          value
        }
        {id: id}
      })
    }
    {users: users}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

