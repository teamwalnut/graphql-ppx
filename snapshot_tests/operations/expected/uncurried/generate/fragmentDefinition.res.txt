module Graphql_ppx_runtime = {
  // mock
  let deepMerge = (json1, _) => json1
}
module ListFragment: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~fragmentName: [#ListFragment], Raw.t) => t
  let verifyName: [#ListFragment] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  let query = "fragment ListFragment on Lists   {
nullableOfNullable  
nullableOfNonNullable  
}
"
  let parse = (
    (value): t => {
      nullableOfNullable: {
        let value = (value: Raw.t).nullableOfNullable
        switch Js.toOption(value) {
        | Some(value) =>
          Some(
            Js.Array2.map(value, value =>
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            ),
          )
        | None => None
        }
      },
      nullableOfNonNullable: {
        let value = (value: Raw.t).nullableOfNonNullable
        switch Js.toOption(value) {
        | Some(value) => Some(Js.Array2.map(value, value => value))
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable
        switch value {
        | Some(value) => Js.Nullable.return(Js.Array2.map(value, value => value))
        | None => Js.Nullable.null
        }
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable
        switch value {
        | Some(value) =>
          Js.Nullable.return(
            Js.Array2.map(value, value =>
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            ),
          )
        | None => Js.Nullable.null
        }
      }
      {nullableOfNullable, nullableOfNonNullable}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (~fragmentName as _ListFragment: [#ListFragment], value: Raw.t) =>
    parse(value)
  let verifyName = x => switch x {
  | #ListFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module Another: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {nullableOfNonNullable: Js.Nullable.t<array<string>>}
    type t_Lists = t
  }
  type rec t = {nullableOfNonNullable: option<array<string>>}
  type t_Lists = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~fragmentName: [#Another], Raw.t) => t
  let verifyName: [#Another] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {nullableOfNonNullable: Js.Nullable.t<array<string>>}
    type t_Lists = t
  }
  type rec t = {nullableOfNonNullable: option<array<string>>}
  type t_Lists = t
  let query = "fragment Another on Lists   {
nullableOfNonNullable  
}
"
  let parse = (
    (value): t => {
      nullableOfNonNullable: {
        let value = (value: Raw.t).nullableOfNonNullable
        switch Js.toOption(value) {
        | Some(value) => Some(Js.Array2.map(value, value => value))
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable
        switch value {
        | Some(value) => Js.Nullable.return(Js.Array2.map(value, value => value))
        | None => Js.Nullable.null
        }
      }
      {nullableOfNonNullable: nullableOfNonNullable}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (~fragmentName as _Another: [#Another], value: Raw.t) => parse(value)
  let verifyName = x => switch x {
  | #Another => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module FragmentWithArgs: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {listWithArg: Js.Nullable.t<array<Js.Nullable.t<string>>>}
    type t_Lists = t
  }
  type rec t = {listWithArg: option<array<option<string>>>}
  type t_Lists = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~arg1: [#String], ~fragmentName: [#FragmentWithArgs], Raw.t) => t
  let verifyName: [#FragmentWithArgs] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {listWithArg: Js.Nullable.t<array<Js.Nullable.t<string>>>}
    type t_Lists = t
  }
  type rec t = {listWithArg: option<array<option<string>>>}
  type t_Lists = t
  let query = "fragment FragmentWithArgs on Lists   {
listWithArg(arg1: $arg1)  
}
"
  let parse = (
    (value): t => {
      listWithArg: {
        let value = (value: Raw.t).listWithArg
        switch Js.toOption(value) {
        | Some(value) =>
          Some(
            Js.Array2.map(value, value =>
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            ),
          )
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let listWithArg = {
        let value = (value: t).listWithArg
        switch value {
        | Some(value) =>
          Js.Nullable.return(
            Js.Array2.map(value, value =>
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            ),
          )
        | None => Js.Nullable.null
        }
      }
      {listWithArg: listWithArg}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (
    ~arg1 as _arg1: [#String],
    ~fragmentName as _FragmentWithArgs: [#FragmentWithArgs],
    value: Raw.t,
  ) => parse(value)
  let verifyName = x => switch x {
  | #FragmentWithArgs => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}

module InlineListFragment = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  let query = "fragment InlineListFragment on Lists   {
nullableOfNullable  
nullableOfNonNullable  
}
"
  let parse = (
    (value): t => {
      nullableOfNullable: {
        let value = (value: Raw.t).nullableOfNullable
        switch Js.toOption(value) {
        | Some(value) =>
          Some(
            Js.Array2.map(value, value =>
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            ),
          )
        | None => None
        }
      },
      nullableOfNonNullable: {
        let value = (value: Raw.t).nullableOfNonNullable
        switch Js.toOption(value) {
        | Some(value) => Some(Js.Array2.map(value, value => value))
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable
        switch value {
        | Some(value) => Js.Nullable.return(Js.Array2.map(value, value => value))
        | None => Js.Nullable.null
        }
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable
        switch value {
        | Some(value) =>
          Js.Nullable.return(
            Js.Array2.map(value, value =>
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            ),
          )
        | None => Js.Nullable.null
        }
      }
      {nullableOfNullable, nullableOfNonNullable}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (
    ~fragmentName as _InlineListFragment: [#InlineListFragment],
    value: Raw.t,
  ) => parse(value)
  let verifyName = x => switch x {
  | #InlineListFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}

module Wrapper = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {
      nullableOfNullable: Js.Nullable.t<array<Js.Nullable.t<string>>>,
      nullableOfNonNullable: Js.Nullable.t<array<string>>,
    }
    type t_Lists = t
  }
  type rec t = {
    nullableOfNullable: option<array<option<string>>>,
    nullableOfNonNullable: option<array<string>>,
  }
  type t_Lists = t
  let query = "fragment InlineListFragment on Lists   {
nullableOfNullable  
nullableOfNonNullable  
}
"
  let parse = (
    (value): t => {
      nullableOfNullable: {
        let value = (value: Raw.t).nullableOfNullable
        switch Js.toOption(value) {
        | Some(value) =>
          Some(
            Js.Array2.map(value, value =>
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            ),
          )
        | None => None
        }
      },
      nullableOfNonNullable: {
        let value = (value: Raw.t).nullableOfNonNullable
        switch Js.toOption(value) {
        | Some(value) => Some(Js.Array2.map(value, value => value))
        | None => None
        }
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable
        switch value {
        | Some(value) => Js.Nullable.return(Js.Array2.map(value, value => value))
        | None => Js.Nullable.null
        }
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable
        switch value {
        | Some(value) =>
          Js.Nullable.return(
            Js.Array2.map(value, value =>
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            ),
          )
        | None => Js.Nullable.null
        }
      }
      {nullableOfNullable, nullableOfNonNullable}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (
    ~fragmentName as _InlineListFragment: [#InlineListFragment],
    value: Raw.t,
  ) => parse(value)
  let verifyName = x => switch x {
  | #InlineListFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_l2
    type rec t_l3
    type rec t_l4
    type rec t = {
      l1: ListFragment.Raw.t_Lists,
      l2: t_l2,
      l3: t_l3,
      l4: t_l4,
      l5: FragmentWithArgs.Raw.t_Lists,
    }
    type rec t_variables = {arg1: Js.Nullable.t<string>}
  }
  type rec t_l2 = {frag1: ListFragment.t_Lists, frag2: ListFragment.t_Lists}
  type rec t_l3 = {
    nullableOfNullable: option<array<option<string>>>,
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  }
  type rec t_l4 = {
    nullableOfNullable: option<array<option<string>>>,
    inlineListFragment: InlineListFragment.t_Lists,
  }
  type rec t = {
    l1: ListFragment.t_Lists,
    l2: t_l2,
    l3: t_l3,
    l4: t_l4,
    l5: FragmentWithArgs.t_Lists,
  }
  type rec t_variables = {arg1: option<string>}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let makeVariables: (~arg1: string=?, unit) => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_l2
    type rec t_l3
    type rec t_l4
    type rec t = {
      l1: ListFragment.Raw.t_Lists,
      l2: t_l2,
      l3: t_l3,
      l4: t_l4,
      l5: FragmentWithArgs.Raw.t_Lists,
    }
    type rec t_variables = {arg1: Js.Nullable.t<string>}
  }
  type rec t_l2 = {frag1: ListFragment.t_Lists, frag2: ListFragment.t_Lists}
  type rec t_l3 = {
    nullableOfNullable: option<array<option<string>>>,
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  }
  type rec t_l4 = {
    nullableOfNullable: option<array<option<string>>>,
    inlineListFragment: InlineListFragment.t_Lists,
  }
  type rec t = {
    l1: ListFragment.t_Lists,
    l2: t_l2,
    l3: t_l3,
    l4: t_l4,
    l5: FragmentWithArgs.t_Lists,
  }
  type rec t_variables = {arg1: option<string>}
  let query = \"^"(
    \"^"(
      \"^"(
        "query MyQuery($arg1: String)  {
l1: lists  {
...ListFragment   
}

l2: lists  {
...ListFragment   
...ListFragment   
}

l3: lists  {
nullableOfNullable  
...ListFragment   
...ListFragment   
}

l4: lists  {
nullableOfNullable  
...InlineListFragment   
}

l5: lists  {
...FragmentWithArgs   
}

}
",
        FragmentWithArgs.query,
      ),
      ListFragment.query,
    ),
    InlineListFragment.query,
  )
  let parse = (value): t => {
    l1: {
      let value = (value: Raw.t).l1

      ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
    },
    l2: {
      let value = (value: Raw.t).l2
      (
        {
          frag1: {
            let value = (Obj.magic(value): ListFragment.Raw.t)

            ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
          },
          frag2: {
            let value = (Obj.magic(value): ListFragment.Raw.t)

            ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
          },
        }: t_l2
      )
    },
    l3: {
      let value = (value: Raw.t).l3
      (
        {
          nullableOfNullable: {
            let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "nullableOfNullable"))
            switch Js.toOption(value) {
            | Some(value) =>
              Some(
                Js.Array2.map(value, value =>
                  switch Js.toOption(value) {
                  | Some(value) => Some(value)
                  | None => None
                  }
                ),
              )
            | None => None
            }
          },
          frag1: {
            let value = (Obj.magic(value): ListFragment.Raw.t)

            ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
          },
          frag2: {
            let value = (Obj.magic(value): ListFragment.Raw.t)

            ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
          },
        }: t_l3
      )
    },
    l4: {
      let value = (value: Raw.t).l4
      (
        {
          nullableOfNullable: {
            let value = Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "nullableOfNullable"))
            switch Js.toOption(value) {
            | Some(value) =>
              Some(
                Js.Array2.map(value, value =>
                  switch Js.toOption(value) {
                  | Some(value) => Some(value)
                  | None => None
                  }
                ),
              )
            | None => None
            }
          },
          inlineListFragment: {
            let value = (Obj.magic(value): InlineListFragment.Raw.t)

            InlineListFragment.verifyArgsAndParse(~fragmentName=#InlineListFragment, value)
          },
        }: t_l4
      )
    },
    l5: {
      let value = (value: Raw.t).l5

      FragmentWithArgs.verifyArgsAndParse(~arg1=#String, ~fragmentName=#FragmentWithArgs, value)
    },
  }
  let serialize = (value): Raw.t => {
    let l5 = {
      let value = (value: t).l5
      FragmentWithArgs.serialize(value)
    }
    and l4 = {
      let value = (value: t).l4
      (
        Obj.magic(
          Js.Array2.reduce(
            [
              (
                Obj.magic(InlineListFragment.serialize((value: t_l4).inlineListFragment)): Js.Json.t
              ),
            ],
            Graphql_ppx_runtime.deepMerge,
            (
              Obj.magic({
                let nullableOfNullable = {
                  let value = (value: t_l4).nullableOfNullable
                  switch value {
                  | Some(value) =>
                    Js.Nullable.return(
                      Js.Array2.map(value, value =>
                        switch value {
                        | Some(value) => Js.Nullable.return(value)
                        | None => Js.Nullable.null
                        }
                      ),
                    )
                  | None => Js.Nullable.null
                  }
                }
                {"nullableOfNullable": nullableOfNullable}
              }): Js.Json.t
            ),
          ),
        ): Raw.t_l4
      )
    }
    and l3 = {
      let value = (value: t).l3
      (
        Obj.magic(
          Js.Array2.reduce(
            [
              (Obj.magic(ListFragment.serialize((value: t_l3).frag1)): Js.Json.t),
              (Obj.magic(ListFragment.serialize((value: t_l3).frag2)): Js.Json.t),
            ],
            Graphql_ppx_runtime.deepMerge,
            (
              Obj.magic({
                let nullableOfNullable = {
                  let value = (value: t_l3).nullableOfNullable
                  switch value {
                  | Some(value) =>
                    Js.Nullable.return(
                      Js.Array2.map(value, value =>
                        switch value {
                        | Some(value) => Js.Nullable.return(value)
                        | None => Js.Nullable.null
                        }
                      ),
                    )
                  | None => Js.Nullable.null
                  }
                }
                {"nullableOfNullable": nullableOfNullable}
              }): Js.Json.t
            ),
          ),
        ): Raw.t_l3
      )
    }
    and l2 = {
      let value = (value: t).l2
      (
        Obj.magic(
          Js.Array2.reduce(
            [
              (Obj.magic(ListFragment.serialize((value: t_l2).frag1)): Js.Json.t),
              (Obj.magic(ListFragment.serialize((value: t_l2).frag2)): Js.Json.t),
            ],
            Graphql_ppx_runtime.deepMerge,
            (Obj.magic(Js.Dict.empty): Js.Json.t),
          ),
        ): Raw.t_l2
      )
    }
    and l1 = {
      let value = (value: t).l1
      ListFragment.serialize(value)
    }
    {l1, l2, l3, l4, l5}
  }
  let serializeVariables: t_variables => Raw.t_variables = inp => {
    arg1: (
      a =>
        switch a {
        | None => Js.Nullable.undefined
        | Some(b) => Js.Nullable.return((a => a)(b))
        }
    )((inp: t_variables).arg1),
  }
  let makeVariables = (~arg1=?, ()): t_variables => {arg1: arg1}
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module MyQuery2: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {lists: ListFragment.Raw.t_Lists}
    type rec t_variables = unit
  }
  type rec t = {lists: ListFragment.t_Lists}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {lists: ListFragment.Raw.t_Lists}
    type rec t_variables = unit
  }
  type rec t = {lists: ListFragment.t_Lists}
  type rec t_variables = unit
  let query = \"^"(
    "query   {
lists  {
...ListFragment   
}

}
",
    ListFragment.query,
  )
  let parse = (value): t => {
    lists: {
      let value = (value: Raw.t).lists

      ListFragment.verifyArgsAndParse(~fragmentName=#ListFragment, value)
    },
  }
  let serialize = (value): Raw.t => {
    let lists = {
      let value = (value: t).lists
      ListFragment.serialize(value)
    }
    {lists: lists}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

