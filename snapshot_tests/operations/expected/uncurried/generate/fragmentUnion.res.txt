module Graphql_ppx_runtime = {
  // mock
  let assign_typename: (Js.Json.t, string) => Js.Json.t = (
    %raw(` (obj, typename) => { obj.__typename = typename; return obj } `): (
      Js.Json.t,
      string,
    ) => Js.Json.t
  )
}
module DogFragment: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {name: string}
    type t_Dog = t
  }
  type rec t = {name: string}
  type t_Dog = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~fragmentName: [#DogFragment], Raw.t) => t
  let verifyName: [#DogFragment] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {name: string}
    type t_Dog = t
  }
  type rec t = {name: string}
  type t_Dog = t
  let query = "fragment DogFragment on Dog   {
name  
}
"
  let parse = (
    (value): t => {
      name: {
        let value = (value: Raw.t).name
        value
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let name = {
        let value = (value: t).name
        value
      }
      {name: name}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (~fragmentName as _DogFragment: [#DogFragment], value: Raw.t) =>
    parse(value)
  let verifyName = x => switch x {
  | #DogFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module HumanFragment: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t = {name: string}
    type t_Human = t
  }
  type rec t = {name: string}
  type t_Human = t
  @ocaml.doc(" the GraphQL fragment ") let query: string
  @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
  let serialize: t => Raw.t
  let verifyArgsAndParse: (~fragmentName: [#HumanFragment], Raw.t) => t
  let verifyName: [#HumanFragment] => unit
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t = {name: string}
    type t_Human = t
  }
  type rec t = {name: string}
  type t_Human = t
  let query = "fragment HumanFragment on Human   {
name  
}
"
  let parse = (
    (value): t => {
      name: {
        let value = (value: Raw.t).name
        value
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let name = {
        let value = (value: t).name
        value
      }
      {name: name}
    }: t => Raw.t
  )
  let verifyArgsAndParse = (~fragmentName as _HumanFragment: [#HumanFragment], value: Raw.t) =>
    parse(value)
  let verifyName = x => switch x {
  | #HumanFragment => ()
  }
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(DogFragment.t_Dog)
    | #Human(HumanFragment.t_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(DogFragment.t_Dog)
    | #Human(HumanFragment.t_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  let query = \"^"(
    \"^"(
      "query MyQuery  {
dogOrHuman  {
__typename
...on Dog   {
...DogFragment   
}

...on Human   {
...HumanFragment   
}

}

}
",
      DogFragment.query,
    ),
    HumanFragment.query,
  )
  let parse = (value): t => {
    dogOrHuman: {
      let value = (value: Raw.t).dogOrHuman
      let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
      (
        switch typename {
        | "Dog" =>
          #Dog({
            let value = (Obj.magic(value): DogFragment.Raw.t)

            DogFragment.verifyArgsAndParse(~fragmentName=#DogFragment, value)
          })
        | "Human" =>
          #Human({
            let value = (Obj.magic(value): HumanFragment.Raw.t)

            HumanFragment.verifyArgsAndParse(~fragmentName=#HumanFragment, value)
          })
        | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
        }: t_dogOrHuman
      )
    },
  }
  let serialize = (value): Raw.t => {
    let dogOrHuman = {
      let value = (value: t).dogOrHuman
      switch value {
      | #Dog(value) =>
        (
          Obj.magic(
            Graphql_ppx_runtime.assign_typename(
              (Obj.magic(DogFragment.serialize(value)): Js.Json.t),
              "Dog",
            ),
          ): Raw.t_dogOrHuman
        )
      | #Human(value) =>
        (
          Obj.magic(
            Graphql_ppx_runtime.assign_typename(
              (Obj.magic(HumanFragment.serialize(value)): Js.Json.t),
              "Human",
            ),
          ): Raw.t_dogOrHuman
        )
      | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
      }
    }
    {dogOrHuman: dogOrHuman}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

