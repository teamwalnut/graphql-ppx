module Graphql_ppx_runtime = {
  // mock
  let assign_typename = (obj, _) => obj
}

type scalars = {
  __typename: string,
  string: string,
  int: int,
}

type dog = {
  __typename: string,
  name: string,
  barkVolume: float,
}

type oneFieldQuery = {nullableString: option<string>}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_variousScalars = {
      __typename: string,
      string: string,
      int: int,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t = {variousScalars: scalars}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_variousScalars = {
      __typename: string,
      string: string,
      int: int,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t = {variousScalars: scalars}
  type rec t_variables = unit
  let query = "query   {
variousScalars  {
__typename  
string  
int  
}

}
"
  let parse = (value): t => {
    variousScalars: {
      let value = (value: Raw.t).variousScalars
      (
        {
          __typename: {
            let value = (value: Raw.t_variousScalars).__typename
            value
          },
          string: {
            let value = (value: Raw.t_variousScalars).string
            value
          },
          int: {
            let value = (value: Raw.t_variousScalars).int
            value
          },
        }: scalars
      )
    },
  }
  let serialize = (value): Raw.t => {
    let variousScalars = {
      let value = (value: t).variousScalars
      (
        {
          let int = {
            let value = (value: scalars).int
            value
          }
          and string = {
            let value = (value: scalars).string
            value
          }
          and __typename = {
            let value = (value: scalars).__typename
            value
          }
          {__typename, string, int}
        }: Raw.t_variousScalars
      )
    }
    {variousScalars: variousScalars}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module OneFieldQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_variousScalars = {nullableString: Js.Nullable.t<string>}
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {nullableString: option<string>}
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_variousScalars = {nullableString: Js.Nullable.t<string>}
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {nullableString: option<string>}
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  let query = "query   {
variousScalars  {
nullableString  
}

}
"
  let parse = (value): t => {
    variousScalars: {
      let value = (value: Raw.t).variousScalars
      (
        {
          nullableString: {
            let value = (value: Raw.t_variousScalars).nullableString
            switch Js.toOption(value) {
            | Some(value) => Some(value)
            | None => None
            }
          },
        }: t_variousScalars
      )
    },
  }
  let serialize = (value): Raw.t => {
    let variousScalars = {
      let value = (value: t).variousScalars
      (
        {
          let nullableString = {
            let value = (value: t_variousScalars).nullableString
            switch value {
            | Some(value) => Js.Nullable.return(value)
            | None => Js.Nullable.null
            }
          }
          {nullableString: nullableString}
        }: Raw.t_variousScalars
      )
    }
    {variousScalars: variousScalars}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module OneFieldQueryWithTypename: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t<string>,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {__typename: string, nullableString: option<string>}
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_variousScalars = {
      __typename: string,
      nullableString: Js.Nullable.t<string>,
    }
    type rec t = {variousScalars: t_variousScalars}
    type rec t_variables = unit
  }
  type rec t_variousScalars = {
    __typename: string,
    nullableString: option<string>,
  }
  type rec t = {variousScalars: t_variousScalars}
  type rec t_variables = unit
  let query = "query   {
variousScalars  {
__typename  
nullableString  
}

}
"
  let parse = (value): t => {
    variousScalars: {
      let value = (value: Raw.t).variousScalars
      (
        {
          __typename: {
            let value = (value: Raw.t_variousScalars).__typename
            value
          },
          nullableString: {
            let value = (value: Raw.t_variousScalars).nullableString
            switch Js.toOption(value) {
            | Some(value) => Some(value)
            | None => None
            }
          },
        }: t_variousScalars
      )
    },
  }
  let serialize = (value): Raw.t => {
    let variousScalars = {
      let value = (value: t).variousScalars
      (
        {
          let nullableString = {
            let value = (value: t_variousScalars).nullableString
            switch value {
            | Some(value) => Js.Nullable.return(value)
            | None => Js.Nullable.null
            }
          }
          and __typename = {
            let value = (value: t_variousScalars).__typename
            value
          }
          {__typename, nullableString}
        }: Raw.t_variousScalars
      )
    }
    {variousScalars: variousScalars}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module ExternalFragmentQuery = {
  module Fragment: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t = {
        string: string,
        int: int,
      }
      type t_VariousScalars = t
    }
    type rec t = {string: string, int: int}
    type t_VariousScalars = t
    @ocaml.doc(" the GraphQL fragment ") let query: string
    @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
    let parse: Raw.t => t
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
    let serialize: t => Raw.t
    let verifyArgsAndParse: (~fragmentName: [#Fragment], Raw.t) => t
    let verifyName: [#Fragment] => unit
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t = {
        string: string,
        int: int,
      }
      type t_VariousScalars = t
    }
    type rec t = {
      string: string,
      int: int,
    }
    type t_VariousScalars = t
    let query = "fragment Fragment on VariousScalars   {
string  
int  
}
"
    let parse = (
      (value): t => {
        string: {
          let value = (value: Raw.t).string
          value
        },
        int: {
          let value = (value: Raw.t).int
          value
        },
      }: Raw.t => t
    )
    let serialize = (
      (value): Raw.t => {
        let int = {
          let value = (value: t).int
          value
        }
        and string = {
          let value = (value: t).string
          value
        }
        {string, int}
      }: t => Raw.t
    )
    let verifyArgsAndParse = (~fragmentName as _Fragment: [#Fragment], value: Raw.t) => parse(value)
    let verifyName = x => switch x {
    | #Fragment => ()
    }
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  }
  module Untitled1: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t = {variousScalars: Fragment.Raw.t_VariousScalars}
      type rec t_variables = unit
    }
    type rec t = {variousScalars: Fragment.t_VariousScalars}
    type rec t_variables = unit
    @ocaml.doc(" The GraphQL query ") let query: string
    @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
    let parse: Raw.t => t
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
    let serialize: t => Raw.t
    let serializeVariables: unit => Raw.t_variables
    let makeVariables: unit => t_variables
    let makeDefaultVariables: unit => t_variables
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t = {variousScalars: Fragment.Raw.t_VariousScalars}
      type rec t_variables = unit
    }
    type rec t = {variousScalars: Fragment.t_VariousScalars}
    type rec t_variables = unit
    let query = \"^"(
      "query   {
variousScalars  {
...Fragment   
}

}
",
      Fragment.query,
    )
    let parse = (value): t => {
      variousScalars: {
        let value = (value: Raw.t).variousScalars

        Fragment.verifyArgsAndParse(~fragmentName=#Fragment, value)
      },
    }
    let serialize = (value): Raw.t => {
      let variousScalars = {
        let value = (value: t).variousScalars
        Fragment.serialize(value)
      }
      {variousScalars: variousScalars}
    }
    let serializeVariables = () => ()
    let makeVariables = () => ()
    let makeDefaultVariables = () => makeVariables()
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  }
}
module InlineFragmentQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {__typename: string, name: string, barkVolume: float}
  type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(t_dogOrHuman_Dog)]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  }
  type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(t_dogOrHuman_Dog)]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  let query = "query   {
dogOrHuman  {
__typename
...on Dog   {
__typename  
name  
barkVolume  
}

}

}
"
  let parse = (value): t => {
    dogOrHuman: {
      let value = (value: Raw.t).dogOrHuman
      let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
      (
        switch typename {
        | "Dog" =>
          #Dog({
            let value = (Obj.magic(value): Raw.t_dogOrHuman_Dog)
            (
              {
                __typename: {
                  let value = (value: Raw.t_dogOrHuman_Dog).__typename
                  value
                },
                name: {
                  let value = (value: Raw.t_dogOrHuman_Dog).name
                  value
                },
                barkVolume: {
                  let value = (value: Raw.t_dogOrHuman_Dog).barkVolume
                  value
                },
              }: t_dogOrHuman_Dog
            )
          })
        | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
        }: t_dogOrHuman
      )
    },
  }
  let serialize = (value): Raw.t => {
    let dogOrHuman = {
      let value = (value: t).dogOrHuman
      switch value {
      | #Dog(value) =>
        (
          Obj.magic(
            (
              {
                let barkVolume = {
                  let value = (value: t_dogOrHuman_Dog).barkVolume
                  value
                }
                and name = {
                  let value = (value: t_dogOrHuman_Dog).name
                  value
                }
                and __typename = {
                  let value = (value: t_dogOrHuman_Dog).__typename
                  value
                }
                {__typename: "Dog", name, barkVolume}
              }: Raw.t_dogOrHuman_Dog
            ),
          ): Raw.t_dogOrHuman
        )
      | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
      }
    }
    {dogOrHuman: dogOrHuman}
  }
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module UnionExternalFragmentQuery = {
  module DogFragment: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t = {
        __typename: string,
        name: string,
        barkVolume: float,
      }
      type t_Dog = t
    }
    type rec t = {__typename: string, name: string, barkVolume: float}
    type t_Dog = t
    @ocaml.doc(" the GraphQL fragment ") let query: string
    @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
    let parse: Raw.t => t
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
    let serialize: t => Raw.t
    let verifyArgsAndParse: (~fragmentName: [#DogFragment], Raw.t) => t
    let verifyName: [#DogFragment] => unit
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t = {
        __typename: string,
        name: string,
        barkVolume: float,
      }
      type t_Dog = t
    }
    type rec t = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type t_Dog = t
    let query = "fragment DogFragment on Dog   {
__typename  
name  
barkVolume  
}
"
    let parse = (
      (value): t => {
        __typename: {
          let value = (value: Raw.t).__typename
          value
        },
        name: {
          let value = (value: Raw.t).name
          value
        },
        barkVolume: {
          let value = (value: Raw.t).barkVolume
          value
        },
      }: Raw.t => t
    )
    let serialize = (
      (value): Raw.t => {
        let barkVolume = {
          let value = (value: t).barkVolume
          value
        }
        and name = {
          let value = (value: t).name
          value
        }
        and __typename = {
          let value = (value: t).__typename
          value
        }
        {__typename, name, barkVolume}
      }: t => Raw.t
    )
    let verifyArgsAndParse = (~fragmentName as _DogFragment: [#DogFragment], value: Raw.t) =>
      parse(value)
    let verifyName = x => switch x {
    | #DogFragment => ()
    }
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  }
  module Untitled1: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t_dogOrHuman
      type rec t = {dogOrHuman: t_dogOrHuman}
      type rec t_variables = unit
    }
    type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(DogFragment.t_Dog)]
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
    @ocaml.doc(" The GraphQL query ") let query: string
    @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
    let parse: Raw.t => t
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
    let serialize: t => Raw.t
    let serializeVariables: unit => Raw.t_variables
    let makeVariables: unit => t_variables
    let makeDefaultVariables: unit => t_variables
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t_dogOrHuman
      type rec t = {dogOrHuman: t_dogOrHuman}
      type rec t_variables = unit
    }
    type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(DogFragment.t_Dog)]
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
    let query = \"^"(
      "query   {
dogOrHuman  {
__typename
...on Dog   {
...DogFragment   
}

}

}
",
      DogFragment.query,
    )
    let parse = (value): t => {
      dogOrHuman: {
        let value = (value: Raw.t).dogOrHuman
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "Dog" =>
            #Dog({
              let value = (Obj.magic(value): DogFragment.Raw.t)

              DogFragment.verifyArgsAndParse(~fragmentName=#DogFragment, value)
            })
          | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
          }: t_dogOrHuman
        )
      },
    }
    let serialize = (value): Raw.t => {
      let dogOrHuman = {
        let value = (value: t).dogOrHuman
        switch value {
        | #Dog(value) =>
          (
            Obj.magic(
              Graphql_ppx_runtime.assign_typename(
                (Obj.magic(DogFragment.serialize(value)): Js.Json.t),
                "Dog",
              ),
            ): Raw.t_dogOrHuman
          )
        | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
        }
      }
      {dogOrHuman: dogOrHuman}
    }
    let serializeVariables = () => ()
    let makeVariables = () => ()
    let makeDefaultVariables = () => makeVariables()
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  }
}

