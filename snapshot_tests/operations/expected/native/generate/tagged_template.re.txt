[@ocaml.ppx.context
  {
    tool_name: "ppx_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module MyQuery: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    "graphql`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};

module MyTypes = {
  type query;
};
module MyQuery1a: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: MyTypes.query;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: MyTypes.query = [%raw
    "graphql`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery1b: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    "graphql`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery2: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    "require(\"gatsby\").graphql`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery3: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    "require(\"gatsby\").graphql`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery4: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query: string = [%raw
    "require(\"gatsby\")`\n  query   {\n    variousScalars  {\n      nullableString\n      string\n      nullableInt\n      int\n      nullableFloat\n      float\n      nullableBoolean\n      boolean\n      nullableID\n      id\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      };
      `Assoc([("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module ListFragment: {
  [@ocaml.warning "-32-30"];
  module Raw: {type t;};
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment], Raw.t) => t;
  let verifyName: [ | `ListFragment] => unit;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query: string = [%raw
    "require(\"gatsby\")`\n  fragment ListFragment on Lists   {\n    nullableOfNullable\n    nullableOfNonNullable\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        ("nullableOfNullable", nullableOfNullable),
        ("nullableOfNonNullable", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};
module MyQuery5: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  let query: string = [%raw
    "require(\"gatsby\")`\n  query MyQuery5  {\n    lists  {\n      ...ListFragment\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Graphql_ppx_runtime.Json.member("lists", value);

          ListFragment.verifyArgsAndParse(
            ~fragmentName=`ListFragment,
            ListFragment.unsafe_fromJson(value),
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.toJson(ListFragment.serialize(value));
      };
      `Assoc([("lists", lists)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery6: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  let query: string =
    [%raw
      "(frag_0) => require(\"gatsby\")`\n  query MyQuery6  {\n    lists  {\n      ...ListFragment\n    }\n  }\n  ${frag_0}\n`"
    ](
      ListFragment.query,
    );
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Graphql_ppx_runtime.Json.member("lists", value);

          ListFragment.verifyArgsAndParse(
            ~fragmentName=`ListFragment,
            ListFragment.unsafe_fromJson(value),
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.toJson(ListFragment.serialize(value));
      };
      `Assoc([("lists", lists)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery7: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  let query: string = [%raw
    "graphql`\n  query MyQuery7  {\n    lists  {\n      ...ListFragment\n    }\n  }\n`"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Graphql_ppx_runtime.Json.member("lists", value);

          ListFragment.verifyArgsAndParse(
            ~fragmentName=`ListFragment,
            ListFragment.unsafe_fromJson(value),
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.toJson(ListFragment.serialize(value));
      };
      `Assoc([("lists", lists)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module ListFragment8: {
  [@ocaml.warning "-32-30"];
  module Raw: {type t;};
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: int;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment8], Raw.t) => t;
  let verifyName: [ | `ListFragment8] => unit;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  [@bs.module "apollo-client"] external graphql: array(string) => int = "gql";
  let query =
    graphql([|
      "fragment ListFragment8 on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n",
    |]);
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        ("nullableOfNullable", nullableOfNullable),
        ("nullableOfNonNullable", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment8: [ | `ListFragment8], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment8 => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};
module MyQuery8: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {
    lists: ListFragment8.t_Lists,
    variousScalars: t_variousScalars,
  };
  type t_variables = unit;
  /** The GraphQL query */
  let query: int;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {
    lists: ListFragment8.t_Lists,
    variousScalars: t_variousScalars,
  };
  type t_variables = unit;
  [@bs.module "apollo-client"]
  external graphql: (array(string), int) => int = "gql";
  let query =
    graphql(
      [|
        "query MyQuery8  {\nlists  {\n...ListFragment8   \n}\n\nvariousScalars  {\nnullableString  \nstring  \nnullableInt  \nint  \nnullableFloat  \nfloat  \nnullableBoolean  \nboolean  \nnullableID  \nid  \n}\n\n}\n",
        "",
      |],
      ListFragment8.query,
    );
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Graphql_ppx_runtime.Json.member("lists", value);

          ListFragment8.verifyArgsAndParse(
            ~fragmentName=`ListFragment8,
            ListFragment8.unsafe_fromJson(value),
          );
        },
        variousScalars: {
          let value =
            Graphql_ppx_runtime.Json.member("variousScalars", value);
          (
            {
              nullableString: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableString", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              string: {
                let value = Graphql_ppx_runtime.Json.member("string", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
              nullableInt: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableInt", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_int(value))
                };
              },
              int: {
                let value = Graphql_ppx_runtime.Json.member("int", value);
                Graphql_ppx_runtime.Json.to_int(value);
              },
              nullableFloat: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableFloat", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_float(value))
                };
              },
              float: {
                let value = Graphql_ppx_runtime.Json.member("float", value);
                Graphql_ppx_runtime.Json.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableBoolean", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_bool(value))
                };
              },
              boolean: {
                let value = Graphql_ppx_runtime.Json.member("boolean", value);
                Graphql_ppx_runtime.Json.to_bool(value);
              },
              nullableID: {
                let value =
                  Graphql_ppx_runtime.Json.member("nullableID", value);
                switch (value) {
                | `Null => None
                | value => Some(Graphql_ppx_runtime.Json.to_string(value))
                };
              },
              id: {
                let value = Graphql_ppx_runtime.Json.member("id", value);
                Graphql_ppx_runtime.Json.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          ("nullableString", nullableString),
          ("string", string),
          ("nullableInt", nullableInt),
          ("int", int),
          ("nullableFloat", nullableFloat),
          ("float", float),
          ("nullableBoolean", nullableBoolean),
          ("boolean", boolean),
          ("nullableID", nullableID),
          ("id", id),
        ]);
      }
      and lists = {
        let value = (value: t).lists;
        ListFragment8.toJson(ListFragment8.serialize(value));
      };
      `Assoc([("lists", lists), ("variousScalars", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
