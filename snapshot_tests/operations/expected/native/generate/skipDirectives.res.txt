module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_v1 = {
      nullableString: Js.Nullable.t<string>,
      string: Js.Nullable.t<string>,
    }
    type rec t_v2 = {
      nullableString: Js.Nullable.t<string>,
      string: Js.Nullable.t<string>,
    }
    type rec t = {
      v1: t_v1,
      v2: t_v2,
    }
    type rec t_variables = {var: bool}
  }
  type rec t_v1 = {nullableString: option<string>, string: option<string>}
  type rec t_v2 = {nullableString: option<string>, string: option<string>}
  type rec t = {v1: t_v1, v2: t_v2}
  type rec t_variables = {var: bool}
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: t_variables => Raw.t_variables
  let makeVariables: (~var: bool, unit) => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_v1 = {
      nullableString: Js.Nullable.t<string>,
      string: Js.Nullable.t<string>,
    }
    type rec t_v2 = {
      nullableString: Js.Nullable.t<string>,
      string: Js.Nullable.t<string>,
    }
    type rec t = {
      v1: t_v1,
      v2: t_v2,
    }
    type rec t_variables = {var: bool}
  }
  type rec t_v1 = {
    nullableString: option<string>,
    string: option<string>,
  }
  type rec t_v2 = {
    nullableString: option<string>,
    string: option<string>,
  }
  type rec t = {
    v1: t_v1,
    v2: t_v2,
  }
  type rec t_variables = {var: bool}
  let query = "query ($var: Boolean!)  {
v1: variousScalars  {
nullableString @skip(if: $var) 
string @skip(if: $var) 
}

v2: variousScalars  {
nullableString @include(if: $var) 
string @include(if: $var) 
}

}
"
  let parse = (
    (value): t => {
      v1: {
        let value = (value: Raw.t).v1
        (
          {
            nullableString: {
              let value = (value: Raw.t_v1).nullableString
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            string: {
              let value = (value: Raw.t_v1).string
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
          }: t_v1
        )
      },
      v2: {
        let value = (value: Raw.t).v2
        (
          {
            nullableString: {
              let value = (value: Raw.t_v2).nullableString
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
            string: {
              let value = (value: Raw.t_v2).string
              switch Js.toOption(value) {
              | Some(value) => Some(value)
              | None => None
              }
            },
          }: t_v2
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let v2 = {
        let value = (value: t).v2
        (
          {
            let string = {
              let value = (value: t_v2).string
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and nullableString = {
              let value = (value: t_v2).nullableString
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            {nullableString, string}
          }: Raw.t_v2
        )
      }
      and v1 = {
        let value = (value: t).v1
        (
          {
            let string = {
              let value = (value: t_v1).string
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            and nullableString = {
              let value = (value: t_v1).nullableString
              switch value {
              | Some(value) => Js.Nullable.return(value)
              | None => Js.Nullable.null
              }
            }
            {nullableString, string}
          }: Raw.t_v1
        )
      }
      {v1, v2}
    }: t => Raw.t
  )
  let serializeVariables: t_variables => Raw.t_variables = inp => {
    var: (a => a)((inp: t_variables).var),
  }
  let makeVariables = (~var, ()): t_variables => {var: var}
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

