module Graphql_ppx_runtime = {
  // mock
  let assign_typename = (obj, _) => obj
}
module MyQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {name: string, barkVolume: float}
  type rec t_dogOrHuman_Human = {name: string}
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_dogOrHuman_Dog)
    | #Human(t_dogOrHuman_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {
    name: string,
    barkVolume: float,
  }
  type rec t_dogOrHuman_Human = {name: string}
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_dogOrHuman_Dog)
    | #Human(t_dogOrHuman_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  let query = "query   {
dogOrHuman  {
__typename
...on Dog   {
name  
barkVolume  
}

...on Human   {
name  
}

}

}
"
  let parse = (
    (value): t => {
      dogOrHuman: {
        let value = (value: Raw.t).dogOrHuman
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "Dog" =>
            #Dog({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Dog)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Dog).name
                    value
                  },
                  barkVolume: {
                    let value = (value: Raw.t_dogOrHuman_Dog).barkVolume
                    value
                  },
                }: t_dogOrHuman_Dog
              )
            })
          | "Human" =>
            #Human({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Human)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Human).name
                    value
                  },
                }: t_dogOrHuman_Human
              )
            })
          | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
          }: t_dogOrHuman
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let dogOrHuman = {
        let value = (value: t).dogOrHuman
        switch value {
        | #Dog(value) =>
          (
            Obj.magic(
              (
                {
                  let barkVolume = {
                    let value = (value: t_dogOrHuman_Dog).barkVolume
                    value
                  }
                  and name = {
                    let value = (value: t_dogOrHuman_Dog).name
                    value
                  }
                  {__typename: "Dog", name, barkVolume}
                }: Raw.t_dogOrHuman_Dog
              ),
            ): Raw.t_dogOrHuman
          )
        | #Human(value) =>
          (
            Obj.magic(
              (
                {
                  let name = {
                    let value = (value: t_dogOrHuman_Human).name
                    value
                  }
                  {__typename: "Human", name}
                }: Raw.t_dogOrHuman_Human
              ),
            ): Raw.t_dogOrHuman
          )
        | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
        }
      }
      {dogOrHuman: dogOrHuman}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module MyQueryNoError: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {name: string, barkVolume: float}
  type rec t_dogOrHuman_Human = {name: string}
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_dogOrHuman_Dog)
    | #Human(t_dogOrHuman_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_dogOrHuman_Dog = {
      __typename: string,
      name: string,
      barkVolume: float,
    }
    type rec t_dogOrHuman_Human = {
      __typename: string,
      name: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman_Dog = {
    name: string,
    barkVolume: float,
  }
  type rec t_dogOrHuman_Human = {name: string}
  type rec t_dogOrHuman = [
    | #FutureAddedValue(Js.Json.t)
    | #Dog(t_dogOrHuman_Dog)
    | #Human(t_dogOrHuman_Human)
  ]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  let query = "query   {
dogOrHuman  {
__typename
...on Dog   {
name  
barkVolume  
}

...on Human   {
name  
}

}

}
"
  let parse = (
    (value): t => {
      dogOrHuman: {
        let value = (value: Raw.t).dogOrHuman
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "Dog" =>
            #Dog({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Dog)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Dog).name
                    value
                  },
                  barkVolume: {
                    let value = (value: Raw.t_dogOrHuman_Dog).barkVolume
                    value
                  },
                }: t_dogOrHuman_Dog
              )
            })
          | "Human" =>
            #Human({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Human)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Human).name
                    value
                  },
                }: t_dogOrHuman_Human
              )
            })
          | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
          }: t_dogOrHuman
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let dogOrHuman = {
        let value = (value: t).dogOrHuman
        switch value {
        | #Dog(value) =>
          (
            Obj.magic(
              (
                {
                  let barkVolume = {
                    let value = (value: t_dogOrHuman_Dog).barkVolume
                    value
                  }
                  and name = {
                    let value = (value: t_dogOrHuman_Dog).name
                    value
                  }
                  {__typename: "Dog", name, barkVolume}
                }: Raw.t_dogOrHuman_Dog
              ),
            ): Raw.t_dogOrHuman
          )
        | #Human(value) =>
          (
            Obj.magic(
              (
                {
                  let name = {
                    let value = (value: t_dogOrHuman_Human).name
                    value
                  }
                  {__typename: "Human", name}
                }: Raw.t_dogOrHuman_Human
              ),
            ): Raw.t_dogOrHuman
          )
        | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
        }
      }
      {dogOrHuman: dogOrHuman}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}

type named = {
  name: string,
  __typename: string,
}
module NamedQuery: {
  @@ocaml.warning("-32-30")
  module Raw: {
    type rec t_dogOrHuman_Dog = {
      name: string,
      __typename: string,
    }
    type rec t_dogOrHuman_Human = {
      name: string,
      __typename: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(named) | #Human(named)]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  @ocaml.doc(" The GraphQL query ") let query: string
  @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
  let parse: Raw.t => t
  @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
  let serialize: t => Raw.t
  let serializeVariables: unit => Raw.t_variables
  let makeVariables: unit => t_variables
  let makeDefaultVariables: unit => t_variables
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
} = {
  @@ocaml.warning("-32-30")
  module Raw = {
    type rec t_dogOrHuman_Dog = {
      name: string,
      __typename: string,
    }
    type rec t_dogOrHuman_Human = {
      name: string,
      __typename: string,
    }
    type rec t_dogOrHuman
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
  }
  type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(named) | #Human(named)]
  type rec t = {dogOrHuman: t_dogOrHuman}
  type rec t_variables = unit
  let query = "query   {
dogOrHuman  {
__typename
...on Dog   {
name  
__typename  
}

...on Human   {
name  
__typename  
}

}

}
"
  let parse = (
    (value): t => {
      dogOrHuman: {
        let value = (value: Raw.t).dogOrHuman
        let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
        (
          switch typename {
          | "Dog" =>
            #Dog({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Dog)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Dog).name
                    value
                  },
                  __typename: {
                    let value = (value: Raw.t_dogOrHuman_Dog).__typename
                    value
                  },
                }: named
              )
            })
          | "Human" =>
            #Human({
              let value = (Obj.magic(value): Raw.t_dogOrHuman_Human)
              (
                {
                  name: {
                    let value = (value: Raw.t_dogOrHuman_Human).name
                    value
                  },
                  __typename: {
                    let value = (value: Raw.t_dogOrHuman_Human).__typename
                    value
                  },
                }: named
              )
            })
          | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
          }: t_dogOrHuman
        )
      },
    }: Raw.t => t
  )
  let serialize = (
    (value): Raw.t => {
      let dogOrHuman = {
        let value = (value: t).dogOrHuman
        switch value {
        | #Dog(value) =>
          (
            Obj.magic(
              (
                {
                  let __typename = {
                    let value = (value: named).__typename
                    value
                  }
                  and name = {
                    let value = (value: named).name
                    value
                  }
                  {name, __typename: "Dog"}
                }: Raw.t_dogOrHuman_Dog
              ),
            ): Raw.t_dogOrHuman
          )
        | #Human(value) =>
          (
            Obj.magic(
              (
                {
                  let __typename = {
                    let value = (value: named).__typename
                    value
                  }
                  and name = {
                    let value = (value: named).name
                    value
                  }
                  {name, __typename: "Human"}
                }: Raw.t_dogOrHuman_Human
              ),
            ): Raw.t_dogOrHuman
          )
        | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
        }
      }
      {dogOrHuman: dogOrHuman}
    }: t => Raw.t
  )
  let serializeVariables = () => ()
  let makeVariables = () => ()
  let makeDefaultVariables = () => makeVariables()
  external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
  external toJson: Raw.t => Js.Json.t = "%identity"
  external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
}
module NamedSpread = {
  module DogFields: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t = {
        name: string,
        __typename: string,
      }
      type t_Dog = t
    }
    type rec t = named
    type t_Dog = named
    @ocaml.doc(" the GraphQL fragment ") let query: string
    @ocaml.doc(" Parse the raw JSON-compatible GraphQL data into ReasonML data types ")
    let parse: Raw.t => named
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data ")
    let serialize: named => Raw.t
    let verifyArgsAndParse: (~fragmentName: [#DogFields], Raw.t) => t
    let verifyName: [#DogFields] => unit
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t = {
        name: string,
        __typename: string,
      }
      type t_Dog = t
    }
    type rec t = named
    type t_Dog = named
    let query = "fragment DogFields on Dog   {
name  
__typename  
}
"
    let parse = (
      (value): named => {
        name: {
          let value = (value: Raw.t).name
          value
        },
        __typename: {
          let value = (value: Raw.t).__typename
          value
        },
      }: Raw.t => named
    )
    let serialize = (
      (value): Raw.t => {
        let __typename = {
          let value = (value: named).__typename
          value
        }
        and name = {
          let value = (value: named).name
          value
        }
        {name, __typename}
      }: named => Raw.t
    )
    let verifyArgsAndParse = (~fragmentName as _DogFields: [#DogFields], value: Raw.t) =>
      parse(value)
    let verifyName = x => switch x {
    | #DogFields => ()
    }
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
  }
  module DogOrHuman: {
    @@ocaml.warning("-32-30")
    module Raw: {
      type rec t_dogOrHuman
      type rec t = {dogOrHuman: t_dogOrHuman}
      type rec t_variables = unit
    }
    type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(DogFields.t_Dog)]
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
    @ocaml.doc(" The GraphQL query ") let query: string
    @ocaml.doc(" Parse the JSON-compatible GraphQL data to ReasonML data types ")
    let parse: Raw.t => t
    @ocaml.doc(" Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data ")
    let serialize: t => Raw.t
    let serializeVariables: unit => Raw.t_variables
    let makeVariables: unit => t_variables
    let makeDefaultVariables: unit => t_variables
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  } = {
    @@ocaml.warning("-32-30")
    module Raw = {
      type rec t_dogOrHuman
      type rec t = {dogOrHuman: t_dogOrHuman}
      type rec t_variables = unit
    }
    type rec t_dogOrHuman = [#FutureAddedValue(Js.Json.t) | #Dog(DogFields.t_Dog)]
    type rec t = {dogOrHuman: t_dogOrHuman}
    type rec t_variables = unit
    let query = \"^"(
      "query dogOrHuman  {
dogOrHuman  {
__typename
...on Dog   {
...DogFields   
}

}

}
",
      DogFields.query,
    )
    let parse = (
      (value): t => {
        dogOrHuman: {
          let value = (value: Raw.t).dogOrHuman
          let typename = (Obj.magic(Js.Dict.unsafeGet(Obj.magic(value), "__typename")): string)
          (
            switch typename {
            | "Dog" =>
              #Dog({
                let value = (Obj.magic(value): DogFields.Raw.t)

                DogFields.verifyArgsAndParse(~fragmentName=#DogFields, value)
              })
            | _ => #FutureAddedValue((Obj.magic(value): Js.Json.t))
            }: t_dogOrHuman
          )
        },
      }: Raw.t => t
    )
    let serialize = (
      (value): Raw.t => {
        let dogOrHuman = {
          let value = (value: t).dogOrHuman
          switch value {
          | #Dog(value) =>
            (
              Obj.magic(
                Graphql_ppx_runtime.assign_typename(
                  (Obj.magic(DogFields.serialize(value)): Js.Json.t),
                  "Dog",
                ),
              ): Raw.t_dogOrHuman
            )
          | #FutureAddedValue(value) => (Obj.magic(value): Raw.t_dogOrHuman)
          }
        }
        {dogOrHuman: dogOrHuman}
      }: t => Raw.t
    )
    let serializeVariables = () => ()
    let makeVariables = () => ()
    let makeDefaultVariables = () => makeVariables()
    external unsafe_fromJson: Js.Json.t => Raw.t = "%identity"
    external toJson: Raw.t => Js.Json.t = "%identity"
    external variablesToJson: Raw.t_variables => Js.Json.t = "%identity"
  }
}

