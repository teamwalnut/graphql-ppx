[@ocaml.ppx.context
  {
    tool_name: "ppx_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module GraphQL_PPX = {
  let deepMerge = (json1, _) => json1;
};
module QueryWithOnlyFragments: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AnonymousUser = {
    id: string,
    anonymousId: int,
  };
  type t_users_User_AdminUser = {
    id: string,
    name: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_users_User_AnonymousUser = {
    id: string,
    anonymousId: int,
  };
  type t_users_User_AdminUser = {
    id: string,
    name: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  let query = "query   {\nusers  {\n__typename\n...on AdminUser   {\nid  \nname  \n}\n\n...on AnonymousUser   {\nid  \nanonymousId  \n}\n\n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Graphql_ppx_runtime.Json.member("users", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              value => {
                let typename: string =
                  value
                  |> Graphql_ppx_runtime.Json.member("__typename")
                  |> Graphql_ppx_runtime.Json.to_string;
                (
                  switch (typename) {
                  | "AnonymousUser" =>
                    `AnonymousUser(
                      {
                        id: {
                          let value =
                            Graphql_ppx_runtime.Json.member("id", value);
                          Graphql_ppx_runtime.Json.to_string(value);
                        },
                        anonymousId: {
                          let value =
                            Graphql_ppx_runtime.Json.member(
                              "anonymousId",
                              value,
                            );
                          Graphql_ppx_runtime.Json.to_int(value);
                        },
                      }: t_users_User_AnonymousUser,
                    )
                  | "AdminUser" =>
                    `AdminUser(
                      {
                        id: {
                          let value =
                            Graphql_ppx_runtime.Json.member("id", value);
                          Graphql_ppx_runtime.Json.to_string(value);
                        },
                        name: {
                          let value =
                            Graphql_ppx_runtime.Json.member("name", value);
                          Graphql_ppx_runtime.Json.to_string(value);
                        },
                      }: t_users_User_AdminUser,
                    )
                  | _ => `UnspecifiedFragment(typename)
                  }: t_users_User
                );
              },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               switch (value) {
               | `AnonymousUser(value) =>
                 let anonymousId = {
                   let value = (value: t_users_User_AnonymousUser).anonymousId;
                   `Int(value);
                 }
                 and id = {
                   let value = (value: t_users_User_AnonymousUser).id;
                   `String(value);
                 };
                 `Assoc([
                   ("__typename", `String("AnonymousUser")),
                   ("id", id),
                   ("anonymousId", anonymousId),
                 ]);
               | `AdminUser(value) =>
                 let name = {
                   let value = (value: t_users_User_AdminUser).name;
                   `String(value);
                 }
                 and id = {
                   let value = (value: t_users_User_AdminUser).id;
                   `String(value);
                 };
                 `Assoc([
                   ("__typename", `String("AdminUser")),
                   ("id", id),
                   ("name", name),
                 ]);
               | `UnspecifiedFragment(_) => `Assoc([])
               }
             )
          |> Array.to_list,
        );
      };
      `Assoc([("users", users)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module QueryWithTypename: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t = {users: array(t_users_User)};
  type t_variables = unit;
  let query = "query   {\nusers  {\n__typename\n...on AdminUser   {\n__typename  \nid  \n}\n\n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Graphql_ppx_runtime.Json.member("users", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              value => {
                let typename: string =
                  value
                  |> Graphql_ppx_runtime.Json.member("__typename")
                  |> Graphql_ppx_runtime.Json.to_string;
                (
                  switch (typename) {
                  | "AdminUser" =>
                    `AdminUser(
                      {
                        __typename: {
                          let value =
                            Graphql_ppx_runtime.Json.member(
                              "__typename",
                              value,
                            );
                          Graphql_ppx_runtime.Json.to_string(value);
                        },
                        id: {
                          let value =
                            Graphql_ppx_runtime.Json.member("id", value);
                          Graphql_ppx_runtime.Json.to_string(value);
                        },
                      }: t_users_User_AdminUser,
                    )
                  | _ => `UnspecifiedFragment(typename)
                  }: t_users_User
                );
              },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               switch (value) {
               | `AdminUser(value) =>
                 let id = {
                   let value = (value: t_users_User_AdminUser).id;
                   `String(value);
                 }
                 and __typename = {
                   let value = (value: t_users_User_AdminUser).__typename;
                   `String(value);
                 };
                 `Assoc([
                   ("__typename", `String("AdminUser")),
                   ("id", id),
                 ]);
               | `UnspecifiedFragment(_) => `Assoc([])
               }
             )
          |> Array.to_list,
        );
      };
      `Assoc([("users", users)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module QueryWithMixedFragments: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AnonymousUser = {anonymousId: int};
  type t_users_User_AdminUser = {name: string};
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_users_User_AnonymousUser = {anonymousId: int};
  type t_users_User_AdminUser = {name: string};
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AnonymousUser(t_users_User_AnonymousUser)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = "query   {\nusers  {\n__typename\nid  \n...on AdminUser   {\nname  \n}\n\n...on AnonymousUser   {\nanonymousId  \n}\n\n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Graphql_ppx_runtime.Json.member("users", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              (value): t_users =>
                {
                  fragment: {
                    let typename: string =
                      value
                      |> Graphql_ppx_runtime.Json.member("__typename")
                      |> Graphql_ppx_runtime.Json.to_string;
                    (
                      switch (typename) {
                      | "AnonymousUser" =>
                        `AnonymousUser(
                          {
                            anonymousId: {
                              let value =
                                Graphql_ppx_runtime.Json.member(
                                  "anonymousId",
                                  value,
                                );
                              Graphql_ppx_runtime.Json.to_int(value);
                            },
                          }: t_users_User_AnonymousUser,
                        )
                      | "AdminUser" =>
                        `AdminUser(
                          {
                            name: {
                              let value =
                                Graphql_ppx_runtime.Json.member(
                                  "name",
                                  value,
                                );
                              Graphql_ppx_runtime.Json.to_string(value);
                            },
                          }: t_users_User_AdminUser,
                        )
                      | _ => `UnspecifiedFragment(typename)
                      }: t_users_User
                    );
                  },
                  id: {
                    let value = Graphql_ppx_runtime.Json.member("id", value);
                    Graphql_ppx_runtime.Json.to_string(value);
                  },
                },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               Array.fold_left(
                 (a, b) => Graphql_ppx_runtime.deepMerge(a, b),
                 {
                   let id = {
                     let value = (value: t_users).id;
                     `String(value);
                   };
                   {"id": id};
                 },
                 [|
                   {
                     let value = (value: t_users).fragment;
                     switch (value) {
                     | `AnonymousUser(value) =>
                       let anonymousId = {
                         let value =
                           (value: t_users_User_AnonymousUser).anonymousId;
                         `Int(value);
                       };
                       `Assoc([
                         ("__typename", `String("AnonymousUser")),
                         ("anonymousId", anonymousId),
                       ]);
                     | `AdminUser(value) =>
                       let name = {
                         let value = (value: t_users_User_AdminUser).name;
                         `String(value);
                       };
                       `Assoc([
                         ("__typename", `String("AdminUser")),
                         ("name", name),
                       ]);
                     | `UnspecifiedFragment(_) => `Assoc([])
                     };
                   },
                 |],
               )
             )
          |> Array.to_list,
        );
      };
      `Assoc([("users", users)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MixedQueryWithTypename: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    __typename: string,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_users_User_AdminUser = {
    __typename: string,
    id: string,
  };
  type t_users_User = [
    | `UnspecifiedFragment(string)
    | `AdminUser(t_users_User_AdminUser)
  ];
  type t_users = {
    fragment: t_users_User,
    __typename: string,
    id: string,
  };
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = "query   {\nusers  {\n__typename\nid  \n__typename  \n...on AdminUser   {\n__typename  \nid  \n}\n\n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Graphql_ppx_runtime.Json.member("users", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              (value): t_users =>
                {
                  fragment: {
                    let typename: string =
                      value
                      |> Graphql_ppx_runtime.Json.member("__typename")
                      |> Graphql_ppx_runtime.Json.to_string;
                    (
                      switch (typename) {
                      | "AdminUser" =>
                        `AdminUser(
                          {
                            __typename: {
                              let value =
                                Graphql_ppx_runtime.Json.member(
                                  "__typename",
                                  value,
                                );
                              Graphql_ppx_runtime.Json.to_string(value);
                            },
                            id: {
                              let value =
                                Graphql_ppx_runtime.Json.member("id", value);
                              Graphql_ppx_runtime.Json.to_string(value);
                            },
                          }: t_users_User_AdminUser,
                        )
                      | _ => `UnspecifiedFragment(typename)
                      }: t_users_User
                    );
                  },
                  __typename: {
                    let value =
                      Graphql_ppx_runtime.Json.member("__typename", value);
                    Graphql_ppx_runtime.Json.to_string(value);
                  },
                  id: {
                    let value = Graphql_ppx_runtime.Json.member("id", value);
                    Graphql_ppx_runtime.Json.to_string(value);
                  },
                },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               Array.fold_left(
                 (a, b) => Graphql_ppx_runtime.deepMerge(a, b),
                 {
                   let id = {
                     let value = (value: t_users).id;
                     `String(value);
                   }
                   and __typename = {
                     let value = (value: t_users).__typename;
                     `String(value);
                   };
                   {"__typename": __typename, "id": id};
                 },
                 [|
                   {
                     let value = (value: t_users).fragment;
                     switch (value) {
                     | `AdminUser(value) =>
                       let id = {
                         let value = (value: t_users_User_AdminUser).id;
                         `String(value);
                       }
                       and __typename = {
                         let value =
                           (value: t_users_User_AdminUser).__typename;
                         `String(value);
                       };
                       `Assoc([
                         ("__typename", `String("AdminUser")),
                         ("id", id),
                       ]);
                     | `UnspecifiedFragment(_) => `Assoc([])
                     };
                   },
                 |],
               )
             )
          |> Array.to_list,
        );
      };
      `Assoc([("users", users)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module QueryWithoutFragments: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_users = {id: string};
  type t = {users: array(t_users)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_users = {id: string};
  type t = {users: array(t_users)};
  type t_variables = unit;
  let query = "query   {\nusers  {\n__typename\nid  \n}\n\n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        users: {
          let value = Graphql_ppx_runtime.Json.member("users", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              (value): t_users =>
                {
                  id: {
                    let value = Graphql_ppx_runtime.Json.member("id", value);
                    Graphql_ppx_runtime.Json.to_string(value);
                  },
                },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let users = {
        let value = (value: t).users;
        `List(
          value
          |> Array.map(value =>
               let id = {
                 let value = (value: t_users).id;
                 `String(value);
               };
               `Assoc([("id", id)]);
             )
          |> Array.to_list,
        );
      };
      `Assoc([("users", users)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
