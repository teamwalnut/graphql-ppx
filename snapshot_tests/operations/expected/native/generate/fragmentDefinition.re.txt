[@ocaml.ppx.context
  {
    tool_name: "ppx_driver",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Graphql_ppx_runtime = {
  let deepMerge = (json1, _) => json1;
};
module ListFragment: {
  [@ocaml.warning "-32-30"];
  module Raw: {type t;};
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `ListFragment], Raw.t) => t;
  let verifyName: [ | `ListFragment] => unit;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query = "fragment ListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        ("nullableOfNullable", nullableOfNullable),
        ("nullableOfNonNullable", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (~fragmentName as _ListFragment: [ | `ListFragment], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `ListFragment => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};
module Another: {
  [@ocaml.warning "-32-30"];
  module Raw: {type t;};
  type t = {nullableOfNonNullable: option(array(string))};
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse: (~fragmentName: [ | `Another], Raw.t) => t;
  let verifyName: [ | `Another] => unit;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {nullableOfNonNullable: option(array(string))};
  type nonrec t_Lists = t;
  let query = "fragment Another on Lists   {\nnullableOfNonNullable  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      };
      `Assoc([("nullableOfNonNullable", nullableOfNonNullable)]);
    };
  let verifyArgsAndParse =
      (~fragmentName as _Another: [ | `Another], value: Raw.t) =>
    parse(value);
  let verifyName =
    fun
    | `Another => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};
module FragmentWithArgs: {
  [@ocaml.warning "-32-30"];
  module Raw: {type t;};
  type t = {listWithArg: option(array(option(string)))};
  type nonrec t_Lists = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse:
    (~arg1: [ | `String], ~fragmentName: [ | `FragmentWithArgs], Raw.t) => t;
  let verifyName: [ | `FragmentWithArgs] => unit;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {listWithArg: option(array(option(string)))};
  type nonrec t_Lists = t;
  let query = "fragment FragmentWithArgs on Lists   {\nlistWithArg(arg1: $arg1)  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        listWithArg: {
          let value = Graphql_ppx_runtime.Json.member("listWithArg", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let listWithArg = {
        let value = (value: t).listWithArg;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([("listWithArg", listWithArg)]);
    };
  let verifyArgsAndParse =
      (
        ~arg1 as _arg1: [ | `String],
        ~fragmentName as _FragmentWithArgs: [ | `FragmentWithArgs],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `FragmentWithArgs => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};

module InlineListFragment = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query = "fragment InlineListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        ("nullableOfNullable", nullableOfNullable),
        ("nullableOfNonNullable", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (
        ~fragmentName as _InlineListFragment: [ | `InlineListFragment],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `InlineListFragment => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};

module Wrapper = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
  };
  type t = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
  };
  type nonrec t_Lists = t;
  let query = "fragment InlineListFragment on Lists   {\nnullableOfNullable  \nnullableOfNonNullable  \n}\n";
  let parse: Raw.t => t =
    (value) => (
      {
        nullableOfNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value =>
                    switch (value) {
                    | `Null => None
                    | value =>
                      Some(Graphql_ppx_runtime.Json.to_string(value))
                    },
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
        nullableOfNonNullable: {
          let value =
            Graphql_ppx_runtime.Json.member("nullableOfNonNullable", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              switch (value) {
              | `List(json_list) =>
                List.map(
                  value => Graphql_ppx_runtime.Json.to_string(value),
                  json_list,
                )
                |> Array.of_list
              | _ => [||]
              },
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nullableOfNonNullable = {
        let value = (value: t).nullableOfNonNullable;
        switch (value) {
        | Some(value) =>
          `List(value |> Array.map(value => `String(value)) |> Array.to_list)
        | None => `Null
        };
      }
      and nullableOfNullable = {
        let value = (value: t).nullableOfNullable;
        switch (value) {
        | Some(value) =>
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          )
        | None => `Null
        };
      };
      `Assoc([
        ("nullableOfNullable", nullableOfNullable),
        ("nullableOfNonNullable", nullableOfNonNullable),
      ]);
    };
  let verifyArgsAndParse =
      (
        ~fragmentName as _InlineListFragment: [ | `InlineListFragment],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `InlineListFragment => ();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
};
module MyQuery: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_l2 = {
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  };
  type t_l3 = {
    nullableOfNullable: option(array(option(string))),
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  };
  type t_l4 = {
    nullableOfNullable: option(array(option(string))),
    inlineListFragment: InlineListFragment.t_Lists,
  };
  type t = {
    l1: ListFragment.t_Lists,
    l2: t_l2,
    l3: t_l3,
    l4: t_l4,
    l5: FragmentWithArgs.t_Lists,
  };
  type t_variables = {arg1: option(string)};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let makeVariables: (~arg1: string=?, unit) => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t_l2 = {
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  };
  type t_l3 = {
    nullableOfNullable: option(array(option(string))),
    frag1: ListFragment.t_Lists,
    frag2: ListFragment.t_Lists,
  };
  type t_l4 = {
    nullableOfNullable: option(array(option(string))),
    inlineListFragment: InlineListFragment.t_Lists,
  };
  type t = {
    l1: ListFragment.t_Lists,
    l2: t_l2,
    l3: t_l3,
    l4: t_l4,
    l5: FragmentWithArgs.t_Lists,
  };
  type t_variables = {arg1: option(string)};
  let query =
    (
      (
        "query MyQuery($arg1: String)  {\nl1: lists  {\n...ListFragment   \n}\n\nl2: lists  {\n...ListFragment   \n...ListFragment   \n}\n\nl3: lists  {\nnullableOfNullable  \n...ListFragment   \n...ListFragment   \n}\n\nl4: lists  {\nnullableOfNullable  \n...InlineListFragment   \n}\n\nl5: lists  {\n...FragmentWithArgs   \n}\n\n}\n"
        ++ FragmentWithArgs.query
      )
      ++ InlineListFragment.query
    )
    ++ ListFragment.query;
  let parse: Raw.t => t =
    (value) => (
      {
        l1: {
          let value = Graphql_ppx_runtime.Json.member("l1", value);

          ListFragment.verifyArgsAndParse(
            ~fragmentName=`ListFragment,
            ListFragment.unsafe_fromJson(value),
          );
        },
        l2: {
          let value = Graphql_ppx_runtime.Json.member("l2", value);
          (
            {
              frag1:
                ListFragment.verifyArgsAndParse(
                  ~fragmentName=`ListFragment,
                  ListFragment.unsafe_fromJson(value),
                ),
              frag2:
                ListFragment.verifyArgsAndParse(
                  ~fragmentName=`ListFragment,
                  ListFragment.unsafe_fromJson(value),
                ),
            }: t_l2
          );
        },
        l3: {
          let value = Graphql_ppx_runtime.Json.member("l3", value);
          (
            {
              nullableOfNullable: {
                let value =
                  Graphql_ppx_runtime.Json.member(
                    "nullableOfNullable",
                    value,
                  );
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    switch (value) {
                    | `List(json_list) =>
                      List.map(
                        value =>
                          switch (value) {
                          | `Null => None
                          | value =>
                            Some(Graphql_ppx_runtime.Json.to_string(value))
                          },
                        json_list,
                      )
                      |> Array.of_list
                    | _ => [||]
                    },
                  )
                };
              },
              frag1:
                ListFragment.verifyArgsAndParse(
                  ~fragmentName=`ListFragment,
                  ListFragment.unsafe_fromJson(value),
                ),
              frag2:
                ListFragment.verifyArgsAndParse(
                  ~fragmentName=`ListFragment,
                  ListFragment.unsafe_fromJson(value),
                ),
            }: t_l3
          );
        },
        l4: {
          let value = Graphql_ppx_runtime.Json.member("l4", value);
          (
            {
              nullableOfNullable: {
                let value =
                  Graphql_ppx_runtime.Json.member(
                    "nullableOfNullable",
                    value,
                  );
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    switch (value) {
                    | `List(json_list) =>
                      List.map(
                        value =>
                          switch (value) {
                          | `Null => None
                          | value =>
                            Some(Graphql_ppx_runtime.Json.to_string(value))
                          },
                        json_list,
                      )
                      |> Array.of_list
                    | _ => [||]
                    },
                  )
                };
              },
              inlineListFragment:
                InlineListFragment.verifyArgsAndParse(
                  ~fragmentName=`InlineListFragment,
                  InlineListFragment.unsafe_fromJson(value),
                ),
            }: t_l4
          );
        },
        l5: {
          let value = Graphql_ppx_runtime.Json.member("l5", value);

          FragmentWithArgs.verifyArgsAndParse(
            ~arg1=`String,
            ~fragmentName=`FragmentWithArgs,
            FragmentWithArgs.unsafe_fromJson(value),
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let l5 = {
        let value = (value: t).l5;
        FragmentWithArgs.toJson(FragmentWithArgs.serialize(value));
      }
      and l4 = {
        let value = (value: t).l4;
        Array.fold_left(
          Graphql_ppx_runtime.deepMerge,
          {
            let nullableOfNullable = {
              let value = (value: t_l4).nullableOfNullable;
              switch (value) {
              | Some(value) =>
                `List(
                  value
                  |> Array.map(value =>
                       switch (value) {
                       | Some(value) => `String(value)
                       | None => `Null
                       }
                     )
                  |> Array.to_list,
                )
              | None => `Null
              };
            };
            {"nullableOfNullable": nullableOfNullable};
          },
          [|
            InlineListFragment.toJson(
              InlineListFragment.serialize((value: t_l4).inlineListFragment),
            ),
          |],
        );
      }
      and l3 = {
        let value = (value: t).l3;
        Array.fold_left(
          Graphql_ppx_runtime.deepMerge,
          {
            let nullableOfNullable = {
              let value = (value: t_l3).nullableOfNullable;
              switch (value) {
              | Some(value) =>
                `List(
                  value
                  |> Array.map(value =>
                       switch (value) {
                       | Some(value) => `String(value)
                       | None => `Null
                       }
                     )
                  |> Array.to_list,
                )
              | None => `Null
              };
            };
            {"nullableOfNullable": nullableOfNullable};
          },
          [|
            ListFragment.toJson(ListFragment.serialize((value: t_l3).frag1)),
            ListFragment.toJson(ListFragment.serialize((value: t_l3).frag2)),
          |],
        );
      }
      and l2 = {
        let value = (value: t).l2;
        Array.fold_left(
          Graphql_ppx_runtime.deepMerge,
          `Assoc([]),
          [|
            ListFragment.toJson(ListFragment.serialize((value: t_l2).frag1)),
            ListFragment.toJson(ListFragment.serialize((value: t_l2).frag2)),
          |],
        );
      }
      and l1 = {
        let value = (value: t).l1;
        ListFragment.toJson(ListFragment.serialize(value));
      };
      `Assoc([
        ("l1", l1),
        ("l2", l2),
        ("l3", l3),
        ("l4", l4),
        ("l5", l5),
      ]);
    };
  let serializeVariables: t_variables => Raw.t_variables =
    inp =>
      `Assoc([
        (
          "arg1",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables).arg1,
          ),
        ),
      ]);
  let makeVariables = (~arg1=?, ()): t_variables => {arg1: arg1};
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
module MyQuery2: {
  [@ocaml.warning "-32-30"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
} = {
  [@ocaml.warning "-32-30"];
  module Raw = {
    type t = Graphql_ppx_runtime.Json.t;
    type t_variables = Graphql_ppx_runtime.Json.t;
  };
  type t = {lists: ListFragment.t_Lists};
  type t_variables = unit;
  let query =
    "query   {\nlists  {\n...ListFragment   \n}\n\n}\n" ++ ListFragment.query;
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Graphql_ppx_runtime.Json.member("lists", value);

          ListFragment.verifyArgsAndParse(
            ~fragmentName=`ListFragment,
            ListFragment.unsafe_fromJson(value),
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        ListFragment.toJson(ListFragment.serialize(value));
      };
      `Assoc([("lists", lists)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Graphql_ppx_runtime.Json.t => Raw.t = "%identity";
  external toJson: Raw.t => Graphql_ppx_runtime.Json.t = "%identity";
  external variablesToJson: Raw.t_variables => Graphql_ppx_runtime.Json.t =
    "%identity";
};
