Generate Native › pokedexApolloMode.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_pokemon = {
    id: string,
    name: option(string),
  };
  type t = {pokemon: option(t_pokemon)};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_pokemon = {
    id: string,
    name: option(string),
  };
  type t = {pokemon: option(t_pokemon)};
  type t_variables = unit;
  let query = \"query   {\\npokemon(name: \\\"Pikachu\\\")  {\\nid  \\nname  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        pokemon: {
          let value = Yojson.Basic.Util.member(\"pokemon\", value);
          switch (value) {
          | `Null => None
          | value =>
            Some(
              {
                id: {
                  let value = Yojson.Basic.Util.member(\"id\", value);
                  Yojson.Basic.Util.to_string(value);
                },
                name: {
                  let value = Yojson.Basic.Util.member(\"name\", value);
                  switch (value) {
                  | `Null => None
                  | value => Some(Yojson.Basic.Util.to_string(value))
                  };
                },
              }: t_pokemon,
            )
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let pokemon = {
        let value = (value: t).pokemon;
        switch (value) {
        | Some(value) =>
          let name = {
            let value = (value: t_pokemon).name;
            switch (value) {
            | Some(value) => `String(value)
            | None => `Null
            };
          }
          and id = {
            let value = (value: t_pokemon).id;
            `String(value);
          };
          `Assoc([(\"id\", id), (\"name\", name)]);
        | None => `Null
        };
      };
      `Assoc([(\"pokemon\", pokemon)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

