Generate Native › record.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
type scalars = {
  __typename: string,
  string,
  int,
};

type dog = {
  __typename: string,
  name: string,
  barkVolume: float,
};

type oneFieldQuery = {nullableString: option(string)};
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {variousScalars: scalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t = {variousScalars: scalars};
  type t_variables = unit;
  let query = \"query   {\\nvariousScalars  {\\n__typename  \\nstring  \\nint  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.Util.member(\"variousScalars\", value);
          (
            {
              __typename: {
                let value = Yojson.Basic.Util.member(\"__typename\", value);
                Yojson.Basic.Util.to_string(value);
              },
              string: {
                let value = Yojson.Basic.Util.member(\"string\", value);
                Yojson.Basic.Util.to_string(value);
              },
              int: {
                let value = Yojson.Basic.Util.member(\"int\", value);
                Yojson.Basic.Util.to_int(value);
              },
            }: scalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let int = {
          let value = (value: scalars).int;
          `Int(value);
        }
        and string = {
          let value = (value: scalars).string;
          `String(value);
        }
        and __typename = {
          let value = (value: scalars).__typename;
          `String(value);
        };
        `Assoc([
          (\"__typename\", __typename),
          (\"string\", string),
          (\"int\", int),
        ]);
      };
      `Assoc([(\"variousScalars\", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module OneFieldQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {nullableString: option(string)};
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_variousScalars = {nullableString: option(string)};
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query = \"query   {\\nvariousScalars  {\\nnullableString  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.Util.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.Util.member(\"nullableString\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_string(value))
                };
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([(\"nullableString\", nullableString)]);
      };
      `Assoc([(\"variousScalars\", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module OneFieldQueryWithTypename: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_variousScalars = {
    __typename: string,
    nullableString: option(string),
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query = \"query   {\\nvariousScalars  {\\n__typename  \\nnullableString  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.Util.member(\"variousScalars\", value);
          (
            {
              __typename: {
                let value = Yojson.Basic.Util.member(\"__typename\", value);
                Yojson.Basic.Util.to_string(value);
              },
              nullableString: {
                let value = Yojson.Basic.Util.member(\"nullableString\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_string(value))
                };
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and __typename = {
          let value = (value: t_variousScalars).__typename;
          `String(value);
        };
        `Assoc([
          (\"__typename\", __typename),
          (\"nullableString\", nullableString),
        ]);
      };
      `Assoc([(\"variousScalars\", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module ExternalFragmentQuery = {
  module Fragment: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {type t;};
    type t = {
      string,
      int,
    };
    type nonrec t_VariousScalars = t;
    /** the GraphQL fragment */
    let query: string;
    /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
    let serialize: t => Raw.t;
    let verifyArgsAndParse: (~fragmentName: [ | `Fragment], Raw.t) => t;
    let verifyName: [ | `Fragment] => unit;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
    };
    type t = {
      string,
      int,
    };
    type nonrec t_VariousScalars = t;
    let query = \"fragment Fragment on VariousScalars   {\\nstring  \\nint  \\n}\\n\";
    let parse: Raw.t => t =
      (value) => (
        {
          string: {
            let value = Yojson.Basic.Util.member(\"string\", value);
            Yojson.Basic.Util.to_string(value);
          },
          int: {
            let value = Yojson.Basic.Util.member(\"int\", value);
            Yojson.Basic.Util.to_int(value);
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let int = {
          let value = (value: t).int;
          `Int(value);
        }
        and string = {
          let value = (value: t).string;
          `String(value);
        };
        `Assoc([(\"string\", string), (\"int\", int)]);
      };
    let verifyArgsAndParse =
        (~fragmentName as _Fragment: [ | `Fragment], value: Raw.t) =>
      parse(value);
    let verifyName =
      fun
      | `Fragment => ();
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  };
  module Untitled1: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t = {variousScalars: Fragment.t_VariousScalars};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
      type t_variables = Yojson.Basic.t;
    };
    type t = {variousScalars: Fragment.t_VariousScalars};
    type t_variables = unit;
    let query =
      \"query   {\\nvariousScalars  {\\n...Fragment   \\n}\\n\\n}\\n\"
      ++ Fragment.query;
    let parse: Raw.t => t =
      (value) => (
        {
          variousScalars: {
            let value = Yojson.Basic.Util.member(\"variousScalars\", value);

            Fragment.verifyArgsAndParse(
              ~fragmentName=`Fragment,
              Fragment.unsafe_fromJson(value),
            );
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let variousScalars = {
          let value = (value: t).variousScalars;
          Fragment.toJson(Fragment.serialize(value));
        };
        `Assoc([(\"variousScalars\", variousScalars)]);
      };
    let serializeVariables = () => `Null;
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
};
module InlineFragmentQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  };
  type t_dogOrHuman = [
    | `FutureAddedValue(Yojson.Basic.t)
    | `Dog(t_dogOrHuman_Dog)
  ];
  type t = {dogOrHuman: t_dogOrHuman};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_dogOrHuman_Dog = {
    __typename: string,
    name: string,
    barkVolume: float,
  };
  type t_dogOrHuman = [
    | `FutureAddedValue(Yojson.Basic.t)
    | `Dog(t_dogOrHuman_Dog)
  ];
  type t = {dogOrHuman: t_dogOrHuman};
  type t_variables = unit;
  let query = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        dogOrHuman: {
          let value = Yojson.Basic.Util.member(\"dogOrHuman\", value);
          let typename: string =
            value
            |> Yojson.Basic.Util.member(\"__typename\")
            |> Yojson.Basic.Util.to_string;
          (
            switch (typename) {
            | \"Dog\" =>
              `Dog(
                {
                  __typename: {
                    let value = Yojson.Basic.Util.member(\"__typename\", value);
                    Yojson.Basic.Util.to_string(value);
                  },
                  name: {
                    let value = Yojson.Basic.Util.member(\"name\", value);
                    Yojson.Basic.Util.to_string(value);
                  },
                  barkVolume: {
                    let value = Yojson.Basic.Util.member(\"barkVolume\", value);
                    Yojson.Basic.Util.to_float(value);
                  },
                }: t_dogOrHuman_Dog,
              )
            | _ => `FutureAddedValue(value)
            }: t_dogOrHuman
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let dogOrHuman = {
        let value = (value: t).dogOrHuman;
        switch (value) {
        | `Dog(value) =>
          let barkVolume = {
            let value = (value: t_dogOrHuman_Dog).barkVolume;
            `Float(value);
          }
          and name = {
            let value = (value: t_dogOrHuman_Dog).name;
            `String(value);
          }
          and __typename = {
            let value = (value: t_dogOrHuman_Dog).__typename;
            `String(value);
          };
          `Assoc([
            (\"__typename\", `String(\"Dog\")),
            (\"name\", name),
            (\"barkVolume\", barkVolume),
          ]);
        | `FutureAddedValue(value) => value
        };
      };
      `Assoc([(\"dogOrHuman\", dogOrHuman)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module UnionExternalFragmentQuery = {
  module DogFragment: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {type t;};
    type t = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type nonrec t_Dog = t;
    /** the GraphQL fragment */
    let query: string;
    /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
    let serialize: t => Raw.t;
    let verifyArgsAndParse: (~fragmentName: [ | `DogFragment], Raw.t) => t;
    let verifyName: [ | `DogFragment] => unit;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
    };
    type t = {
      __typename: string,
      name: string,
      barkVolume: float,
    };
    type nonrec t_Dog = t;
    let query = \"fragment DogFragment on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\";
    let parse: Raw.t => t =
      (value) => (
        {
          __typename: {
            let value = Yojson.Basic.Util.member(\"__typename\", value);
            Yojson.Basic.Util.to_string(value);
          },
          name: {
            let value = Yojson.Basic.Util.member(\"name\", value);
            Yojson.Basic.Util.to_string(value);
          },
          barkVolume: {
            let value = Yojson.Basic.Util.member(\"barkVolume\", value);
            Yojson.Basic.Util.to_float(value);
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let barkVolume = {
          let value = (value: t).barkVolume;
          `Float(value);
        }
        and name = {
          let value = (value: t).name;
          `String(value);
        }
        and __typename = {
          let value = (value: t).__typename;
          `String(value);
        };
        `Assoc([
          (\"__typename\", __typename),
          (\"name\", name),
          (\"barkVolume\", barkVolume),
        ]);
      };
    let verifyArgsAndParse =
        (~fragmentName as _DogFragment: [ | `DogFragment], value: Raw.t) =>
      parse(value);
    let verifyName =
      fun
      | `DogFragment => ();
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  };
  module Untitled1: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t_dogOrHuman = [
      | `FutureAddedValue(Yojson.Basic.t)
      | `Dog(DogFragment.t_Dog)
    ];
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
      type t_variables = Yojson.Basic.t;
    };
    type t_dogOrHuman = [
      | `FutureAddedValue(Yojson.Basic.t)
      | `Dog(DogFragment.t_Dog)
    ];
    type t = {dogOrHuman: t_dogOrHuman};
    type t_variables = unit;
    let query =
      \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n...DogFragment   \\n}\\n\\n}\\n\\n}\\n\"
      ++ DogFragment.query;
    let parse: Raw.t => t =
      (value) => (
        {
          dogOrHuman: {
            let value = Yojson.Basic.Util.member(\"dogOrHuman\", value);
            let typename: string =
              value
              |> Yojson.Basic.Util.member(\"__typename\")
              |> Yojson.Basic.Util.to_string;
            (
              switch (typename) {
              | \"Dog\" =>
                `Dog(
                  DogFragment.verifyArgsAndParse(
                    ~fragmentName=`DogFragment,
                    DogFragment.unsafe_fromJson(value),
                  ),
                )
              | _ => `FutureAddedValue(value)
              }: t_dogOrHuman
            );
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let dogOrHuman = {
          let value = (value: t).dogOrHuman;
          switch (value) {
          | `Dog(value) => DogFragment.toJson(DogFragment.serialize(value))
          | `FutureAddedValue(value) => value
          };
        };
        `Assoc([(\"dogOrHuman\", dogOrHuman)]);
      };
    let serializeVariables = () => `Null;
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
};

