Generate Native › recursiveInput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables
    and t_variables_RecursiveInput;
  };
  type t = {recursiveInput: string};
  type t_variables = {arg: t_variables_RecursiveInput}
  and t_variables_RecursiveInput = {
    otherField: option(string),
    inner: option(t_variables_RecursiveInput),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
  };
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectRecursiveInput:
    t_variables_RecursiveInput => Raw.t_variables_RecursiveInput;
  let makeVariables: (~arg: t_variables_RecursiveInput, unit) => t_variables;
  let makeInputObjectRecursiveInput:
    (
      ~otherField: string=?,
      ~inner: t_variables_RecursiveInput=?,
      ~enum: [ | `FIRST | `SECOND | `THIRD]=?,
      unit
    ) =>
    t_variables_RecursiveInput;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t
    and t_variables_RecursiveInput = Yojson.Basic.t;
  };
  type t = {recursiveInput: string};
  type t_variables = {arg: t_variables_RecursiveInput}
  and t_variables_RecursiveInput = {
    otherField: option(string),
    inner: option(t_variables_RecursiveInput),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
  };
  let query = \"query ($arg: RecursiveInput!)  {\\nrecursiveInput(arg: $arg)  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        recursiveInput: {
          let value = Yojson.Basic.Util.member(\"recursiveInput\", value);
          Yojson.Basic.Util.to_string(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let recursiveInput = {
        let value = (value: t).recursiveInput;
        `String(value);
      };
      `Assoc([(\"recursiveInput\", recursiveInput)]);
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp =>
      `Assoc([
        (
          \"arg\",
          (a => serializeInputObjectRecursiveInput(a))(
            (inp: t_variables).arg,
          ),
        ),
      ])
  and serializeInputObjectRecursiveInput:
    t_variables_RecursiveInput => Raw.t_variables_RecursiveInput =
    inp =>
      `Assoc([
        (
          \"otherField\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables_RecursiveInput).otherField,
          ),
        ),
        (
          \"inner\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => serializeInputObjectRecursiveInput(a))(b)
              }
          )(
            (inp: t_variables_RecursiveInput).inner,
          ),
        ),
        (
          \"enum\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    switch (a) {
                    | `FIRST => `String(\"FIRST\")
                    | `SECOND => `String(\"SECOND\")
                    | `THIRD => `String(\"THIRD\")
                    }
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_RecursiveInput).enum,
          ),
        ),
      ]);
  let makeVariables = (~arg, ()): t_variables => {arg: arg}
  and makeInputObjectRecursiveInput =
      (~otherField=?, ~inner=?, ~enum=?, ()): t_variables_RecursiveInput => {
    otherField,
    inner,
    enum,
  };
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module Test: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables
    and t_variables_problem_input
    and t_variables_this_will_be_duplicated
    and t_variables_nested_type;
  };
  type t = {recursiveRepro: bool};
  type t_variables = {input: t_variables_problem_input}
  and t_variables_problem_input = {
    the_problem: option(t_variables_this_will_be_duplicated),
    b: option(t_variables_nested_type),
  }
  and t_variables_this_will_be_duplicated = {id: string}
  and t_variables_nested_type = {
    the_problem: option(t_variables_this_will_be_duplicated),
  };
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectproblem_input:
    t_variables_problem_input => Raw.t_variables_problem_input;
  let serializeInputObjectthis_will_be_duplicated:
    t_variables_this_will_be_duplicated =>
    Raw.t_variables_this_will_be_duplicated;
  let serializeInputObjectnested_type:
    t_variables_nested_type => Raw.t_variables_nested_type;
  let makeVariables: (~input: t_variables_problem_input, unit) => t_variables;
  let makeInputObjectproblem_input:
    (
      ~the_problem: t_variables_this_will_be_duplicated=?,
      ~b: t_variables_nested_type=?,
      unit
    ) =>
    t_variables_problem_input;
  let makeInputObjectthis_will_be_duplicated:
    (~id: string, unit) => t_variables_this_will_be_duplicated;
  let makeInputObjectnested_type:
    (~the_problem: t_variables_this_will_be_duplicated=?, unit) =>
    t_variables_nested_type;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t
    and t_variables_problem_input = Yojson.Basic.t
    and t_variables_this_will_be_duplicated = Yojson.Basic.t
    and t_variables_nested_type = Yojson.Basic.t;
  };
  type t = {recursiveRepro: bool};
  type t_variables = {input: t_variables_problem_input}
  and t_variables_problem_input = {
    the_problem: option(t_variables_this_will_be_duplicated),
    b: option(t_variables_nested_type),
  }
  and t_variables_this_will_be_duplicated = {id: string}
  and t_variables_nested_type = {
    the_problem: option(t_variables_this_will_be_duplicated),
  };
  let query = \"query Test($input: problem_input!)  {\\nrecursiveRepro(input: $input)  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        recursiveRepro: {
          let value = Yojson.Basic.Util.member(\"recursiveRepro\", value);
          Yojson.Basic.Util.to_bool(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let recursiveRepro = {
        let value = (value: t).recursiveRepro;
        `Bool(value);
      };
      `Assoc([(\"recursiveRepro\", recursiveRepro)]);
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp =>
      `Assoc([
        (
          \"input\",
          (a => serializeInputObjectproblem_input(a))(
            (inp: t_variables).input,
          ),
        ),
      ])
  and serializeInputObjectproblem_input:
    t_variables_problem_input => Raw.t_variables_problem_input =
    inp =>
      `Assoc([
        (
          \"the_problem\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (a => serializeInputObjectthis_will_be_duplicated(a))(b)
              }
          )(
            (inp: t_variables_problem_input).the_problem,
          ),
        ),
        (
          \"b\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => serializeInputObjectnested_type(a))(b)
              }
          )(
            (inp: t_variables_problem_input).b,
          ),
        ),
      ])
  and serializeInputObjectthis_will_be_duplicated:
    t_variables_this_will_be_duplicated =>
    Raw.t_variables_this_will_be_duplicated =
    inp =>
      `Assoc([
        (
          \"id\",
          (a => `String(a))((inp: t_variables_this_will_be_duplicated).id),
        ),
      ])
  and serializeInputObjectnested_type:
    t_variables_nested_type => Raw.t_variables_nested_type =
    inp =>
      `Assoc([
        (
          \"the_problem\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (a => serializeInputObjectthis_will_be_duplicated(a))(b)
              }
          )(
            (inp: t_variables_nested_type).the_problem,
          ),
        ),
      ]);
  let makeVariables = (~input, ()): t_variables => {input: input}
  and makeInputObjectproblem_input =
      (~the_problem=?, ~b=?, ()): t_variables_problem_input => {
    the_problem,
    b,
  }
  and makeInputObjectthis_will_be_duplicated =
      (~id, ()): t_variables_this_will_be_duplicated => {
    id: id,
  }
  and makeInputObjectnested_type =
      (~the_problem=?, ()): t_variables_nested_type => {
    the_problem: the_problem,
  };
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

