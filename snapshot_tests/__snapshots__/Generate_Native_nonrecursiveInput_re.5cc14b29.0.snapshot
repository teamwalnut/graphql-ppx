Generate Native › nonrecursiveInput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables
    and t_variables_NonrecursiveInput
    and t_variables_EmbeddedInput;
  };
  type t = {nonrecursiveInput: string};
  type t_variables = {arg: t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option(array(option(string))),
    field: option(string),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
    embeddedInput: option(array(option(t_variables_EmbeddedInput))),
    custom: option(Yojson.Basic.t),
  }
  and t_variables_EmbeddedInput = {field: option(string)};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput;
  let serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput;
  let makeVariables:
    (~arg: t_variables_NonrecursiveInput, unit) => t_variables;
  let makeInputObjectNonrecursiveInput:
    (
      ~nonNullableField: string,
      ~nullableArray: array(option(string))=?,
      ~field: string=?,
      ~enum: [ | `FIRST | `SECOND | `THIRD]=?,
      ~embeddedInput: array(option(t_variables_EmbeddedInput))=?,
      ~custom: Yojson.Basic.t=?,
      unit
    ) =>
    t_variables_NonrecursiveInput;
  let makeInputObjectEmbeddedInput:
    (~field: string=?, unit) => t_variables_EmbeddedInput;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t
    and t_variables_NonrecursiveInput = Yojson.Basic.t
    and t_variables_EmbeddedInput = Yojson.Basic.t;
  };
  type t = {nonrecursiveInput: string};
  type t_variables = {arg: t_variables_NonrecursiveInput}
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option(array(option(string))),
    field: option(string),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
    embeddedInput: option(array(option(t_variables_EmbeddedInput))),
    custom: option(Yojson.Basic.t),
  }
  and t_variables_EmbeddedInput = {field: option(string)};
  let query = \"query ($arg: NonrecursiveInput!)  {\\nnonrecursiveInput(arg: $arg)  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        nonrecursiveInput: {
          let value = Yojson.Basic.Util.member(\"nonrecursiveInput\", value);
          Yojson.Basic.Util.to_string(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nonrecursiveInput = {
        let value = (value: t).nonrecursiveInput;
        `String(value);
      };
      `Assoc([(\"nonrecursiveInput\", nonrecursiveInput)]);
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp =>
      `Assoc([
        (
          \"arg\",
          (a => serializeInputObjectNonrecursiveInput(a))(
            (inp: t_variables).arg,
          ),
        ),
      ])
  and serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput =
    inp =>
      `Assoc([
        (
          \"nonNullableField\",
          (a => `String(a))(
            (inp: t_variables_NonrecursiveInput).nonNullableField,
          ),
        ),
        (
          \"nullableArray\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    `List(
                      Array.map(
                        b =>
                          (
                            a =>
                              switch (a) {
                              | None => `Null
                              | Some(b) => (a => `String(a))(b)
                              }
                          )(
                            b,
                          ),
                        a,
                      )
                      |> Array.to_list,
                    )
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).nullableArray,
          ),
        ),
        (
          \"field\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables_NonrecursiveInput).field,
          ),
        ),
        (
          \"enum\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    switch (a) {
                    | `FIRST => `String(\"FIRST\")
                    | `SECOND => `String(\"SECOND\")
                    | `THIRD => `String(\"THIRD\")
                    }
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).enum,
          ),
        ),
        (
          \"embeddedInput\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    `List(
                      Array.map(
                        b =>
                          (
                            a =>
                              switch (a) {
                              | None => `Null
                              | Some(b) =>
                                (a => serializeInputObjectEmbeddedInput(a))(
                                  b,
                                )
                              }
                          )(
                            b,
                          ),
                        a,
                      )
                      |> Array.to_list,
                    )
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).embeddedInput,
          ),
        ),
        (
          \"custom\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => a)(b)
              }
          )(
            (inp: t_variables_NonrecursiveInput).custom,
          ),
        ),
      ])
  and serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput =
    inp =>
      `Assoc([
        (
          \"field\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables_EmbeddedInput).field,
          ),
        ),
      ]);
  let makeVariables = (~arg, ()): t_variables => {arg: arg}
  and makeInputObjectNonrecursiveInput =
      (
        ~nonNullableField,
        ~nullableArray=?,
        ~field=?,
        ~enum=?,
        ~embeddedInput=?,
        ~custom=?,
        (),
      )
      : t_variables_NonrecursiveInput => {
    nonNullableField,
    nullableArray,
    field,
    enum,
    embeddedInput,
    custom,
  }
  and makeInputObjectEmbeddedInput = (~field=?, ()): t_variables_EmbeddedInput => {
    field: field,
  };
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MyQuery2: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables
    and t_variables_NonrecursiveInput
    and t_variables_EmbeddedInput;
  };
  type t = {
    scalarsInput: string,
    more: string,
  };
  type t_variables = {
    arg: t_variables_NonrecursiveInput,
    arg2: t_variables_NonrecursiveInput,
  }
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option(array(option(string))),
    field: option(string),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
    embeddedInput: option(array(option(t_variables_EmbeddedInput))),
    custom: option(Yojson.Basic.t),
  }
  and t_variables_EmbeddedInput = {field: option(string)};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput;
  let serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput;
  let makeVariables:
    (
      ~arg: t_variables_NonrecursiveInput,
      ~arg2: t_variables_NonrecursiveInput,
      unit
    ) =>
    t_variables;
  let makeInputObjectNonrecursiveInput:
    (
      ~nonNullableField: string,
      ~nullableArray: array(option(string))=?,
      ~field: string=?,
      ~enum: [ | `FIRST | `SECOND | `THIRD]=?,
      ~embeddedInput: array(option(t_variables_EmbeddedInput))=?,
      ~custom: Yojson.Basic.t=?,
      unit
    ) =>
    t_variables_NonrecursiveInput;
  let makeInputObjectEmbeddedInput:
    (~field: string=?, unit) => t_variables_EmbeddedInput;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t
    and t_variables_NonrecursiveInput = Yojson.Basic.t
    and t_variables_EmbeddedInput = Yojson.Basic.t;
  };
  type t = {
    scalarsInput: string,
    more: string,
  };
  type t_variables = {
    arg: t_variables_NonrecursiveInput,
    arg2: t_variables_NonrecursiveInput,
  }
  and t_variables_NonrecursiveInput = {
    nonNullableField: string,
    nullableArray: option(array(option(string))),
    field: option(string),
    enum: option([ | `FIRST | `SECOND | `THIRD]),
    embeddedInput: option(array(option(t_variables_EmbeddedInput))),
    custom: option(Yojson.Basic.t),
  }
  and t_variables_EmbeddedInput = {field: option(string)};
  let query = \"query ($arg: NonrecursiveInput!, $arg2: NonrecursiveInput!)  {\\nscalarsInput(arg: $arg)  \\nmore: scalarsInput(arg: $arg2)  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        scalarsInput: {
          let value = Yojson.Basic.Util.member(\"scalarsInput\", value);
          Yojson.Basic.Util.to_string(value);
        },
        more: {
          let value = Yojson.Basic.Util.member(\"more\", value);
          Yojson.Basic.Util.to_string(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let more = {
        let value = (value: t).more;
        `String(value);
      }
      and scalarsInput = {
        let value = (value: t).scalarsInput;
        `String(value);
      };
      `Assoc([(\"scalarsInput\", scalarsInput), (\"more\", more)]);
    };
  let rec serializeVariables: t_variables => Raw.t_variables =
    inp =>
      `Assoc([
        (
          \"arg\",
          (a => serializeInputObjectNonrecursiveInput(a))(
            (inp: t_variables).arg,
          ),
        ),
        (
          \"arg2\",
          (a => serializeInputObjectNonrecursiveInput(a))(
            (inp: t_variables).arg2,
          ),
        ),
      ])
  and serializeInputObjectNonrecursiveInput:
    t_variables_NonrecursiveInput => Raw.t_variables_NonrecursiveInput =
    inp =>
      `Assoc([
        (
          \"nonNullableField\",
          (a => `String(a))(
            (inp: t_variables_NonrecursiveInput).nonNullableField,
          ),
        ),
        (
          \"nullableArray\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    `List(
                      Array.map(
                        b =>
                          (
                            a =>
                              switch (a) {
                              | None => `Null
                              | Some(b) => (a => `String(a))(b)
                              }
                          )(
                            b,
                          ),
                        a,
                      )
                      |> Array.to_list,
                    )
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).nullableArray,
          ),
        ),
        (
          \"field\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables_NonrecursiveInput).field,
          ),
        ),
        (
          \"enum\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    switch (a) {
                    | `FIRST => `String(\"FIRST\")
                    | `SECOND => `String(\"SECOND\")
                    | `THIRD => `String(\"THIRD\")
                    }
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).enum,
          ),
        ),
        (
          \"embeddedInput\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) =>
                (
                  a =>
                    `List(
                      Array.map(
                        b =>
                          (
                            a =>
                              switch (a) {
                              | None => `Null
                              | Some(b) =>
                                (a => serializeInputObjectEmbeddedInput(a))(
                                  b,
                                )
                              }
                          )(
                            b,
                          ),
                        a,
                      )
                      |> Array.to_list,
                    )
                )(
                  b,
                )
              }
          )(
            (inp: t_variables_NonrecursiveInput).embeddedInput,
          ),
        ),
        (
          \"custom\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => a)(b)
              }
          )(
            (inp: t_variables_NonrecursiveInput).custom,
          ),
        ),
      ])
  and serializeInputObjectEmbeddedInput:
    t_variables_EmbeddedInput => Raw.t_variables_EmbeddedInput =
    inp =>
      `Assoc([
        (
          \"field\",
          (
            a =>
              switch (a) {
              | None => `Null
              | Some(b) => (a => `String(a))(b)
              }
          )(
            (inp: t_variables_EmbeddedInput).field,
          ),
        ),
      ]);
  let makeVariables = (~arg, ~arg2, ()): t_variables => {arg, arg2}
  and makeInputObjectNonrecursiveInput =
      (
        ~nonNullableField,
        ~nullableArray=?,
        ~field=?,
        ~enum=?,
        ~embeddedInput=?,
        ~custom=?,
        (),
      )
      : t_variables_NonrecursiveInput => {
    nonNullableField,
    nullableArray,
    field,
    enum,
    embeddedInput,
    custom,
  }
  and makeInputObjectEmbeddedInput = (~field=?, ()): t_variables_EmbeddedInput => {
    field: field,
  };
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

