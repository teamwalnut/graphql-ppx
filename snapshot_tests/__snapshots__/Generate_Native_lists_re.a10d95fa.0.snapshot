Generate Native › lists.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_lists = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
    nonNullableOfNullable: array(option(string)),
    nonNullableOfNonNullable: array(string),
  };
  type t = {lists: t_lists};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_lists = {
    nullableOfNullable: option(array(option(string))),
    nullableOfNonNullable: option(array(string)),
    nonNullableOfNullable: array(option(string)),
    nonNullableOfNonNullable: array(string),
  };
  type t = {lists: t_lists};
  type t_variables = unit;
  let query = \"query   {\\nlists  {\\nnullableOfNullable  \\nnullableOfNonNullable  \\nnonNullableOfNullable  \\nnonNullableOfNonNullable  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        lists: {
          let value = Yojson.Basic.Util.member(\"lists\", value);
          (
            {
              nullableOfNullable: {
                let value =
                  Yojson.Basic.Util.member(\"nullableOfNullable\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    switch (value) {
                    | `List(json_list) =>
                      List.map(
                        value =>
                          switch (value) {
                          | `Null => None
                          | value => Some(Yojson.Basic.Util.to_string(value))
                          },
                        json_list,
                      )
                      |> Array.of_list
                    | _ => [||]
                    },
                  )
                };
              },
              nullableOfNonNullable: {
                let value =
                  Yojson.Basic.Util.member(\"nullableOfNonNullable\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    switch (value) {
                    | `List(json_list) =>
                      List.map(
                        value => Yojson.Basic.Util.to_string(value),
                        json_list,
                      )
                      |> Array.of_list
                    | _ => [||]
                    },
                  )
                };
              },
              nonNullableOfNullable: {
                let value =
                  Yojson.Basic.Util.member(\"nonNullableOfNullable\", value);
                switch (value) {
                | `List(json_list) =>
                  List.map(
                    value =>
                      switch (value) {
                      | `Null => None
                      | value => Some(Yojson.Basic.Util.to_string(value))
                      },
                    json_list,
                  )
                  |> Array.of_list
                | _ => [||]
                };
              },
              nonNullableOfNonNullable: {
                let value =
                  Yojson.Basic.Util.member(\"nonNullableOfNonNullable\", value);
                switch (value) {
                | `List(json_list) =>
                  List.map(
                    value => Yojson.Basic.Util.to_string(value),
                    json_list,
                  )
                  |> Array.of_list
                | _ => [||]
                };
              },
            }: t_lists
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let lists = {
        let value = (value: t).lists;
        let nonNullableOfNonNullable = {
          let value = (value: t_lists).nonNullableOfNonNullable;
          `List(
            value |> Array.map(value => `String(value)) |> Array.to_list,
          );
        }
        and nonNullableOfNullable = {
          let value = (value: t_lists).nonNullableOfNullable;
          `List(
            value
            |> Array.map(value =>
                 switch (value) {
                 | Some(value) => `String(value)
                 | None => `Null
                 }
               )
            |> Array.to_list,
          );
        }
        and nullableOfNonNullable = {
          let value = (value: t_lists).nullableOfNonNullable;
          switch (value) {
          | Some(value) =>
            `List(
              value |> Array.map(value => `String(value)) |> Array.to_list,
            )
          | None => `Null
          };
        }
        and nullableOfNullable = {
          let value = (value: t_lists).nullableOfNullable;
          switch (value) {
          | Some(value) =>
            `List(
              value
              |> Array.map(value =>
                   switch (value) {
                   | Some(value) => `String(value)
                   | None => `Null
                   }
                 )
              |> Array.to_list,
            )
          | None => `Null
          };
        };
        `Assoc([
          (\"nullableOfNullable\", nullableOfNullable),
          (\"nullableOfNonNullable\", nullableOfNonNullable),
          (\"nonNullableOfNullable\", nonNullableOfNullable),
          (\"nonNullableOfNonNullable\", nonNullableOfNonNullable),
        ]);
      };
      `Assoc([(\"lists\", lists)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

