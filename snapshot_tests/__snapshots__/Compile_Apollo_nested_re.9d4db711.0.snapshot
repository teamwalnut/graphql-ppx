Compile Apollo › nested.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

function parse(value) {
  var value$1 = value.first;
  var value$2 = value$1.inner;
  var tmp;
  if (value$2 == null) {
    tmp = undefined;
  } else {
    var value$3 = value$2.inner;
    tmp = {
      __typename: value$2.__typename,
      inner: !(value$3 == null) ? ({
            __typename: value$3.__typename,
            field: value$3.field
          }) : undefined
    };
  }
  var value$4 = value.second;
  var value$5 = value$4.inner;
  var tmp$1;
  if (value$5 == null) {
    tmp$1 = undefined;
  } else {
    var value$6 = value$5.inner;
    tmp$1 = {
      __typename: value$5.__typename,
      inner: !(value$6 == null) ? ({
            __typename: value$6.__typename,
            f1: value$6.f1,
            f2: value$6.f2
          }) : undefined
    };
  }
  var value$7 = value.let;
  var value$8 = value$7.inner;
  var tmp$2;
  if (value$8 == null) {
    tmp$2 = undefined;
  } else {
    var value$9 = value$8.inner;
    tmp$2 = {
      __typename: value$8.__typename,
      inner: !(value$9 == null) ? ({
            __typename: value$9.__typename,
            field: value$9.field
          }) : undefined
    };
  }
  return {
          first: {
            __typename: value$1.__typename,
            inner: tmp
          },
          second: {
            __typename: value$4.__typename,
            inner: tmp$1
          },
          let: {
            __typename: value$7.__typename,
            inner: tmp$2
          }
        };
}

function serialize(value) {
  var value$1 = value.let;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = value$2.inner;
    var inner$1;
    if (value$3 !== undefined) {
      var value$4 = value$3.field;
      var value$5 = value$3.__typename;
      inner$1 = {
        __typename: value$5,
        field: value$4
      };
    } else {
      inner$1 = null;
    }
    var value$6 = value$2.__typename;
    inner = {
      __typename: value$6,
      inner: inner$1
    };
  } else {
    inner = null;
  }
  var value$7 = value$1.__typename;
  var let_ = {
    __typename: value$7,
    inner: inner
  };
  var value$8 = value.second;
  var value$9 = value$8.inner;
  var inner$2;
  if (value$9 !== undefined) {
    var value$10 = value$9.inner;
    var inner$3;
    if (value$10 !== undefined) {
      var value$11 = value$10.f2;
      var value$12 = value$10.f1;
      var value$13 = value$10.__typename;
      inner$3 = {
        __typename: value$13,
        f1: value$12,
        f2: value$11
      };
    } else {
      inner$3 = null;
    }
    var value$14 = value$9.__typename;
    inner$2 = {
      __typename: value$14,
      inner: inner$3
    };
  } else {
    inner$2 = null;
  }
  var value$15 = value$8.__typename;
  var second = {
    __typename: value$15,
    inner: inner$2
  };
  var value$16 = value.first;
  var value$17 = value$16.inner;
  var inner$4;
  if (value$17 !== undefined) {
    var value$18 = value$17.inner;
    var inner$5;
    if (value$18 !== undefined) {
      var value$19 = value$18.field;
      var value$20 = value$18.__typename;
      inner$5 = {
        __typename: value$20,
        field: value$19
      };
    } else {
      inner$5 = null;
    }
    var value$21 = value$17.__typename;
    inner$4 = {
      __typename: value$21,
      inner: inner$5
    };
  } else {
    inner$4 = null;
  }
  var value$22 = value$16.__typename;
  var first = {
    __typename: value$22,
    inner: inner$4
  };
  return {
          first: first,
          second: second,
          let: let_
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: \"query   {\\nfirst: nestedObject  {\\n__typename  \\ninner  {\\n__typename  \\ninner  {\\n__typename  \\nfield  \\n}\\n\\n}\\n\\n}\\n\\nsecond: nestedObject  {\\n__typename  \\ninner  {\\n__typename  \\ninner  {\\n__typename  \\nf1: field  \\nf2: field  \\n}\\n\\n}\\n\\n}\\n\\nlet: nestedObject  {\\n__typename  \\ninner  {\\n__typename  \\ninner  {\\n__typename  \\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var tmp;
  if (value$2 == null) {
    tmp = undefined;
  } else {
    var value$3 = value$2.inner;
    tmp = {
      __typename: value$2.__typename,
      inner: !(value$3 == null) ? ({
            __typename: value$3.__typename,
            field: value$3.field
          }) : undefined
    };
  }
  return {
          nestedObject: {
            __typename: value$1.__typename,
            inner: tmp
          }
        };
}

function serialize$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = value$2.inner;
    var inner$1;
    if (value$3 !== undefined) {
      var value$4 = value$3.field;
      var value$5 = value$3.__typename;
      inner$1 = {
        __typename: value$5,
        field: value$4
      };
    } else {
      inner$1 = null;
    }
    var value$6 = value$2.__typename;
    inner = {
      __typename: value$6,
      inner: inner$1
    };
  } else {
    inner = null;
  }
  var value$7 = value$1.__typename;
  var nestedObject = {
    __typename: value$7,
    inner: inner
  };
  return {
          nestedObject: nestedObject
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MyQueryWithSig = {
  Raw: Raw$1,
  query: \"query   {\\nnestedObject  {\\n__typename  \\ninner  {\\n__typename  \\ninner  {\\n__typename  \\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Test = {
  MyQueryWithSig: MyQueryWithSig
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var tmp;
  if (value$2 == null) {
    tmp = undefined;
  } else {
    var value$3 = value$2.inner;
    tmp = {
      __typename: value$2.__typename,
      inner: !(value$3 == null) ? ({
            __typename: value$3.__typename,
            field: value$3.field
          }) : undefined
    };
  }
  return {
          nestedObject: {
            __typename: value$1.__typename,
            inner: tmp
          }
        };
}

function serialize$2(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var inner;
  if (value$2 !== undefined) {
    var value$3 = value$2.inner;
    var inner$1;
    if (value$3 !== undefined) {
      var value$4 = value$3.field;
      var value$5 = value$3.__typename;
      inner$1 = {
        __typename: value$5,
        field: value$4
      };
    } else {
      inner$1 = null;
    }
    var value$6 = value$2.__typename;
    inner = {
      __typename: value$6,
      inner: inner$1
    };
  } else {
    inner = null;
  }
  var value$7 = value$1.__typename;
  var nestedObject = {
    __typename: value$7,
    inner: inner
  };
  return {
          nestedObject: nestedObject
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var MyQueryWithSigDirect = {
  Raw: Raw$2,
  query: \"query   {\\nnestedObject  {\\n__typename  \\ninner  {\\n__typename  \\ninner  {\\n__typename  \\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

exports.MyQuery = MyQuery;
exports.Test = Test;
exports.MyQueryWithSigDirect = MyQueryWithSigDirect;
/* No side effect */

