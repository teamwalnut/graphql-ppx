Compile Template › subscription.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require(\"gql\")`
  subscription   {
    simpleSubscription  {
      __typename
      ...on Dog   {
        name
      }
      ...on Human   {
        name
      }
    }
  }
`);

function parse(value) {
  var value$1 = value.simpleSubscription;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          NAME: \"Dog\",
          VAL: {
            name: value$1.name
          }
        };
        break;
    case \"Human\" :
        tmp = {
          NAME: \"Human\",
          VAL: {
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        NAME: \"FutureAddedValue\",
        VAL: value$1
      };
  }
  return {
          simpleSubscription: tmp
        };
}

function serialize(value) {
  var value$1 = value.simpleSubscription;
  var variant = value$1.NAME;
  var simpleSubscription;
  if (variant === \"FutureAddedValue\") {
    simpleSubscription = value$1.VAL;
  } else if (variant === \"Dog\") {
    var value$2 = value$1.VAL.name;
    simpleSubscription = {
      __typename: \"Dog\",
      name: value$2
    };
  } else {
    var value$3 = value$1.VAL.name;
    simpleSubscription = {
      __typename: \"Human\",
      name: value$3
    };
  }
  return {
          simpleSubscription: simpleSubscription
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.MyQuery = MyQuery;
/* query Not a pure module */

