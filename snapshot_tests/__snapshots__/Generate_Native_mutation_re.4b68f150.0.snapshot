Generate Native › mutation.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_mutationWithError_value = {stringField: string};
  type t_mutationWithError_errors_field = [
    | `FutureAddedValue(string)
    | `FIRST
    | `SECOND
    | `THIRD
  ];
  type t_mutationWithError_errors = {
    field: t_mutationWithError_errors_field,
    message: string,
  };
  type t_mutationWithError = {
    value: option(t_mutationWithError_value),
    errors: option(array(t_mutationWithError_errors)),
  };
  type t = {mutationWithError: t_mutationWithError};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_mutationWithError_value = {stringField: string};
  type t_mutationWithError_errors_field = [
    | `FutureAddedValue(string)
    | `FIRST
    | `SECOND
    | `THIRD
  ];
  type t_mutationWithError_errors = {
    field: t_mutationWithError_errors_field,
    message: string,
  };
  type t_mutationWithError = {
    value: option(t_mutationWithError_value),
    errors: option(array(t_mutationWithError_errors)),
  };
  type t = {mutationWithError: t_mutationWithError};
  type t_variables = unit;
  let query = \"mutation   {\\nmutationWithError  {\\nvalue  {\\nstringField  \\n}\\n\\nerrors  {\\nfield  \\nmessage  \\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        mutationWithError: {
          let value = Yojson.Basic.Util.member(\"mutationWithError\", value);
          (
            {
              value: {
                let value = Yojson.Basic.Util.member(\"value\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      stringField: {
                        let value =
                          Yojson.Basic.Util.member(\"stringField\", value);
                        Yojson.Basic.Util.to_string(value);
                      },
                    }: t_mutationWithError_value,
                  )
                };
              },
              errors: {
                let value = Yojson.Basic.Util.member(\"errors\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    switch (value) {
                    | `List(json_list) =>
                      List.map(
                        (value): t_mutationWithError_errors =>
                          {
                            field: {
                              let value =
                                Yojson.Basic.Util.member(\"field\", value);
                              switch (value |> Yojson.Basic.Util.to_string) {
                              | \"FIRST\" => `FIRST
                              | \"SECOND\" => `SECOND
                              | \"THIRD\" => `THIRD
                              | other => `FutureAddedValue(other)
                              };
                            },
                            message: {
                              let value =
                                Yojson.Basic.Util.member(\"message\", value);
                              Yojson.Basic.Util.to_string(value);
                            },
                          },
                        json_list,
                      )
                      |> Array.of_list
                    | _ => [||]
                    },
                  )
                };
              },
            }: t_mutationWithError
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let mutationWithError = {
        let value = (value: t).mutationWithError;
        let errors = {
          let value = (value: t_mutationWithError).errors;
          switch (value) {
          | Some(value) =>
            `List(
              value
              |> Array.map(value =>
                   let message = {
                     let value = (value: t_mutationWithError_errors).message;
                     `String(value);
                   }
                   and field = {
                     let value = (value: t_mutationWithError_errors).field;
                     switch (value) {
                     | `FIRST => `String(\"FIRST\")
                     | `SECOND => `String(\"SECOND\")
                     | `THIRD => `String(\"THIRD\")
                     | `FutureAddedValue(other) => `String(other)
                     };
                   };
                   `Assoc([(\"field\", field), (\"message\", message)]);
                 )
              |> Array.to_list,
            )
          | None => `Null
          };
        }
        and value = {
          let value = (value: t_mutationWithError).value;
          switch (value) {
          | Some(value) =>
            let stringField = {
              let value = (value: t_mutationWithError_value).stringField;
              `String(value);
            };
            `Assoc([(\"stringField\", stringField)]);
          | None => `Null
          };
        };
        `Assoc([(\"value\", value), (\"errors\", errors)]);
      };
      `Assoc([(\"mutationWithError\", mutationWithError)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

