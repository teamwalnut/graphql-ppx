Compile Apollo › argNamedQuery.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

function parse(value) {
  return {
          argNamedQuery: value.argNamedQuery
        };
}

function serialize(value) {
  var value$1 = value.argNamedQuery;
  return {
          argNamedQuery: value$1
        };
}

function serializeVariables(inp) {
  return {
          query: inp.query
        };
}

function makeVariables(query, param) {
  return {
          query: query
        };
}

var MyQuery = {
  Raw: Raw,
  query: \"query ($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var Raw$1 = {};

function parse$1(value) {
  return {
          argNamedQuery: value.argNamedQuery
        };
}

function serialize$1(value) {
  var value$1 = value.argNamedQuery;
  return {
          argNamedQuery: value$1
        };
}

function serializeVariables$1(inp) {
  return {
          query: inp.query
        };
}

function makeVariables$1(query, param) {
  return {
          query: query
        };
}

var Query1 = {
  Raw: Raw$1,
  query: \"query Query1($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1
};

var Raw$2 = {};

function parse$2(value) {
  return {
          argNamedQuery: value.argNamedQuery
        };
}

function serialize$2(value) {
  var value$1 = value.argNamedQuery;
  return {
          argNamedQuery: value$1
        };
}

function serializeVariables$2(inp) {
  return {
          query: inp.query
        };
}

function makeVariables$2(query, param) {
  return {
          query: query
        };
}

var Query2 = {
  Raw: Raw$2,
  query: \"query Query2($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2
};

var MultipleQueryWithSameVarName = {
  Query1: Query1,
  Query2: Query2
};

exports.MyQuery = MyQuery;
exports.MultipleQueryWithSameVarName = MultipleQueryWithSameVarName;
/* No side effect */

