Compile Records › record.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

function parse(value) {
  var value$1 = value.variousScalars;
  return {
          variousScalars: {
            __typename: value$1.__typename,
            string: value$1.string,
            int: value$1.int
          }
        };
}

function serialize(value) {
  var value$1 = value.variousScalars;
  var value$2 = value$1.int;
  var value$3 = value$1.string;
  var value$4 = value$1.__typename;
  var variousScalars = {
    __typename: value$4,
    string: value$3,
    int: value$2
  };
  return {
          variousScalars: variousScalars
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: \"query   {\\nvariousScalars  {\\n__typename  \\nstring  \\nint  \\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.variousScalars;
  var value$2 = value$1.nullableString;
  return {
          variousScalars: {
            nullableString: !(value$2 == null) ? value$2 : undefined
          }
        };
}

function serialize$1(value) {
  var value$1 = value.variousScalars;
  var value$2 = value$1.nullableString;
  var nullableString = value$2 !== undefined ? value$2 : null;
  var variousScalars = {
    nullableString: nullableString
  };
  return {
          variousScalars: variousScalars
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var OneFieldQuery = {
  Raw: Raw$1,
  query: \"query   {\\nvariousScalars  {\\nnullableString  \\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.variousScalars;
  var value$2 = value$1.nullableString;
  return {
          variousScalars: {
            __typename: value$1.__typename,
            nullableString: !(value$2 == null) ? value$2 : undefined
          }
        };
}

function serialize$2(value) {
  var value$1 = value.variousScalars;
  var value$2 = value$1.nullableString;
  var nullableString = value$2 !== undefined ? value$2 : null;
  var value$3 = value$1.__typename;
  var variousScalars = {
    __typename: value$3,
    nullableString: nullableString
  };
  return {
          variousScalars: variousScalars
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var OneFieldQueryWithTypename = {
  Raw: Raw$2,
  query: \"query   {\\nvariousScalars  {\\n__typename  \\nnullableString  \\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

var Raw$3 = {};

var query = \"fragment Fragment on VariousScalars   {\\nstring  \\nint  \\n}\\n\";

function parse$3(value) {
  return {
          string: value.string,
          int: value.int
        };
}

function serialize$3(value) {
  var value$1 = value.int;
  var value$2 = value.string;
  return {
          string: value$2,
          int: value$1
        };
}

function verifyArgsAndParse(_Fragment, value) {
  return parse$3(value);
}

function verifyName(param) {
  
}

var Fragment = {
  Raw: Raw$3,
  query: query,
  parse: parse$3,
  serialize: serialize$3,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$4 = {};

var query$1 = \"query   {\\nvariousScalars  {\\n...Fragment   \\n}\\n\\n}\\nfragment Fragment on VariousScalars   {\\nstring  \\nint  \\n}\\n\";

function parse$4(value) {
  return {
          variousScalars: parse$3(value.variousScalars)
        };
}

function serialize$4(value) {
  var value$1 = value.variousScalars;
  var variousScalars = serialize$3(value$1);
  return {
          variousScalars: variousScalars
        };
}

function serializeVariables$3(param) {
  
}

function makeVariables$3(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var Untitled1 = {
  Raw: Raw$4,
  query: query$1,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables$3
};

var ExternalFragmentQuery = {
  Fragment: Fragment,
  Untitled1: Untitled1
};

var Raw$5 = {};

function parse$5(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp = typename === \"Dog\" ? ({
        NAME: \"Dog\",
        VAL: {
          __typename: value$1.__typename,
          name: value$1.name,
          barkVolume: value$1.barkVolume
        }
      }) : ({
        NAME: \"FutureAddedValue\",
        VAL: value$1
      });
  return {
          dogOrHuman: tmp
        };
}

function serialize$5(value) {
  var value$1 = value.dogOrHuman;
  var dogOrHuman;
  if (value$1.NAME === \"Dog\") {
    var value$2 = value$1.VAL;
    var value$3 = value$2.barkVolume;
    var value$4 = value$2.name;
    dogOrHuman = {
      __typename: \"Dog\",
      name: value$4,
      barkVolume: value$3
    };
  } else {
    dogOrHuman = value$1.VAL;
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$4(param) {
  
}

function makeVariables$4(param) {
  
}

function makeDefaultVariables$4(param) {
  
}

var InlineFragmentQuery = {
  Raw: Raw$5,
  query: \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$4
};

var Raw$6 = {};

var query$2 = \"fragment DogFragment on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\";

function parse$6(value) {
  return {
          __typename: value.__typename,
          name: value.name,
          barkVolume: value.barkVolume
        };
}

function serialize$6(value) {
  var value$1 = value.barkVolume;
  var value$2 = value.name;
  var value$3 = value.__typename;
  return {
          __typename: value$3,
          name: value$2,
          barkVolume: value$1
        };
}

function verifyArgsAndParse$1(_DogFragment, value) {
  return parse$6(value);
}

function verifyName$1(param) {
  
}

var DogFragment = {
  Raw: Raw$6,
  query: query$2,
  parse: parse$6,
  serialize: serialize$6,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$7 = {};

var query$3 = \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n...DogFragment   \\n}\\n\\n}\\n\\n}\\nfragment DogFragment on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\";

function parse$7(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp = typename === \"Dog\" ? ({
        NAME: \"Dog\",
        VAL: parse$6(value$1)
      }) : ({
        NAME: \"FutureAddedValue\",
        VAL: value$1
      });
  return {
          dogOrHuman: tmp
        };
}

function serialize$7(value) {
  var value$1 = value.dogOrHuman;
  var dogOrHuman = value$1.NAME === \"Dog\" ? serialize$6(value$1.VAL) : value$1.VAL;
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$5(param) {
  
}

function makeVariables$5(param) {
  
}

function makeDefaultVariables$5(param) {
  
}

var Untitled1$1 = {
  Raw: Raw$7,
  query: query$3,
  parse: parse$7,
  serialize: serialize$7,
  serializeVariables: serializeVariables$5,
  makeVariables: makeVariables$5,
  makeDefaultVariables: makeDefaultVariables$5
};

var UnionExternalFragmentQuery = {
  DogFragment: DogFragment,
  Untitled1: Untitled1$1
};

exports.MyQuery = MyQuery;
exports.OneFieldQuery = OneFieldQuery;
exports.OneFieldQueryWithTypename = OneFieldQueryWithTypename;
exports.ExternalFragmentQuery = ExternalFragmentQuery;
exports.InlineFragmentQuery = InlineFragmentQuery;
exports.UnionExternalFragmentQuery = UnionExternalFragmentQuery;
/* No side effect */

