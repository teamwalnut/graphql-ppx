Compile Records › interface.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function deepMerge(json1, param) {
  return json1;
}

var GraphQL_PPX = {
  deepMerge: deepMerge
};

var Raw = {};

function parse(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                switch (typename) {
                  case \"AdminUser\" :
                      return {
                              NAME: \"AdminUser\",
                              VAL: {
                                id: value.id,
                                name: value.name
                              }
                            };
                  case \"AnonymousUser\" :
                      return {
                              NAME: \"AnonymousUser\",
                              VAL: {
                                id: value.id,
                                anonymousId: value.anonymousId
                              }
                            };
                  default:
                    return {
                            NAME: \"UnspecifiedFragment\",
                            VAL: typename
                          };
                }
              })
        };
}

function serialize(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        var variant = value.NAME;
        if (variant === \"UnspecifiedFragment\") {
          return {};
        }
        if (variant === \"AdminUser\") {
          var value$1 = value.VAL;
          var value$2 = value$1.name;
          var value$3 = value$1.id;
          return {
                  __typename: \"AdminUser\",
                  id: value$3,
                  name: value$2
                };
        }
        var value$4 = value.VAL;
        var value$5 = value$4.anonymousId;
        var value$6 = value$4.id;
        return {
                __typename: \"AnonymousUser\",
                id: value$6,
                anonymousId: value$5
              };
      });
  return {
          users: users
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var QueryWithOnlyFragments = {
  Raw: Raw,
  query: \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\nid  \\nname  \\n}\\n\\n...on AnonymousUser   {\\nid  \\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                if (typename === \"AdminUser\") {
                  return {
                          NAME: \"AdminUser\",
                          VAL: {
                            __typename: value.__typename,
                            id: value.id
                          }
                        };
                } else {
                  return {
                          NAME: \"UnspecifiedFragment\",
                          VAL: typename
                        };
                }
              })
        };
}

function serialize$1(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        if (value.NAME !== \"AdminUser\") {
          return {};
        }
        var value$1 = value.VAL.id;
        return {
                __typename: \"AdminUser\",
                id: value$1
              };
      });
  return {
          users: users
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var QueryWithTypename = {
  Raw: Raw$1,
  query: \"query   {\\nusers  {\\n__typename\\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                var tmp;
                switch (typename) {
                  case \"AdminUser\" :
                      tmp = {
                        NAME: \"AdminUser\",
                        VAL: {
                          name: value.name
                        }
                      };
                      break;
                  case \"AnonymousUser\" :
                      tmp = {
                        NAME: \"AnonymousUser\",
                        VAL: {
                          anonymousId: value.anonymousId
                        }
                      };
                      break;
                  default:
                    tmp = {
                      NAME: \"UnspecifiedFragment\",
                      VAL: typename
                    };
                }
                return {
                        fragment: tmp,
                        id: value[\"id\"]
                      };
              })
        };
}

function serialize$2(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        var value$1 = value.fragment;
        var variant = value$1.NAME;
        var tmp;
        if (variant === \"UnspecifiedFragment\") {
          tmp = {};
        } else if (variant === \"AdminUser\") {
          var value$2 = value$1.VAL.name;
          tmp = {
            __typename: \"AdminUser\",
            name: value$2
          };
        } else {
          var value$3 = value$1.VAL.anonymousId;
          tmp = {
            __typename: \"AnonymousUser\",
            anonymousId: value$3
          };
        }
        return [tmp].reduce(deepMerge, {
                    id: value.id
                  });
      });
  return {
          users: users
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var QueryWithMixedFragments = {
  Raw: Raw$2,
  query: \"query   {\\nusers  {\\n__typename\\nid  \\n...on AdminUser   {\\nname  \\n}\\n\\n...on AnonymousUser   {\\nanonymousId  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

var Raw$3 = {};

function parse$3(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                var typename = value[\"__typename\"];
                var tmp = typename === \"AdminUser\" ? ({
                      NAME: \"AdminUser\",
                      VAL: {
                        __typename: value.__typename,
                        id: value.id
                      }
                    }) : ({
                      NAME: \"UnspecifiedFragment\",
                      VAL: typename
                    });
                return {
                        fragment: tmp,
                        __typename: value[\"__typename\"],
                        id: value[\"id\"]
                      };
              })
        };
}

function serialize$3(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        var value$1 = value.id;
        var value$2 = value.__typename;
        var value$3 = value.fragment;
        var tmp;
        if (value$3.NAME === \"AdminUser\") {
          var value$4 = value$3.VAL.id;
          tmp = {
            __typename: \"AdminUser\",
            id: value$4
          };
        } else {
          tmp = {};
        }
        return [tmp].reduce(deepMerge, {
                    __typename: value$2,
                    id: value$1
                  });
      });
  return {
          users: users
        };
}

function serializeVariables$3(param) {
  
}

function makeVariables$3(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var MixedQueryWithTypename = {
  Raw: Raw$3,
  query: \"query   {\\nusers  {\\n__typename\\nid  \\n__typename  \\n...on AdminUser   {\\n__typename  \\nid  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables$3
};

var Raw$4 = {};

function parse$4(value) {
  var value$1 = value.users;
  return {
          users: value$1.map(function (value) {
                return {
                        id: value.id
                      };
              })
        };
}

function serialize$4(value) {
  var value$1 = value.users;
  var users = value$1.map(function (value) {
        var value$1 = value.id;
        return {
                id: value$1
              };
      });
  return {
          users: users
        };
}

function serializeVariables$4(param) {
  
}

function makeVariables$4(param) {
  
}

function makeDefaultVariables$4(param) {
  
}

var QueryWithoutFragments = {
  Raw: Raw$4,
  query: \"query   {\\nusers  {\\n__typename\\nid  \\n}\\n\\n}\\n\",
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$4,
  makeVariables: makeVariables$4,
  makeDefaultVariables: makeDefaultVariables$4
};

exports.GraphQL_PPX = GraphQL_PPX;
exports.QueryWithOnlyFragments = QueryWithOnlyFragments;
exports.QueryWithTypename = QueryWithTypename;
exports.QueryWithMixedFragments = QueryWithMixedFragments;
exports.MixedQueryWithTypename = MixedQueryWithTypename;
exports.QueryWithoutFragments = QueryWithoutFragments;
/* No side effect */

