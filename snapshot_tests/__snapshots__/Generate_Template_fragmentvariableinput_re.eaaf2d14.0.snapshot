Generate Template › fragmentvariableinput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Test: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t_reposts = {id: int};
    type t = {reposts: array(Js.Nullable.t(t_reposts))};
    type nonrec t_Post = t;
  };
  type t_reposts = {id: int};
  type t = {reposts: array(option(t_reposts))};
  type nonrec t_Post = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse:
    (~name: [ | `NonNull_String], ~fragmentName: [ | `test], Raw.t) => t;
  let verifyName: [ | `test] => unit;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t_reposts = {id: int};
    type t = {reposts: array(Js.Nullable.t(t_reposts))};
    type nonrec t_Post = t;
  };
  type t_reposts = {id: int};
  type t = {reposts: array(option(t_reposts))};
  type nonrec t_Post = t;
  let query: string = [%raw
    \"require(\\\"gql\\\")`\\n  fragment test on Post   {\\n    reposts(arg: {name: $name})  {\\n      id\\n    }\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        reposts: {
          let value = (value: Raw.t).reposts;
          value
          |> Js.Array.map(value =>
               switch (Js.toOption(value)) {
               | Some(value) =>
                 Some(
                   {
                     id: {
                       let value = (value: Raw.t_reposts).id;
                       value;
                     },
                   }: t_reposts,
                 )
               | None => None
               }
             );
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let reposts = {
          let value = (value: t).reposts;
          value
          |> Js.Array.map(value =>
               switch (value) {
               | Some(value) =>
                 Js.Nullable.return(
                   {
                     let id = {
                       let value = (value: t_reposts).id;
                       value;
                     };
                     {id: id};
                   }: Raw.t_reposts,
                 )
               | None => Js.Nullable.null
               }
             );
        };
        {reposts: reposts};
      }: Raw.t
    );
  let verifyArgsAndParse =
      (
        ~name as _name: [ | `NonNull_String],
        ~fragmentName as _test: [ | `test],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `test => ();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
};

