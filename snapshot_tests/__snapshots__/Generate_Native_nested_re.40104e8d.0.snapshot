Generate Native › nested.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
type record = {
  f1: string,
  f2: string,
};
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_first_inner_inner = {field: string};
  type t_first_inner = {inner: option(t_first_inner_inner)};
  type t_first = {inner: option(t_first_inner)};
  type t_second_inner_inner = {
    f1: string,
    f2: string,
  };
  type t_second_inner = {inner: option(t_second_inner_inner)};
  type t_second = {inner: option(t_second_inner)};
  type t_let_inner_inner = {field: string};
  type t_let_inner = {inner: option(t_let_inner_inner)};
  type t_let = {inner: option(t_let_inner)};
  type t = {
    first: t_first,
    second: t_second,
    [@bs.as \"let\"]
    let_: t_let,
  };
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_first_inner_inner = {field: string};
  type t_first_inner = {inner: option(t_first_inner_inner)};
  type t_first = {inner: option(t_first_inner)};
  type t_second_inner_inner = {
    f1: string,
    f2: string,
  };
  type t_second_inner = {inner: option(t_second_inner_inner)};
  type t_second = {inner: option(t_second_inner)};
  type t_let_inner_inner = {field: string};
  type t_let_inner = {inner: option(t_let_inner_inner)};
  type t_let = {inner: option(t_let_inner)};
  type t = {
    first: t_first,
    second: t_second,
    [@bs.as \"let\"]
    let_: t_let,
  };
  type t_variables = unit;
  let query = \"query   {\\nfirst: nestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\nsecond: nestedObject  {\\ninner  {\\ninner  {\\nf1: field  \\nf2: field  \\n}\\n\\n}\\n\\n}\\n\\nlet: nestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        first: {
          let value = Yojson.Basic.Util.member(\"first\", value);
          (
            {
              inner: {
                let value = Yojson.Basic.Util.member(\"inner\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      inner: {
                        let value = Yojson.Basic.Util.member(\"inner\", value);
                        switch (value) {
                        | `Null => None
                        | value =>
                          Some(
                            {
                              field: {
                                let value =
                                  Yojson.Basic.Util.member(\"field\", value);
                                Yojson.Basic.Util.to_string(value);
                              },
                            }: t_first_inner_inner,
                          )
                        };
                      },
                    }: t_first_inner,
                  )
                };
              },
            }: t_first
          );
        },
        second: {
          let value = Yojson.Basic.Util.member(\"second\", value);
          (
            {
              inner: {
                let value = Yojson.Basic.Util.member(\"inner\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      inner: {
                        let value = Yojson.Basic.Util.member(\"inner\", value);
                        switch (value) {
                        | `Null => None
                        | value =>
                          Some(
                            {
                              f1: {
                                let value =
                                  Yojson.Basic.Util.member(\"f1\", value);
                                Yojson.Basic.Util.to_string(value);
                              },
                              f2: {
                                let value =
                                  Yojson.Basic.Util.member(\"f2\", value);
                                Yojson.Basic.Util.to_string(value);
                              },
                            }: t_second_inner_inner,
                          )
                        };
                      },
                    }: t_second_inner,
                  )
                };
              },
            }: t_second
          );
        },
        let_: {
          let value = Yojson.Basic.Util.member(\"let\", value);
          (
            {
              inner: {
                let value = Yojson.Basic.Util.member(\"inner\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      inner: {
                        let value = Yojson.Basic.Util.member(\"inner\", value);
                        switch (value) {
                        | `Null => None
                        | value =>
                          Some(
                            {
                              field: {
                                let value =
                                  Yojson.Basic.Util.member(\"field\", value);
                                Yojson.Basic.Util.to_string(value);
                              },
                            }: t_let_inner_inner,
                          )
                        };
                      },
                    }: t_let_inner,
                  )
                };
              },
            }: t_let
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let let_ = {
        let value = (value: t).let_;
        let inner = {
          let value = (value: t_let).inner;
          switch (value) {
          | Some(value) =>
            let inner = {
              let value = (value: t_let_inner).inner;
              switch (value) {
              | Some(value) =>
                let field = {
                  let value = (value: t_let_inner_inner).field;
                  `String(value);
                };
                `Assoc([(\"field\", field)]);
              | None => `Null
              };
            };
            `Assoc([(\"inner\", inner)]);
          | None => `Null
          };
        };
        `Assoc([(\"inner\", inner)]);
      }
      and second = {
        let value = (value: t).second;
        let inner = {
          let value = (value: t_second).inner;
          switch (value) {
          | Some(value) =>
            let inner = {
              let value = (value: t_second_inner).inner;
              switch (value) {
              | Some(value) =>
                let f2 = {
                  let value = (value: t_second_inner_inner).f2;
                  `String(value);
                }
                and f1 = {
                  let value = (value: t_second_inner_inner).f1;
                  `String(value);
                };
                `Assoc([(\"f1\", f1), (\"f2\", f2)]);
              | None => `Null
              };
            };
            `Assoc([(\"inner\", inner)]);
          | None => `Null
          };
        };
        `Assoc([(\"inner\", inner)]);
      }
      and first = {
        let value = (value: t).first;
        let inner = {
          let value = (value: t_first).inner;
          switch (value) {
          | Some(value) =>
            let inner = {
              let value = (value: t_first_inner).inner;
              switch (value) {
              | Some(value) =>
                let field = {
                  let value = (value: t_first_inner_inner).field;
                  `String(value);
                };
                `Assoc([(\"field\", field)]);
              | None => `Null
              };
            };
            `Assoc([(\"inner\", inner)]);
          | None => `Null
          };
        };
        `Assoc([(\"inner\", inner)]);
      };
      `Assoc([(\"first\", first), (\"second\", second), (\"let\", let_)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

module Test: {
  module MyQueryWithSig: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t_nestedObject_inner_inner = {field: string};
    type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
    type t_nestedObject = {inner: option(t_nestedObject_inner)};
    type t = {nestedObject: t_nestedObject};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
} = {
  module MyQueryWithSig: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t_nestedObject_inner_inner = {field: string};
    type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
    type t_nestedObject = {inner: option(t_nestedObject_inner)};
    type t = {nestedObject: t_nestedObject};
    type t_variables = unit;
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: unit => Raw.t_variables;
    let makeVariables: unit => t_variables;
    let makeDefaultVariables: unit => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
      type t_variables = Yojson.Basic.t;
    };
    type t_nestedObject_inner_inner = {field: string};
    type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
    type t_nestedObject = {inner: option(t_nestedObject_inner)};
    type t = {nestedObject: t_nestedObject};
    type t_variables = unit;
    let query = \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\";
    let parse: Raw.t => t =
      (value) => (
        {
          nestedObject: {
            let value = Yojson.Basic.Util.member(\"nestedObject\", value);
            (
              {
                inner: {
                  let value = Yojson.Basic.Util.member(\"inner\", value);
                  switch (value) {
                  | `Null => None
                  | value =>
                    Some(
                      {
                        inner: {
                          let value =
                            Yojson.Basic.Util.member(\"inner\", value);
                          switch (value) {
                          | `Null => None
                          | value =>
                            Some(
                              {
                                field: {
                                  let value =
                                    Yojson.Basic.Util.member(\"field\", value);
                                  Yojson.Basic.Util.to_string(value);
                                },
                              }: t_nestedObject_inner_inner,
                            )
                          };
                        },
                      }: t_nestedObject_inner,
                    )
                  };
                },
              }: t_nestedObject
            );
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let nestedObject = {
          let value = (value: t).nestedObject;
          let inner = {
            let value = (value: t_nestedObject).inner;
            switch (value) {
            | Some(value) =>
              let inner = {
                let value = (value: t_nestedObject_inner).inner;
                switch (value) {
                | Some(value) =>
                  let field = {
                    let value = (value: t_nestedObject_inner_inner).field;
                    `String(value);
                  };
                  `Assoc([(\"field\", field)]);
                | None => `Null
                };
              };
              `Assoc([(\"inner\", inner)]);
            | None => `Null
            };
          };
          `Assoc([(\"inner\", inner)]);
        };
        `Assoc([(\"nestedObject\", nestedObject)]);
      };
    let serializeVariables = () => `Null;
    let makeVariables = () => ();
    let makeDefaultVariables = () => makeVariables();
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
};
module MyQueryWithSigDirect: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_nestedObject_inner_inner = {field: string};
  type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
  type t_nestedObject = {inner: option(t_nestedObject_inner)};
  type t = {nestedObject: t_nestedObject};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_nestedObject_inner_inner = {field: string};
  type t_nestedObject_inner = {inner: option(t_nestedObject_inner_inner)};
  type t_nestedObject = {inner: option(t_nestedObject_inner)};
  type t = {nestedObject: t_nestedObject};
  type t_variables = unit;
  let query = \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        nestedObject: {
          let value = Yojson.Basic.Util.member(\"nestedObject\", value);
          (
            {
              inner: {
                let value = Yojson.Basic.Util.member(\"inner\", value);
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      inner: {
                        let value = Yojson.Basic.Util.member(\"inner\", value);
                        switch (value) {
                        | `Null => None
                        | value =>
                          Some(
                            {
                              field: {
                                let value =
                                  Yojson.Basic.Util.member(\"field\", value);
                                Yojson.Basic.Util.to_string(value);
                              },
                            }: t_nestedObject_inner_inner,
                          )
                        };
                      },
                    }: t_nestedObject_inner,
                  )
                };
              },
            }: t_nestedObject
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let nestedObject = {
        let value = (value: t).nestedObject;
        let inner = {
          let value = (value: t_nestedObject).inner;
          switch (value) {
          | Some(value) =>
            let inner = {
              let value = (value: t_nestedObject_inner).inner;
              switch (value) {
              | Some(value) =>
                let field = {
                  let value = (value: t_nestedObject_inner_inner).field;
                  `String(value);
                };
                `Assoc([(\"field\", field)]);
              | None => `Null
              };
            };
            `Assoc([(\"inner\", inner)]);
          | None => `Null
          };
        };
        `Assoc([(\"inner\", inner)]);
      };
      `Assoc([(\"nestedObject\", nestedObject)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

