Compile Records › module_type.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require(\"rescript/lib/js/curry.js\");

var MyQuery = {};

var MyQuery2 = {};

function parse(nestedObject) {
  return {
          otherInner: nestedObject.inner
        };
}

function serialize(t) {
  return {
          inner: t.otherInner
        };
}

var VariousScalars = {
  parse: parse,
  serialize: serialize
};

var Raw = {};

function parse$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = value$1.inner;
  var tmp;
  if (value$2 == null) {
    tmp = undefined;
  } else {
    var value$3 = value$2.inner;
    tmp = {
      inner: !(value$3 == null) ? ({
            field: value$3.field
          }) : undefined
    };
  }
  return {
          nestedObject: Curry._1(parse, {
                inner: tmp
              })
        };
}

function serialize$1(value) {
  var value$1 = value.nestedObject;
  var value$2 = Curry._1(serialize, value$1);
  var value$3 = value$2.inner;
  var inner;
  if (value$3 !== undefined) {
    var value$4 = value$3.inner;
    var inner$1;
    if (value$4 !== undefined) {
      var value$5 = value$4.field;
      inner$1 = {
        field: value$5
      };
    } else {
      inner$1 = null;
    }
    inner = {
      inner: inner$1
    };
  } else {
    inner = null;
  }
  var nestedObject = {
    inner: inner
  };
  return {
          nestedObject: nestedObject
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQueryRecursive = {
  Raw: Raw,
  query: \"query   {\\nnestedObject  {\\ninner  {\\ninner  {\\nfield  \\n}\\n\\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.MyQuery = MyQuery;
exports.MyQuery2 = MyQuery2;
exports.MyQueryRecursive = MyQueryRecursive;
exports.VariousScalars = VariousScalars;
/* No side effect */

