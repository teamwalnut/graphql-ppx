Compile Template › customTypes.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_json = require(\"rescript/lib/js/js_json.js\");
var Caml_option = require(\"rescript/lib/js/caml_option.js\");

function parse(json) {
  var match = Js_json.decodeString(json);
  if (match === undefined) {
    return /* Red */0;
  }
  switch (match) {
    case \"blue\" :
        return /* Blue */2;
    case \"green\" :
        return /* Green */1;
    case \"red\" :
        return /* Red */0;
    default:
      return /* Red */0;
  }
}

function serialize(color) {
  switch (color) {
    case /* Red */0 :
        return \"red\";
    case /* Green */1 :
        return \"green\";
    case /* Blue */2 :
        return \"blue\";
    
  }
}

var Color = {
  parse: parse,
  serialize: serialize
};

function parse$1(color) {
  if (color === undefined) {
    return /* Red */0;
  }
  switch (color) {
    case \"blue\" :
        return /* Blue */2;
    case \"green\" :
        return /* Green */1;
    case \"red\" :
        return /* Red */0;
    default:
      return /* Red */0;
  }
}

function serialize$1(color) {
  switch (color) {
    case /* Red */0 :
        return \"red\";
    case /* Green */1 :
        return \"green\";
    case /* Blue */2 :
        return \"blue\";
    
  }
}

var NullableString = {
  parse: parse$1,
  serialize: serialize$1
};

function parse$2(json) {
  var str = Js_json.decodeString(json);
  if (str !== undefined) {
    return new Date(str);
  } else {
    return new Date();
  }
}

function serialize$2(date) {
  return date.toISOString();
}

var DateTime = {
  parse: parse$2,
  serialize: serialize$2
};

var Raw = {};

var query = (require(\"gql\")`
  query   {
    customFields  {
      currentTime
      favoriteColor
      futureTime
      nullableColor
      nullableString
    }
  }
`);

function parse$3(value) {
  var value$1 = value.customFields;
  var value$2 = value$1.futureTime;
  var value$3 = value$1.nullableColor;
  var value$4 = value$1.nullableString;
  return {
          customFields: {
            currentTime: parse$2(value$1.currentTime),
            favoriteColor: parse(value$1.favoriteColor),
            futureTime: !(value$2 == null) ? Caml_option.some(parse$2(value$2)) : undefined,
            nullableColor: !(value$3 == null) ? parse(value$3) : undefined,
            nullableString: parse$1(!(value$4 == null) ? value$4 : undefined)
          }
        };
}

function serialize$3(value) {
  var value$1 = value.customFields;
  var value$2 = value$1.nullableString;
  var value$3 = serialize$1(value$2);
  var nullableString = value$3 !== undefined ? value$3 : null;
  var value$4 = value$1.nullableColor;
  var nullableColor = value$4 !== undefined ? serialize(value$4) : null;
  var value$5 = value$1.futureTime;
  var futureTime = value$5 !== undefined ? Caml_option.valFromOption(value$5).toISOString() : null;
  var value$6 = value$1.favoriteColor;
  var value$7 = serialize(value$6);
  var value$8 = value$1.currentTime;
  var value$9 = value$8.toISOString();
  var customFields = {
    currentTime: value$9,
    favoriteColor: value$7,
    futureTime: futureTime,
    nullableColor: nullableColor,
    nullableString: nullableString
  };
  return {
          customFields: customFields
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse$3,
  serialize: serialize$3,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

exports.Color = Color;
exports.NullableString = NullableString;
exports.DateTime = DateTime;
exports.MyQuery = MyQuery;
/* query Not a pure module */

