Compile Template › fragmentDefinition.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function deepMerge(json1, param) {
  return json1;
}

var GraphQL_PPX = {
  deepMerge: deepMerge
};

var Raw = {};

var query = (require(\"gql\")`
  fragment ListFragment on Lists   {
    nullableOfNullable
    nullableOfNonNullable
  }
`);

function parse(value) {
  var value$1 = value.nullableOfNullable;
  var value$2 = value.nullableOfNonNullable;
  return {
          nullableOfNullable: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }) : undefined,
          nullableOfNonNullable: !(value$2 == null) ? value$2.map(function (value) {
                  return value;
                }) : undefined
        };
}

function serialize(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map(function (value) {
          return value;
        }) : null;
  var value$2 = value.nullableOfNullable;
  var nullableOfNullable = value$2 !== undefined ? value$2.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  return {
          nullableOfNullable: nullableOfNullable,
          nullableOfNonNullable: nullableOfNonNullable
        };
}

function verifyArgsAndParse(_ListFragment, value) {
  return parse(value);
}

function verifyName(param) {
  
}

var ListFragment = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$1 = {};

var query$1 = (require(\"gql\")`
  fragment Another on Lists   {
    nullableOfNonNullable
  }
`);

function parse$1(value) {
  var value$1 = value.nullableOfNonNullable;
  return {
          nullableOfNonNullable: !(value$1 == null) ? value$1.map(function (value) {
                  return value;
                }) : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map(function (value) {
          return value;
        }) : null;
  return {
          nullableOfNonNullable: nullableOfNonNullable
        };
}

function verifyArgsAndParse$1(_Another, value) {
  return parse$1(value);
}

function verifyName$1(param) {
  
}

var Another = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  verifyArgsAndParse: verifyArgsAndParse$1,
  verifyName: verifyName$1
};

var Raw$2 = {};

var query$2 = (require(\"gql\")`
  fragment FragmentWithArgs on Lists   {
    listWithArg(arg1: $arg1)
  }
`);

function parse$2(value) {
  var value$1 = value.listWithArg;
  return {
          listWithArg: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }) : undefined
        };
}

function serialize$2(value) {
  var value$1 = value.listWithArg;
  var listWithArg = value$1 !== undefined ? value$1.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  return {
          listWithArg: listWithArg
        };
}

function verifyArgsAndParse$2(_arg1, _FragmentWithArgs, value) {
  return parse$2(value);
}

function verifyName$2(param) {
  
}

var FragmentWithArgs = {
  Raw: Raw$2,
  query: query$2,
  parse: parse$2,
  serialize: serialize$2,
  verifyArgsAndParse: verifyArgsAndParse$2,
  verifyName: verifyName$2
};

var Raw$3 = {};

var query$3 = (require(\"gql\")`
  fragment InlineListFragment on Lists   {
    nullableOfNullable
    nullableOfNonNullable
  }
`);

function parse$3(value) {
  var value$1 = value.nullableOfNullable;
  var value$2 = value.nullableOfNonNullable;
  return {
          nullableOfNullable: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }) : undefined,
          nullableOfNonNullable: !(value$2 == null) ? value$2.map(function (value) {
                  return value;
                }) : undefined
        };
}

function serialize$3(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map(function (value) {
          return value;
        }) : null;
  var value$2 = value.nullableOfNullable;
  var nullableOfNullable = value$2 !== undefined ? value$2.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  return {
          nullableOfNullable: nullableOfNullable,
          nullableOfNonNullable: nullableOfNonNullable
        };
}

function verifyArgsAndParse$3(_InlineListFragment, value) {
  return parse$3(value);
}

function verifyName$3(param) {
  
}

var InlineListFragment = {
  Raw: Raw$3,
  query: query$3,
  parse: parse$3,
  serialize: serialize$3,
  verifyArgsAndParse: verifyArgsAndParse$3,
  verifyName: verifyName$3
};

var Raw$4 = {};

var query$4 = (require(\"gql\")`
  fragment InlineListFragment on Lists   {
    nullableOfNullable
    nullableOfNonNullable
  }
`);

function parse$4(value) {
  var value$1 = value.nullableOfNullable;
  var value$2 = value.nullableOfNonNullable;
  return {
          nullableOfNullable: !(value$1 == null) ? value$1.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }) : undefined,
          nullableOfNonNullable: !(value$2 == null) ? value$2.map(function (value) {
                  return value;
                }) : undefined
        };
}

function serialize$4(value) {
  var value$1 = value.nullableOfNonNullable;
  var nullableOfNonNullable = value$1 !== undefined ? value$1.map(function (value) {
          return value;
        }) : null;
  var value$2 = value.nullableOfNullable;
  var nullableOfNullable = value$2 !== undefined ? value$2.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  return {
          nullableOfNullable: nullableOfNullable,
          nullableOfNonNullable: nullableOfNonNullable
        };
}

function verifyArgsAndParse$4(_InlineListFragment, value) {
  return parse$4(value);
}

function verifyName$4(param) {
  
}

var Wrapper = {
  Raw: Raw$4,
  query: query$4,
  parse: parse$4,
  serialize: serialize$4,
  verifyArgsAndParse: verifyArgsAndParse$4,
  verifyName: verifyName$4
};

var Raw$5 = {};

var query$5 = ((frag_0, frag_1, frag_2) => require(\"gql\")`
  query MyQuery($arg1: String)  {
    l1: lists  {
      ...ListFragment
    }
    l2: lists  {
      ...ListFragment
      ...ListFragment
    }
    l3: lists  {
      nullableOfNullable
      ...ListFragment
      ...ListFragment
    }
    l4: lists  {
      nullableOfNullable
      ...InlineListFragment
    }
    l5: lists  {
      ...FragmentWithArgs
    }
  }
  ${frag_0}
  ${frag_1}
  ${frag_2}
`)(query$2, query$3, query);

function parse$5(value) {
  var value$1 = value.l2;
  var value$2 = value.l3;
  var value$3 = value$2[\"nullableOfNullable\"];
  var value$4 = value.l4;
  var value$5 = value$4[\"nullableOfNullable\"];
  return {
          l1: parse(value.l1),
          l2: {
            frag1: parse(value$1),
            frag2: parse(value$1)
          },
          l3: {
            nullableOfNullable: !(value$3 == null) ? value$3.map(function (value) {
                    if (!(value == null)) {
                      return value;
                    }
                    
                  }) : undefined,
            frag1: parse(value$2),
            frag2: parse(value$2)
          },
          l4: {
            nullableOfNullable: !(value$5 == null) ? value$5.map(function (value) {
                    if (!(value == null)) {
                      return value;
                    }
                    
                  }) : undefined,
            inlineListFragment: parse$3(value$4)
          },
          l5: parse$2(value.l5)
        };
}

function serialize$5(value) {
  var value$1 = value.l5;
  var l5 = serialize$2(value$1);
  var value$2 = value.l4;
  var value$3 = value$2.nullableOfNullable;
  var l4 = [serialize$3(value$2.inlineListFragment)].reduce(deepMerge, {
        nullableOfNullable: value$3 !== undefined ? value$3.map(function (value) {
                if (value !== undefined) {
                  return value;
                } else {
                  return null;
                }
              }) : null
      });
  var value$4 = value.l3;
  var value$5 = value$4.nullableOfNullable;
  var l3 = [
      serialize(value$4.frag1),
      serialize(value$4.frag2)
    ].reduce(deepMerge, {
        nullableOfNullable: value$5 !== undefined ? value$5.map(function (value) {
                if (value !== undefined) {
                  return value;
                } else {
                  return null;
                }
              }) : null
      });
  var value$6 = value.l2;
  var l2 = [
      serialize(value$6.frag1),
      serialize(value$6.frag2)
    ].reduce(deepMerge, (function (prim) {
          return {};
        }));
  var value$7 = value.l1;
  var l1 = serialize(value$7);
  return {
          l1: l1,
          l2: l2,
          l3: l3,
          l4: l4,
          l5: l5
        };
}

function serializeVariables(inp) {
  var a = inp.arg1;
  return {
          arg1: a !== undefined ? a : undefined
        };
}

function makeVariables(arg1, param) {
  return {
          arg1: arg1
        };
}

function makeDefaultVariables(param) {
  return {
          arg1: undefined
        };
}

var MyQuery = {
  Raw: Raw$5,
  query: query$5,
  parse: parse$5,
  serialize: serialize$5,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$6 = {};

var query$6 = ((frag_0) => require(\"gql\")`
  query   {
    lists  {
      ...ListFragment
    }
  }
  ${frag_0}
`)(query);

function parse$6(value) {
  return {
          lists: parse(value.lists)
        };
}

function serialize$6(value) {
  var value$1 = value.lists;
  var lists = serialize(value$1);
  return {
          lists: lists
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MyQuery2 = {
  Raw: Raw$6,
  query: query$6,
  parse: parse$6,
  serialize: serialize$6,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

exports.GraphQL_PPX = GraphQL_PPX;
exports.ListFragment = ListFragment;
exports.Another = Another;
exports.FragmentWithArgs = FragmentWithArgs;
exports.InlineListFragment = InlineListFragment;
exports.Wrapper = Wrapper;
exports.MyQuery = MyQuery;
exports.MyQuery2 = MyQuery2;
/* query Not a pure module */

