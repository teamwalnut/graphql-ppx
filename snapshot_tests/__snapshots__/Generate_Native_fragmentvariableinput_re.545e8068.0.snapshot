Generate Native › fragmentvariableinput.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module Test: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {type t;};
  type t_reposts = {id: int};
  type t = {reposts: array(option(t_reposts))};
  type nonrec t_Post = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse:
    (~name: [ | `NonNull_String], ~fragmentName: [ | `test], Raw.t) => t;
  let verifyName: [ | `test] => unit;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
  };
  type t_reposts = {id: int};
  type t = {reposts: array(option(t_reposts))};
  type nonrec t_Post = t;
  let query = \"fragment test on Post   {\\nreposts(arg: {name: $name})  {\\nid  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        reposts: {
          let value = Yojson.Basic.Util.member(\"reposts\", value);
          switch (value) {
          | `List(json_list) =>
            List.map(
              value =>
                switch (value) {
                | `Null => None
                | value =>
                  Some(
                    {
                      id: {
                        let value = Yojson.Basic.Util.member(\"id\", value);
                        Yojson.Basic.Util.to_int(value);
                      },
                    }: t_reposts,
                  )
                },
              json_list,
            )
            |> Array.of_list
          | _ => [||]
          };
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let reposts = {
        let value = (value: t).reposts;
        `List(
          value
          |> Array.map(value =>
               switch (value) {
               | Some(value) =>
                 let id = {
                   let value = (value: t_reposts).id;
                   `Int(value);
                 };
                 `Assoc([(\"id\", id)]);
               | None => `Null
               }
             )
          |> Array.to_list,
        );
      };
      `Assoc([(\"reposts\", reposts)]);
    };
  let verifyArgsAndParse =
      (
        ~name as _name: [ | `NonNull_String],
        ~fragmentName as _test: [ | `test],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `test => ();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
};

