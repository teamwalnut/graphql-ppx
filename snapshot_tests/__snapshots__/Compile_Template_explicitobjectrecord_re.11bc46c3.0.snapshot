Compile Template › explicit_object_record.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require(\"gql\")`
  query   {
    lists  {
      nullableOfNullable
      nullableOfNonNullable
      nonNullableOfNullable
      nonNullableOfNonNullable
    }
  }
`);

function parse(value) {
  var value$1 = value.lists;
  var value$2 = value$1.nullableOfNullable;
  var value$3 = value$1.nullableOfNonNullable;
  var value$4 = value$1.nonNullableOfNullable;
  var value$5 = value$1.nonNullableOfNonNullable;
  return {
          lists: {
            nullableOfNullable: !(value$2 == null) ? value$2.map(function (value) {
                    if (!(value == null)) {
                      return value;
                    }
                    
                  }) : undefined,
            nullableOfNonNullable: !(value$3 == null) ? value$3.map(function (value) {
                    return value;
                  }) : undefined,
            nonNullableOfNullable: value$4.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }),
            nonNullableOfNonNullable: value$5.map(function (value) {
                  return value;
                })
          }
        };
}

function serialize(value) {
  var value$1 = value.lists;
  var value$2 = value$1.nonNullableOfNonNullable;
  var nonNullableOfNonNullable = value$2.map(function (value) {
        return value;
      });
  var value$3 = value$1.nonNullableOfNullable;
  var nonNullableOfNullable = value$3.map(function (value) {
        if (value !== undefined) {
          return value;
        } else {
          return null;
        }
      });
  var value$4 = value$1.nullableOfNonNullable;
  var nullableOfNonNullable = value$4 !== undefined ? value$4.map(function (value) {
          return value;
        }) : null;
  var value$5 = value$1.nullableOfNullable;
  var nullableOfNullable = value$5 !== undefined ? value$5.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  var lists = {
    nullableOfNullable: nullableOfNullable,
    nullableOfNonNullable: nullableOfNonNullable,
    nonNullableOfNullable: nonNullableOfNullable,
    nonNullableOfNonNullable: nonNullableOfNonNullable
  };
  return {
          lists: lists
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var RecordsQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

var query$1 = (require(\"gql\")`
  query   {
    lists  {
      nullableOfNullable
      nullableOfNonNullable
      nonNullableOfNullable
      nonNullableOfNonNullable
    }
  }
`);

function parse$1(value) {
  var value$1 = value.lists;
  var value$2 = value$1.nullableOfNullable;
  var value$3 = value$1.nullableOfNonNullable;
  var value$4 = value$1.nonNullableOfNullable;
  var value$5 = value$1.nonNullableOfNonNullable;
  return {
          lists: {
            nullableOfNullable: !(value$2 == null) ? value$2.map(function (value) {
                    if (!(value == null)) {
                      return value;
                    }
                    
                  }) : undefined,
            nullableOfNonNullable: !(value$3 == null) ? value$3.map(function (value) {
                    return value;
                  }) : undefined,
            nonNullableOfNullable: value$4.map(function (value) {
                  if (!(value == null)) {
                    return value;
                  }
                  
                }),
            nonNullableOfNonNullable: value$5.map(function (value) {
                  return value;
                })
          }
        };
}

function serialize$1(value) {
  var value$1 = value.lists;
  var value$2 = value$1.nonNullableOfNonNullable;
  var nonNullableOfNonNullable = value$2.map(function (value) {
        return value;
      });
  var value$3 = value$1.nonNullableOfNullable;
  var nonNullableOfNullable = value$3.map(function (value) {
        if (value !== undefined) {
          return value;
        } else {
          return null;
        }
      });
  var value$4 = value$1.nullableOfNonNullable;
  var nullableOfNonNullable = value$4 !== undefined ? value$4.map(function (value) {
          return value;
        }) : null;
  var value$5 = value$1.nullableOfNullable;
  var nullableOfNullable = value$5 !== undefined ? value$5.map(function (value) {
          if (value !== undefined) {
            return value;
          } else {
            return null;
          }
        }) : null;
  var lists = {
    nullableOfNullable: nullableOfNullable,
    nullableOfNonNullable: nullableOfNonNullable,
    nonNullableOfNullable: nonNullableOfNullable,
    nonNullableOfNonNullable: nonNullableOfNonNullable
  };
  return {
          lists: lists
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var ObjectsQuery = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

exports.RecordsQuery = RecordsQuery;
exports.ObjectsQuery = ObjectsQuery;
/* query Not a pure module */

