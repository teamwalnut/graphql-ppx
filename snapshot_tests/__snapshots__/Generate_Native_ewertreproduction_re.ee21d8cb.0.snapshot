Generate Native › ewert_reproduction.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module UserData: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {type t;};
  type t_user = {
    id: string,
    firstname: option(string),
    lastname: string,
  };
  type t = {user: t_user};
  type nonrec t_Workspace = t;
  /** the GraphQL fragment */
  let query: string;
  /** Parse the raw JSON-compatible GraphQL data into ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON-compatible data */
  let serialize: t => Raw.t;
  let verifyArgsAndParse:
    (~userId: [ | `NonNull_String], ~fragmentName: [ | `UserData], Raw.t) => t;
  let verifyName: [ | `UserData] => unit;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
  };
  type t_user = {
    id: string,
    firstname: option(string),
    lastname: string,
  };
  type t = {user: t_user};
  type nonrec t_Workspace = t;
  let query = \"fragment UserData on Workspace   {\\nuser(id: $userId)  {\\nid  \\nfirstname  \\nlastname  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        user: {
          let value = Yojson.Basic.Util.member(\"user\", value);
          (
            {
              id: {
                let value = Yojson.Basic.Util.member(\"id\", value);
                Yojson.Basic.Util.to_string(value);
              },
              firstname: {
                let value = Yojson.Basic.Util.member(\"firstname\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_string(value))
                };
              },
              lastname: {
                let value = Yojson.Basic.Util.member(\"lastname\", value);
                Yojson.Basic.Util.to_string(value);
              },
            }: t_user
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let user = {
        let value = (value: t).user;
        let lastname = {
          let value = (value: t_user).lastname;
          `String(value);
        }
        and firstname = {
          let value = (value: t_user).firstname;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and id = {
          let value = (value: t_user).id;
          `String(value);
        };
        `Assoc([
          (\"id\", id),
          (\"firstname\", firstname),
          (\"lastname\", lastname),
        ]);
      };
      `Assoc([(\"user\", user)]);
    };
  let verifyArgsAndParse =
      (
        ~userId as _userId: [ | `NonNull_String],
        ~fragmentName as _UserData: [ | `UserData],
        value: Raw.t,
      ) =>
    parse(value);
  let verifyName =
    fun
    | `UserData => ();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
};

