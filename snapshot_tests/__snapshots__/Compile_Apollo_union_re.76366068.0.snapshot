Compile Apollo › union.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

function parse(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          NAME: \"Dog\",
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name,
            barkVolume: value$1.barkVolume
          }
        };
        break;
    case \"Human\" :
        tmp = {
          NAME: \"Human\",
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        NAME: \"FutureAddedValue\",
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.NAME;
  var dogOrHuman;
  if (variant === \"FutureAddedValue\") {
    dogOrHuman = value$1.VAL;
  } else if (variant === \"Dog\") {
    var value$2 = value$1.VAL;
    var value$3 = value$2.barkVolume;
    var value$4 = value$2.name;
    dogOrHuman = {
      __typename: \"Dog\",
      name: value$4,
      barkVolume: value$3
    };
  } else {
    var value$5 = value$1.VAL.name;
    dogOrHuman = {
      __typename: \"Human\",
      name: value$5
    };
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var MyQuery = {
  Raw: Raw,
  query: \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\n__typename  \\nname  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var Raw$1 = {};

function parse$1(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          NAME: \"Dog\",
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name,
            barkVolume: value$1.barkVolume
          }
        };
        break;
    case \"Human\" :
        tmp = {
          NAME: \"Human\",
          VAL: {
            __typename: value$1.__typename,
            name: value$1.name
          }
        };
        break;
    default:
      tmp = {
        NAME: \"FutureAddedValue\",
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$1(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.NAME;
  var dogOrHuman;
  if (variant === \"FutureAddedValue\") {
    dogOrHuman = value$1.VAL;
  } else if (variant === \"Dog\") {
    var value$2 = value$1.VAL;
    var value$3 = value$2.barkVolume;
    var value$4 = value$2.name;
    dogOrHuman = {
      __typename: \"Dog\",
      name: value$4,
      barkVolume: value$3
    };
  } else {
    var value$5 = value$1.VAL.name;
    dogOrHuman = {
      __typename: \"Human\",
      name: value$5
    };
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var MyQueryNoError = {
  Raw: Raw$1,
  query: \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n__typename  \\nname  \\nbarkVolume  \\n}\\n\\n...on Human   {\\n__typename  \\nname  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var Raw$2 = {};

function parse$2(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp;
  switch (typename) {
    case \"Dog\" :
        tmp = {
          NAME: \"Dog\",
          VAL: {
            name: value$1.name,
            __typename: value$1.__typename
          }
        };
        break;
    case \"Human\" :
        tmp = {
          NAME: \"Human\",
          VAL: {
            name: value$1.name,
            __typename: value$1.__typename
          }
        };
        break;
    default:
      tmp = {
        NAME: \"FutureAddedValue\",
        VAL: value$1
      };
  }
  return {
          dogOrHuman: tmp
        };
}

function serialize$2(value) {
  var value$1 = value.dogOrHuman;
  var variant = value$1.NAME;
  var dogOrHuman;
  if (variant === \"FutureAddedValue\") {
    dogOrHuman = value$1.VAL;
  } else if (variant === \"Dog\") {
    var value$2 = value$1.VAL.name;
    dogOrHuman = {
      name: value$2,
      __typename: \"Dog\"
    };
  } else {
    var value$3 = value$1.VAL.name;
    dogOrHuman = {
      name: value$3,
      __typename: \"Human\"
    };
  }
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$2(param) {
  
}

function makeVariables$2(param) {
  
}

function makeDefaultVariables$2(param) {
  
}

var NamedQuery = {
  Raw: Raw$2,
  query: \"query   {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\nname  \\n__typename  \\n}\\n\\n...on Human   {\\nname  \\n__typename  \\n}\\n\\n}\\n\\n}\\n\",
  parse: parse$2,
  serialize: serialize$2,
  serializeVariables: serializeVariables$2,
  makeVariables: makeVariables$2,
  makeDefaultVariables: makeDefaultVariables$2
};

var Raw$3 = {};

var query = \"fragment DogFields on Dog   {\\nname  \\n__typename  \\n}\\n\";

function parse$3(value) {
  return {
          name: value.name,
          __typename: value.__typename
        };
}

function serialize$3(value) {
  var value$1 = value.__typename;
  var value$2 = value.name;
  return {
          name: value$2,
          __typename: value$1
        };
}

function verifyArgsAndParse(_DogFields, value) {
  return parse$3(value);
}

function verifyName(param) {
  
}

var DogFields = {
  Raw: Raw$3,
  query: query,
  parse: parse$3,
  serialize: serialize$3,
  verifyArgsAndParse: verifyArgsAndParse,
  verifyName: verifyName
};

var Raw$4 = {};

var query$1 = \"query dogOrHuman  {\\ndogOrHuman  {\\n__typename\\n...on Dog   {\\n...DogFields   \\n}\\n\\n}\\n\\n}\\nfragment DogFields on Dog   {\\nname  \\n__typename  \\n}\\n\";

function parse$4(value) {
  var value$1 = value.dogOrHuman;
  var typename = value$1[\"__typename\"];
  var tmp = typename === \"Dog\" ? ({
        NAME: \"Dog\",
        VAL: parse$3(value$1)
      }) : ({
        NAME: \"FutureAddedValue\",
        VAL: value$1
      });
  return {
          dogOrHuman: tmp
        };
}

function serialize$4(value) {
  var value$1 = value.dogOrHuman;
  var dogOrHuman = value$1.NAME === \"Dog\" ? serialize$3(value$1.VAL) : value$1.VAL;
  return {
          dogOrHuman: dogOrHuman
        };
}

function serializeVariables$3(param) {
  
}

function makeVariables$3(param) {
  
}

function makeDefaultVariables$3(param) {
  
}

var DogOrHuman = {
  Raw: Raw$4,
  query: query$1,
  parse: parse$4,
  serialize: serialize$4,
  serializeVariables: serializeVariables$3,
  makeVariables: makeVariables$3,
  makeDefaultVariables: makeDefaultVariables$3
};

var NamedSpread = {
  DogFields: DogFields,
  DogOrHuman: DogOrHuman
};

exports.MyQuery = MyQuery;
exports.MyQueryNoError = MyQueryNoError;
exports.NamedQuery = NamedQuery;
exports.NamedSpread = NamedSpread;
/* No side effect */

