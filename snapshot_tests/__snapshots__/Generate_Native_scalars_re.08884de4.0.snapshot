Generate Native › scalars.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t_variousScalars = {
    nullableString: option(string),
    string,
    nullableInt: option(int),
    int,
    nullableFloat: option(float),
    float,
    nullableBoolean: option(bool),
    boolean: bool,
    nullableID: option(string),
    id: string,
  };
  type t = {variousScalars: t_variousScalars};
  type t_variables = unit;
  let query = \"query   {\\nvariousScalars  {\\nnullableString  \\nstring  \\nnullableInt  \\nint  \\nnullableFloat  \\nfloat  \\nnullableBoolean  \\nboolean  \\nnullableID  \\nid  \\n}\\n\\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        variousScalars: {
          let value = Yojson.Basic.Util.member(\"variousScalars\", value);
          (
            {
              nullableString: {
                let value = Yojson.Basic.Util.member(\"nullableString\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_string(value))
                };
              },
              string: {
                let value = Yojson.Basic.Util.member(\"string\", value);
                Yojson.Basic.Util.to_string(value);
              },
              nullableInt: {
                let value = Yojson.Basic.Util.member(\"nullableInt\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_int(value))
                };
              },
              int: {
                let value = Yojson.Basic.Util.member(\"int\", value);
                Yojson.Basic.Util.to_int(value);
              },
              nullableFloat: {
                let value = Yojson.Basic.Util.member(\"nullableFloat\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_float(value))
                };
              },
              float: {
                let value = Yojson.Basic.Util.member(\"float\", value);
                Yojson.Basic.Util.to_float(value);
              },
              nullableBoolean: {
                let value =
                  Yojson.Basic.Util.member(\"nullableBoolean\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_bool(value))
                };
              },
              boolean: {
                let value = Yojson.Basic.Util.member(\"boolean\", value);
                Yojson.Basic.Util.to_bool(value);
              },
              nullableID: {
                let value = Yojson.Basic.Util.member(\"nullableID\", value);
                switch (value) {
                | `Null => None
                | value => Some(Yojson.Basic.Util.to_string(value))
                };
              },
              id: {
                let value = Yojson.Basic.Util.member(\"id\", value);
                Yojson.Basic.Util.to_string(value);
              },
            }: t_variousScalars
          );
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let variousScalars = {
        let value = (value: t).variousScalars;
        let id = {
          let value = (value: t_variousScalars).id;
          `String(value);
        }
        and nullableID = {
          let value = (value: t_variousScalars).nullableID;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        }
        and boolean = {
          let value = (value: t_variousScalars).boolean;
          `Bool(value);
        }
        and nullableBoolean = {
          let value = (value: t_variousScalars).nullableBoolean;
          switch (value) {
          | Some(value) => `Bool(value)
          | None => `Null
          };
        }
        and float = {
          let value = (value: t_variousScalars).float;
          `Float(value);
        }
        and nullableFloat = {
          let value = (value: t_variousScalars).nullableFloat;
          switch (value) {
          | Some(value) => `Float(value)
          | None => `Null
          };
        }
        and int = {
          let value = (value: t_variousScalars).int;
          `Int(value);
        }
        and nullableInt = {
          let value = (value: t_variousScalars).nullableInt;
          switch (value) {
          | Some(value) => `Int(value)
          | None => `Null
          };
        }
        and string = {
          let value = (value: t_variousScalars).string;
          `String(value);
        }
        and nullableString = {
          let value = (value: t_variousScalars).nullableString;
          switch (value) {
          | Some(value) => `String(value)
          | None => `Null
          };
        };
        `Assoc([
          (\"nullableString\", nullableString),
          (\"string\", string),
          (\"nullableInt\", nullableInt),
          (\"int\", int),
          (\"nullableFloat\", nullableFloat),
          (\"float\", float),
          (\"nullableBoolean\", nullableBoolean),
          (\"boolean\", boolean),
          (\"nullableID\", nullableID),
          (\"id\", id),
        ]);
      };
      `Assoc([(\"variousScalars\", variousScalars)]);
    };
  let serializeVariables = () => `Null;
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};

