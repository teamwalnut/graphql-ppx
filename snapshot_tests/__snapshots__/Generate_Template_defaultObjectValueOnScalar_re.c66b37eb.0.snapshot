Generate Template › defaultObjectValueOnScalar.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t = {defaultObjectValueOnScalar: string};
    type t_variables = unit;
  };
  type t = {defaultObjectValueOnScalar: string};
  type t_variables = unit;
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: unit => Raw.t_variables;
  let makeVariables: unit => t_variables;
  let makeDefaultVariables: unit => t_variables;
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = {defaultObjectValueOnScalar: string};
    type t_variables = unit;
  };
  type t = {defaultObjectValueOnScalar: string};
  type t_variables = unit;
  let query: string = [%raw
    \"require(\\\"gql\\\")`\\n  query   {\\n    defaultObjectValueOnScalar(filter: {some: {json: \\\"value\\\"}}, arg: {field: \\\"otherValue\\\"})\\n  }\\n`\"
  ];
  let parse: Raw.t => t =
    (value) => (
      {
        defaultObjectValueOnScalar: {
          let value = (value: Raw.t).defaultObjectValueOnScalar;
          value;
        },
      }: t
    );
  let serialize: t => Raw.t =
    (value) => (
      {
        let defaultObjectValueOnScalar = {
          let value = (value: t).defaultObjectValueOnScalar;
          value;
        };
        {defaultObjectValueOnScalar: defaultObjectValueOnScalar};
      }: Raw.t
    );
  let serializeVariables = () => ();
  let makeVariables = () => ();
  let makeDefaultVariables = () => makeVariables();
  external unsafe_fromJson: Js.Json.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Js.Json.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Js.Json.t = \"%identity\";
};

