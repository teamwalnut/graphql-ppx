Compile Template › recursiveInput.re › output
// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


var Raw = {};

var query = (require(\"gql\")`
  query ($arg: RecursiveInput!)  {
    recursiveInput(arg: $arg)
  }
`);

function parse(value) {
  return {
          recursiveInput: value.recursiveInput
        };
}

function serialize(value) {
  var value$1 = value.recursiveInput;
  return {
          recursiveInput: value$1
        };
}

function serializeInputObjectRecursiveInput(inp) {
  var a = inp.otherField;
  var a$1 = inp.inner;
  var a$2 = inp.enum;
  return {
          otherField: a !== undefined ? a : undefined,
          inner: a$1 !== undefined ? serializeInputObjectRecursiveInput(a$1) : undefined,
          enum: a$2 !== undefined ? (
              a$2 === \"THIRD\" ? \"THIRD\" : (
                  a$2 === \"SECOND\" ? \"SECOND\" : \"FIRST\"
                )
            ) : undefined
        };
}

function serializeVariables(inp) {
  return {
          arg: serializeInputObjectRecursiveInput(inp.arg)
        };
}

function makeVariables(arg, param) {
  return {
          arg: arg
        };
}

function makeInputObjectRecursiveInput(otherField, inner, $$enum, param) {
  return {
          otherField: otherField,
          inner: inner,
          enum: $$enum
        };
}

var MyQuery = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  serializeInputObjectRecursiveInput: serializeInputObjectRecursiveInput,
  makeVariables: makeVariables,
  makeInputObjectRecursiveInput: makeInputObjectRecursiveInput
};

var Raw$1 = {};

var query$1 = (require(\"gql\")`
  query Test($input: problem_input!)  {
    recursiveRepro(input: $input)
  }
`);

function parse$1(value) {
  return {
          recursiveRepro: value.recursiveRepro
        };
}

function serialize$1(value) {
  var value$1 = value.recursiveRepro;
  return {
          recursiveRepro: value$1
        };
}

function serializeInputObjectnested_type(inp) {
  var a = inp.the_problem;
  return {
          the_problem: a !== undefined ? ({
                id: a.id
              }) : undefined
        };
}

function serializeInputObjectproblem_input(inp) {
  var a = inp.the_problem;
  var a$1 = inp.b;
  return {
          the_problem: a !== undefined ? ({
                id: a.id
              }) : undefined,
          b: a$1 !== undefined ? serializeInputObjectnested_type(a$1) : undefined
        };
}

function serializeInputObjectthis_will_be_duplicated(inp) {
  return {
          id: inp.id
        };
}

function serializeVariables$1(inp) {
  return {
          input: serializeInputObjectproblem_input(inp.input)
        };
}

function makeVariables$1(input, param) {
  return {
          input: input
        };
}

function makeInputObjectproblem_input(the_problem, b, param) {
  return {
          the_problem: the_problem,
          b: b
        };
}

function makeInputObjectthis_will_be_duplicated(id, param) {
  return {
          id: id
        };
}

function makeInputObjectnested_type(the_problem, param) {
  return {
          the_problem: the_problem
        };
}

var Test = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  serializeInputObjectproblem_input: serializeInputObjectproblem_input,
  serializeInputObjectthis_will_be_duplicated: serializeInputObjectthis_will_be_duplicated,
  serializeInputObjectnested_type: serializeInputObjectnested_type,
  makeVariables: makeVariables$1,
  makeInputObjectproblem_input: makeInputObjectproblem_input,
  makeInputObjectthis_will_be_duplicated: makeInputObjectthis_will_be_duplicated,
  makeInputObjectnested_type: makeInputObjectnested_type
};

exports.MyQuery = MyQuery;
exports.Test = Test;
/* query Not a pure module */

