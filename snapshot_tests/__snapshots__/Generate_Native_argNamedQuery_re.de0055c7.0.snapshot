Generate Native › argNamedQuery.re › output
[@ocaml.ppx.context
  {
    tool_name: \"ppx_driver\",
    include_dirs: [],
    load_path: [],
    open_modules: [],
    for_package: None,
    debug: false,
    use_threads: false,
    use_vmthreads: false,
    recursive_types: false,
    principal: false,
    transparent_modules: false,
    unboxed_types: false,
    unsafe_string: false,
    cookies: [],
  }
];
module MyQuery: {
  [@ocaml.warning \"-32-30\"];
  module Raw: {
    type t;
    type t_variables;
  };
  type t = {argNamedQuery: int};
  type t_variables = {query: int};
  /** The GraphQL query */
  let query: string;
  /** Parse the JSON-compatible GraphQL data to ReasonML data types */
  let parse: Raw.t => t;
  /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
  let serialize: t => Raw.t;
  let serializeVariables: t_variables => Raw.t_variables;
  let makeVariables: (~query: int, unit) => t_variables;
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
} = {
  [@ocaml.warning \"-32-30\"];
  module Raw = {
    type t = Yojson.Basic.t;
    type t_variables = Yojson.Basic.t;
  };
  type t = {argNamedQuery: int};
  type t_variables = {query: int};
  let query = \"query ($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
  let parse: Raw.t => t =
    (value) => (
      {
        argNamedQuery: {
          let value = Yojson.Basic.Util.member(\"argNamedQuery\", value);
          Yojson.Basic.Util.to_int(value);
        },
      }: t
    );
  let serialize: t => Raw.t =
    value => {
      let argNamedQuery = {
        let value = (value: t).argNamedQuery;
        `Int(value);
      };
      `Assoc([(\"argNamedQuery\", argNamedQuery)]);
    };
  let serializeVariables: t_variables => Raw.t_variables =
    inp => `Assoc([(\"query\", (a => `Int(a))((inp: t_variables).query))]);
  let makeVariables = (~query, ()): t_variables => {query: query};
  external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
  external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
  external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
};
module MultipleQueryWithSameVarName = {
  module Query1: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: t_variables => Raw.t_variables;
    let makeVariables: (~query: int, unit) => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
      type t_variables = Yojson.Basic.t;
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    let query = \"query Query1($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
    let parse: Raw.t => t =
      (value) => (
        {
          argNamedQuery: {
            let value = Yojson.Basic.Util.member(\"argNamedQuery\", value);
            Yojson.Basic.Util.to_int(value);
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let argNamedQuery = {
          let value = (value: t).argNamedQuery;
          `Int(value);
        };
        `Assoc([(\"argNamedQuery\", argNamedQuery)]);
      };
    let serializeVariables: t_variables => Raw.t_variables =
      inp => `Assoc([(\"query\", (a => `Int(a))((inp: t_variables).query))]);
    let makeVariables = (~query, ()): t_variables => {query: query};
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
  module Query2: {
    [@ocaml.warning \"-32-30\"];
    module Raw: {
      type t;
      type t_variables;
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    /** The GraphQL query */
    let query: string;
    /** Parse the JSON-compatible GraphQL data to ReasonML data types */
    let parse: Raw.t => t;
    /** Serialize the ReasonML GraphQL data that was parsed using the parse
function back to the original JSON compatible data */
    let serialize: t => Raw.t;
    let serializeVariables: t_variables => Raw.t_variables;
    let makeVariables: (~query: int, unit) => t_variables;
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  } = {
    [@ocaml.warning \"-32-30\"];
    module Raw = {
      type t = Yojson.Basic.t;
      type t_variables = Yojson.Basic.t;
    };
    type t = {argNamedQuery: int};
    type t_variables = {query: int};
    let query = \"query Query2($query: Int!)  {\\nargNamedQuery(query: $query)  \\n}\\n\";
    let parse: Raw.t => t =
      (value) => (
        {
          argNamedQuery: {
            let value = Yojson.Basic.Util.member(\"argNamedQuery\", value);
            Yojson.Basic.Util.to_int(value);
          },
        }: t
      );
    let serialize: t => Raw.t =
      value => {
        let argNamedQuery = {
          let value = (value: t).argNamedQuery;
          `Int(value);
        };
        `Assoc([(\"argNamedQuery\", argNamedQuery)]);
      };
    let serializeVariables: t_variables => Raw.t_variables =
      inp => `Assoc([(\"query\", (a => `Int(a))((inp: t_variables).query))]);
    let makeVariables = (~query, ()): t_variables => {query: query};
    external unsafe_fromJson: Yojson.Basic.t => Raw.t = \"%identity\";
    external toJson: Raw.t => Yojson.Basic.t = \"%identity\";
    external variablesToJson: Raw.t_variables => Yojson.Basic.t = \"%identity\";
  };
};

